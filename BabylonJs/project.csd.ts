import * as SHARED from "./SharedModules"

const csdText = `
<CsoundSynthesizer>
<CsOptions>
--messagelevel=0
--midi-device=0
--nodisplays
--nosound
</CsOptions>
<CsInstruments>
giPresetUuidPreallocationCount[] = fillarray( 5, /* instr 4  -- 00: Kick 1 */ 6, /* instr 5  -- 01: Kick 2: Left */ 6, /* instr 6  -- 02: Kick 2: Right */ 4, /* instr 7  -- 03: Snare */ 5, /* instr 8  -- 04: HiHat 1 */ 7, /* instr 9  -- 05: HiHat 2 */ 5, /* instr 10 -- 06: Beacon */ 4, /* instr 11 -- 07: Bass 1+2: Edited */ 4, /* instr 12 -- 08: Bass 1+2: Distant */ 4, /* instr 13 -- 09: Rim 1: Hi Arp */ 5, /* instr 14 -- 10: Rim 2: Hi Line */ 3, /* instr 15 -- 11: Rim 3: Lo Line */ 6, /* instr 16 -- 12: Flyer 1 */ 0 /* dummy */ )
#ifndef OUTPUT_CHANNEL_COUNT
#define OUTPUT_CHANNEL_COUNT #2#
#end
#ifndef INTERNAL_CHANNEL_COUNT
#define INTERNAL_CHANNEL_COUNT #6#
#end
sr = 48000
kr = 200
nchnls = $OUTPUT_CHANNEL_COUNT
0dbfs = 1
#define INSTANCE_NAME #"DAW playback"#
#ifndef CSD_FILE_PATH
#define CSD_FILE_PATH #"undefined"#
#end
#ifndef INSTANCE_NAME
#define INSTANCE_NAME #""#
#end
gS_csdFileName = "undefined"
gS_csdFilePath = $CSD_FILE_PATH
gS_instanceName = $INSTANCE_NAME
giKR init kr
giSecondsPerKPass init 1 / kr
giSecondsPerSample init 1 / sr
gk_i init -1
opcode string_begins_with, k, SS
S_string, S_string_beginning xin
S_substring = strsubk(S_string, 0, strlenk(S_string_beginning))
k_result = 0
if (strcmpk(strsubk(S_string, 0, strlenk(S_string_beginning)), S_string_beginning) == 0) then
k_result = 1
endif
xout k_result
endop
opcode filename_from_full_path_i, S, S
S_fullPath xin
i_fullPathLength = strlen(S_fullPath)
ii = i_fullPathLength - 1
i_found = 0
while (i_found == 0 && 0 < ii) do
i_char = strchar(S_fullPath, ii)
if (i_char == 47 || i_char == 92) then
i_found = 1
else
ii -= 1
endif
od
S_filename = strsub(S_fullPath, ii + 1, i_fullPathLength)
xout S_filename
endop
opcode filename_from_full_path_k, S, S
S_fullPath xin
k_fullPathLength = strlenk(S_fullPath)
ki = k_fullPathLength - 1
k_found = 0
while (k_found == 0 && k(0) < ki) do
k_char = strchark(S_fullPath, ki)
if (k_char == 47 || k_char == 92) then
k_found = 1
else
ki -= 1
endif
od
S_filename = strsubk(S_fullPath, ki + 1, k_fullPathLength)
xout S_filename
endop
opcode string_escape_k, S, S
SUnescaped xin
SEscaped = sprintfk("%s", "")
kiStart = 0
kiCurrent = 0
kMessageLength = strlenk(SUnescaped)
while (kiCurrent < kMessageLength) do
if (strchark(SUnescaped, kiCurrent) == 34) then
if (kiCurrent > 0) then
SEscaped = strcatk(SEscaped, strsubk(SUnescaped, kiStart, kiCurrent))
SEscaped = strcatk(SEscaped, "\\\\\\"")
else
SEscaped = strcatk(SEscaped, "\\\\\\"")
endif
kiStart = kiCurrent + 1
endif
kiCurrent += 1
od
if (kiStart < kiCurrent) then
SEscaped = strcatk(SEscaped, strsubk(SUnescaped, kiStart, kiCurrent + 1))
endif
xout SEscaped
endop
opcode string_escape_i, S, S
SUnescaped xin
SEscaped = sprintf("%s", "")
iiStart = 0
iiCurrent = 0
iMessageLength = strlen(SUnescaped)
while (iiCurrent < iMessageLength) do
if (strchar(SUnescaped, iiCurrent) == 34) then
if (iiCurrent > 0) then
SEscaped = strcat(SEscaped, strsub(SUnescaped, iiStart, iiCurrent))
SEscaped = strcat(SEscaped, "\\\\\\"")
else
SEscaped = strcatk(SEscaped, "\\\\\\"")
endif
iiStart = iiCurrent + 1
endif
iiCurrent += 1
od
if (iiStart < iiCurrent) then
SEscaped = strcat(SEscaped, strsub(SUnescaped, iiStart, iiCurrent + 1))
endif
xout SEscaped
endop
opcode string_split_i, S[], SS
SIn, SSeparator xin
iSeparatorAsciiCode = strchar(SSeparator)
ii = 1
iOutCount = 1
while (ii < strlen(SIn) - 1) do
iCurrentAsciiCode = strchar(SIn, ii)
if (iCurrentAsciiCode == iSeparatorAsciiCode) then
iOutCount += 1
endif
ii += 1
od
SOut[] init iOutCount
iArrayIndex = 0
iStartIndex = 0
iEndIndex = 1
while (iEndIndex < strlen(SIn)) do
iCurrentAsciiCode = strchar(SIn, iEndIndex)
if (iCurrentAsciiCode == iSeparatorAsciiCode) then
SOut[iArrayIndex] = strsub(SIn, iStartIndex, iEndIndex)
iArrayIndex += 1
iEndIndex += 1
iStartIndex = iEndIndex
endif
iEndIndex += 1
od
SOut[iArrayIndex] = strsub(SIn, iStartIndex)
xout SOut
endop
/*
* The resonance audio lookup tables were copied from github.com/resonance-audio/resonance-audio-web-sdk.
* The original resonance audio file was authored by Andrew Allen <bitllama@google.com>.
*/
gi_AF_3D_Audio_SphericalHarmonicsAzimuthLookupTable_000_179[][] init 180, 6
gi_AF_3D_Audio_SphericalHarmonicsAzimuthLookupTable_180_359[][] init 180, 6
gi_AF_3D_Audio_SphericalHarmonicsElevationLookupTable[][] init 180, 9
gi_AF_3D_Audio_MaxReWeightsLookupTable[][] init 361, 4
gi_AF_3D_Audio_SphericalHarmonicsAzimuthLookupTable_000_179 fillarray \\
0, 0, 0, 1, 1, 1,
.052336, .034899, .017452, .999848, .999391, .99863,
.104528, .069756, .034899, .999391, .997564, .994522,
.156434, .104528, .052336, .99863, .994522, .987688,
.207912, .139173, .069756, .997564, .990268, .978148,
.258819, .173648, .087156, .996195, .984808, .965926,
.309017, .207912, .104528, .994522, .978148, .951057,
.358368, .241922, .121869, .992546, .970296, .93358,
.406737, .275637, .139173, .990268, .961262, .913545,
.45399, .309017, .156434, .987688, .951057, .891007,
.5, .34202, .173648, .984808, .939693, .866025,
.544639, .374607, .190809, .981627, .927184, .838671,
.587785, .406737, .207912, .978148, .913545, .809017,
.62932, .438371, .224951, .97437, .898794, .777146,
.669131, .469472, .241922, .970296, .882948, .743145,
.707107, .5, .258819, .965926, .866025, .707107,
.743145, .529919, .275637, .961262, .848048, .669131,
.777146, .559193, .292372, .956305, .829038, .62932,
.809017, .587785, .309017, .951057, .809017, .587785,
.838671, .615661, .325568, .945519, .788011, .544639,
.866025, .642788, .34202, .939693, .766044, .5,
.891007, .669131, .358368, .93358, .743145, .45399,
.913545, .694658, .374607, .927184, .71934, .406737,
.93358, .71934, .390731, .920505, .694658, .358368,
.951057, .743145, .406737, .913545, .669131, .309017,
.965926, .766044, .422618, .906308, .642788, .258819,
.978148, .788011, .438371, .898794, .615661, .207912,
.987688, .809017, .45399, .891007, .587785, .156434,
.994522, .829038, .469472, .882948, .559193, .104528,
.99863, .848048, .48481, .87462, .529919, .052336,
1, .866025, .5, .866025, .5, 0,
.99863, .882948, .515038, .857167, .469472, -.052336,
.994522, .898794, .529919, .848048, .438371, -.104528,
.987688, .913545, .544639, .838671, .406737, -.156434,
.978148, .927184, .559193, .829038, .374607, -.207912,
.965926, .939693, .573576, .819152, .34202, -.258819,
.951057, .951057, .587785, .809017, .309017, -.309017,
.93358, .961262, .601815, .798636, .275637, -.358368,
.913545, .970296, .615661, .788011, .241922, -.406737,
.891007, .978148, .62932, .777146, .207912, -.45399,
.866025, .984808, .642788, .766044, .173648, -.5,
.838671, .990268, .656059, .75471, .139173, -.544639,
.809017, .994522, .669131, .743145, .104528, -.587785,
.777146, .997564, .681998, .731354, .069756, -.62932,
.743145, .999391, .694658, .71934, .034899, -.669131,
.707107, 1, .707107, .707107, 0, -.707107,
.669131, .999391, .71934, .694658, -.034899, -.743145,
.62932, .997564, .731354, .681998, -.069756, -.777146,
.587785, .994522, .743145, .669131, -.104528, -.809017,
.544639, .990268, .75471, .656059, -.139173, -.838671,
.5, .984808, .766044, .642788, -.173648, -.866025,
.45399, .978148, .777146, .62932, -.207912, -.891007,
.406737, .970296, .788011, .615661, -.241922, -.913545,
.358368, .961262, .798636, .601815, -.275637, -.93358,
.309017, .951057, .809017, .587785, -.309017, -.951057,
.258819, .939693, .819152, .573576, -.34202, -.965926,
.207912, .927184, .829038, .559193, -.374607, -.978148,
.156434, .913545, .838671, .544639, -.406737, -.987688,
.104528, .898794, .848048, .529919, -.438371, -.994522,
.052336, .882948, .857167, .515038, -.469472, -.99863,
0, .866025, .866025, .5, -.5, -1,
-.052336, .848048, .87462, .48481, -.529919, -.99863,
-.104528, .829038, .882948, .469472, -.559193, -.994522,
-.156434, .809017, .891007, .45399, -.587785, -.987688,
-.207912, .788011, .898794, .438371, -.615661, -.978148,
-.258819, .766044, .906308, .422618, -.642788, -.965926,
-.309017, .743145, .913545, .406737, -.669131, -.951057,
-.358368, .71934, .920505, .390731, -.694658, -.93358,
-.406737, .694658, .927184, .374607, -.71934, -.913545,
-.45399, .669131, .93358, .358368, -.743145, -.891007,
-.5, .642788, .939693, .34202, -.766044, -.866025,
-.544639, .615661, .945519, .325568, -.788011, -.838671,
-.587785, .587785, .951057, .309017, -.809017, -.809017,
-.62932, .559193, .956305, .292372, -.829038, -.777146,
-.669131, .529919, .961262, .275637, -.848048, -.743145,
-.707107, .5, .965926, .258819, -.866025, -.707107,
-.743145, .469472, .970296, .241922, -.882948, -.669131,
-.777146, .438371, .97437, .224951, -.898794, -.62932,
-.809017, .406737, .978148, .207912, -.913545, -.587785,
-.838671, .374607, .981627, .190809, -.927184, -.544639,
-.866025, .34202, .984808, .173648, -.939693, -.5,
-.891007, .309017, .987688, .156434, -.951057, -.45399,
-.913545, .275637, .990268, .139173, -.961262, -.406737,
-.93358, .241922, .992546, .121869, -.970296, -.358368,
-.951057, .207912, .994522, .104528, -.978148, -.309017,
-.965926, .173648, .996195, .087156, -.984808, -.258819,
-.978148, .139173, .997564, .069756, -.990268, -.207912,
-.987688, .104528, .99863, .052336, -.994522, -.156434,
-.994522, .069756, .999391, .034899, -.997564, -.104528,
-.99863, .034899, .999848, .017452, -.999391, -.052336,
-1, 0, 1, 0, -1, 0,
-.99863, -.034899, .999848, -.017452, -.999391, .052336,
-.994522, -.069756, .999391, -.034899, -.997564, .104528,
-.987688, -.104528, .99863, -.052336, -.994522, .156434,
-.978148, -.139173, .997564, -.069756, -.990268, .207912,
-.965926, -.173648, .996195, -.087156, -.984808, .258819,
-.951057, -.207912, .994522, -.104528, -.978148, .309017,
-.93358, -.241922, .992546, -.121869, -.970296, .358368,
-.913545, -.275637, .990268, -.139173, -.961262, .406737,
-.891007, -.309017, .987688, -.156434, -.951057, .45399,
-.866025, -.34202, .984808, -.173648, -.939693, .5,
-.838671, -.374607, .981627, -.190809, -.927184, .544639,
-.809017, -.406737, .978148, -.207912, -.913545, .587785,
-.777146, -.438371, .97437, -.224951, -.898794, .62932,
-.743145, -.469472, .970296, -.241922, -.882948, .669131,
-.707107, -.5, .965926, -.258819, -.866025, .707107,
-.669131, -.529919, .961262, -.275637, -.848048, .743145,
-.62932, -.559193, .956305, -.292372, -.829038, .777146,
-.587785, -.587785, .951057, -.309017, -.809017, .809017,
-.544639, -.615661, .945519, -.325568, -.788011, .838671,
-.5, -.642788, .939693, -.34202, -.766044, .866025,
-.45399, -.669131, .93358, -.358368, -.743145, .891007,
-.406737, -.694658, .927184, -.374607, -.71934, .913545,
-.358368, -.71934, .920505, -.390731, -.694658, .93358,
-.309017, -.743145, .913545, -.406737, -.669131, .951057,
-.258819, -.766044, .906308, -.422618, -.642788, .965926,
-.207912, -.788011, .898794, -.438371, -.615661, .978148,
-.156434, -.809017, .891007, -.45399, -.587785, .987688,
-.104528, -.829038, .882948, -.469472, -.559193, .994522,
-.052336, -.848048, .87462, -.48481, -.529919, .99863,
0, -.866025, .866025, -.5, -.5, 1,
.052336, -.882948, .857167, -.515038, -.469472, .99863,
.104528, -.898794, .848048, -.529919, -.438371, .994522,
.156434, -.913545, .838671, -.544639, -.406737, .987688,
.207912, -.927184, .829038, -.559193, -.374607, .978148,
.258819, -.939693, .819152, -.573576, -.34202, .965926,
.309017, -.951057, .809017, -.587785, -.309017, .951057,
.358368, -.961262, .798636, -.601815, -.275637, .93358,
.406737, -.970296, .788011, -.615661, -.241922, .913545,
.45399, -.978148, .777146, -.62932, -.207912, .891007,
.5, -.984808, .766044, -.642788, -.173648, .866025,
.544639, -.990268, .75471, -.656059, -.139173, .838671,
.587785, -.994522, .743145, -.669131, -.104528, .809017,
.62932, -.997564, .731354, -.681998, -.069756, .777146,
.669131, -.999391, .71934, -.694658, -.034899, .743145,
.707107, -1, .707107, -.707107, 0, .707107,
.743145, -.999391, .694658, -.71934, .034899, .669131,
.777146, -.997564, .681998, -.731354, .069756, .62932,
.809017, -.994522, .669131, -.743145, .104528, .587785,
.838671, -.990268, .656059, -.75471, .139173, .544639,
.866025, -.984808, .642788, -.766044, .173648, .5,
.891007, -.978148, .62932, -.777146, .207912, .45399,
.913545, -.970296, .615661, -.788011, .241922, .406737,
.93358, -.961262, .601815, -.798636, .275637, .358368,
.951057, -.951057, .587785, -.809017, .309017, .309017,
.965926, -.939693, .573576, -.819152, .34202, .258819,
.978148, -.927184, .559193, -.829038, .374607, .207912,
.987688, -.913545, .544639, -.838671, .406737, .156434,
.994522, -.898794, .529919, -.848048, .438371, .104528,
.99863, -.882948, .515038, -.857167, .469472, .052336,
1, -.866025, .5, -.866025, .5, 0,
.99863, -.848048, .48481, -.87462, .529919, -.052336,
.994522, -.829038, .469472, -.882948, .559193, -.104528,
.987688, -.809017, .45399, -.891007, .587785, -.156434,
.978148, -.788011, .438371, -.898794, .615661, -.207912,
.965926, -.766044, .422618, -.906308, .642788, -.258819,
.951057, -.743145, .406737, -.913545, .669131, -.309017,
.93358, -.71934, .390731, -.920505, .694658, -.358368,
.913545, -.694658, .374607, -.927184, .71934, -.406737,
.891007, -.669131, .358368, -.93358, .743145, -.45399,
.866025, -.642788, .34202, -.939693, .766044, -.5,
.838671, -.615661, .325568, -.945519, .788011, -.544639,
.809017, -.587785, .309017, -.951057, .809017, -.587785,
.777146, -.559193, .292372, -.956305, .829038, -.62932,
.743145, -.529919, .275637, -.961262, .848048, -.669131,
.707107, -.5, .258819, -.965926, .866025, -.707107,
.669131, -.469472, .241922, -.970296, .882948, -.743145,
.62932, -.438371, .224951, -.97437, .898794, -.777146,
.587785, -.406737, .207912, -.978148, .913545, -.809017,
.544639, -.374607, .190809, -.981627, .927184, -.838671,
.5, -.34202, .173648, -.984808, .939693, -.866025,
.45399, -.309017, .156434, -.987688, .951057, -.891007,
.406737, -.275637, .139173, -.990268, .961262, -.913545,
.358368, -.241922, .121869, -.992546, .970296, -.93358,
.309017, -.207912, .104528, -.994522, .978148, -.951057,
.258819, -.173648, .087156, -.996195, .984808, -.965926,
.207912, -.139173, .069756, -.997564, .990268, -.978148,
.156434, -.104528, .052336, -.99863, .994522, -.987688,
.104528, -.069756, .034899, -.999391, .997564, -.994522,
.052336, -.034899, .017452, -.999848, .999391, -.99863
gi_AF_3D_Audio_SphericalHarmonicsAzimuthLookupTable_180_359 fillarray \\
0, 0, 0, -1, 1, -1,
-.052336, .034899, -.017452, -.999848, .999391, -.99863,
-.104528, .069756, -.034899, -.999391, .997564, -.994522,
-.156434, .104528, -.052336, -.99863, .994522, -.987688,
-.207912, .139173, -.069756, -.997564, .990268, -.978148,
-.258819, .173648, -.087156, -.996195, .984808, -.965926,
-.309017, .207912, -.104528, -.994522, .978148, -.951057,
-.358368, .241922, -.121869, -.992546, .970296, -.93358,
-.406737, .275637, -.139173, -.990268, .961262, -.913545,
-.45399, .309017, -.156434, -.987688, .951057, -.891007,
-.5, .34202, -.173648, -.984808, .939693, -.866025,
-.544639, .374607, -.190809, -.981627, .927184, -.838671,
-.587785, .406737, -.207912, -.978148, .913545, -.809017,
-.62932, .438371, -.224951, -.97437, .898794, -.777146,
-.669131, .469472, -.241922, -.970296, .882948, -.743145,
-.707107, .5, -.258819, -.965926, .866025, -.707107,
-.743145, .529919, -.275637, -.961262, .848048, -.669131,
-.777146, .559193, -.292372, -.956305, .829038, -.62932,
-.809017, .587785, -.309017, -.951057, .809017, -.587785,
-.838671, .615661, -.325568, -.945519, .788011, -.544639,
-.866025, .642788, -.34202, -.939693, .766044, -.5,
-.891007, .669131, -.358368, -.93358, .743145, -.45399,
-.913545, .694658, -.374607, -.927184, .71934, -.406737,
-.93358, .71934, -.390731, -.920505, .694658, -.358368,
-.951057, .743145, -.406737, -.913545, .669131, -.309017,
-.965926, .766044, -.422618, -.906308, .642788, -.258819,
-.978148, .788011, -.438371, -.898794, .615661, -.207912,
-.987688, .809017, -.45399, -.891007, .587785, -.156434,
-.994522, .829038, -.469472, -.882948, .559193, -.104528,
-.99863, .848048, -.48481, -.87462, .529919, -.052336,
-1, .866025, -.5, -.866025, .5, 0,
-.99863, .882948, -.515038, -.857167, .469472, .052336,
-.994522, .898794, -.529919, -.848048, .438371, .104528,
-.987688, .913545, -.544639, -.838671, .406737, .156434,
-.978148, .927184, -.559193, -.829038, .374607, .207912,
-.965926, .939693, -.573576, -.819152, .34202, .258819,
-.951057, .951057, -.587785, -.809017, .309017, .309017,
-.93358, .961262, -.601815, -.798636, .275637, .358368,
-.913545, .970296, -.615661, -.788011, .241922, .406737,
-.891007, .978148, -.62932, -.777146, .207912, .45399,
-.866025, .984808, -.642788, -.766044, .173648, .5,
-.838671, .990268, -.656059, -.75471, .139173, .544639,
-.809017, .994522, -.669131, -.743145, .104528, .587785,
-.777146, .997564, -.681998, -.731354, .069756, .62932,
-.743145, .999391, -.694658, -.71934, .034899, .669131,
-.707107, 1, -.707107, -.707107, 0, .707107,
-.669131, .999391, -.71934, -.694658, -.034899, .743145,
-.62932, .997564, -.731354, -.681998, -.069756, .777146,
-.587785, .994522, -.743145, -.669131, -.104528, .809017,
-.544639, .990268, -.75471, -.656059, -.139173, .838671,
-.5, .984808, -.766044, -.642788, -.173648, .866025,
-.45399, .978148, -.777146, -.62932, -.207912, .891007,
-.406737, .970296, -.788011, -.615661, -.241922, .913545,
-.358368, .961262, -.798636, -.601815, -.275637, .93358,
-.309017, .951057, -.809017, -.587785, -.309017, .951057,
-.258819, .939693, -.819152, -.573576, -.34202, .965926,
-.207912, .927184, -.829038, -.559193, -.374607, .978148,
-.156434, .913545, -.838671, -.544639, -.406737, .987688,
-.104528, .898794, -.848048, -.529919, -.438371, .994522,
-.052336, .882948, -.857167, -.515038, -.469472, .99863,
0, .866025, -.866025, -.5, -.5, 1,
.052336, .848048, -.87462, -.48481, -.529919, .99863,
.104528, .829038, -.882948, -.469472, -.559193, .994522,
.156434, .809017, -.891007, -.45399, -.587785, .987688,
.207912, .788011, -.898794, -.438371, -.615661, .978148,
.258819, .766044, -.906308, -.422618, -.642788, .965926,
.309017, .743145, -.913545, -.406737, -.669131, .951057,
.358368, .71934, -.920505, -.390731, -.694658, .93358,
.406737, .694658, -.927184, -.374607, -.71934, .913545,
.45399, .669131, -.93358, -.358368, -.743145, .891007,
.5, .642788, -.939693, -.34202, -.766044, .866025,
.544639, .615661, -.945519, -.325568, -.788011, .838671,
.587785, .587785, -.951057, -.309017, -.809017, .809017,
.62932, .559193, -.956305, -.292372, -.829038, .777146,
.669131, .529919, -.961262, -.275637, -.848048, .743145,
.707107, .5, -.965926, -.258819, -.866025, .707107,
.743145, .469472, -.970296, -.241922, -.882948, .669131,
.777146, .438371, -.97437, -.224951, -.898794, .62932,
.809017, .406737, -.978148, -.207912, -.913545, .587785,
.838671, .374607, -.981627, -.190809, -.927184, .544639,
.866025, .34202, -.984808, -.173648, -.939693, .5,
.891007, .309017, -.987688, -.156434, -.951057, .45399,
.913545, .275637, -.990268, -.139173, -.961262, .406737,
.93358, .241922, -.992546, -.121869, -.970296, .358368,
.951057, .207912, -.994522, -.104528, -.978148, .309017,
.965926, .173648, -.996195, -.087156, -.984808, .258819,
.978148, .139173, -.997564, -.069756, -.990268, .207912,
.987688, .104528, -.99863, -.052336, -.994522, .156434,
.994522, .069756, -.999391, -.034899, -.997564, .104528,
.99863, .034899, -.999848, -.017452, -.999391, .052336,
1, 0, -1, 0, -1, 0,
.99863, -.034899, -.999848, .017452, -.999391, -.052336,
.994522, -.069756, -.999391, .034899, -.997564, -.104528,
.987688, -.104528, -.99863, .052336, -.994522, -.156434,
.978148, -.139173, -.997564, .069756, -.990268, -.207912,
.965926, -.173648, -.996195, .087156, -.984808, -.258819,
.951057, -.207912, -.994522, .104528, -.978148, -.309017,
.93358, -.241922, -.992546, .121869, -.970296, -.358368,
.913545, -.275637, -.990268, .139173, -.961262, -.406737,
.891007, -.309017, -.987688, .156434, -.951057, -.45399,
.866025, -.34202, -.984808, .173648, -.939693, -.5,
.838671, -.374607, -.981627, .190809, -.927184, -.544639,
.809017, -.406737, -.978148, .207912, -.913545, -.587785,
.777146, -.438371, -.97437, .224951, -.898794, -.62932,
.743145, -.469472, -.970296, .241922, -.882948, -.669131,
.707107, -.5, -.965926, .258819, -.866025, -.707107,
.669131, -.529919, -.961262, .275637, -.848048, -.743145,
.62932, -.559193, -.956305, .292372, -.829038, -.777146,
.587785, -.587785, -.951057, .309017, -.809017, -.809017,
.544639, -.615661, -.945519, .325568, -.788011, -.838671,
.5, -.642788, -.939693, .34202, -.766044, -.866025,
.45399, -.669131, -.93358, .358368, -.743145, -.891007,
.406737, -.694658, -.927184, .374607, -.71934, -.913545,
.358368, -.71934, -.920505, .390731, -.694658, -.93358,
.309017, -.743145, -.913545, .406737, -.669131, -.951057,
.258819, -.766044, -.906308, .422618, -.642788, -.965926,
.207912, -.788011, -.898794, .438371, -.615661, -.978148,
.156434, -.809017, -.891007, .45399, -.587785, -.987688,
.104528, -.829038, -.882948, .469472, -.559193, -.994522,
.052336, -.848048, -.87462, .48481, -.529919, -.99863,
0, -.866025, -.866025, .5, -.5, -1,
-.052336, -.882948, -.857167, .515038, -.469472, -.99863,
-.104528, -.898794, -.848048, .529919, -.438371, -.994522,
-.156434, -.913545, -.838671, .544639, -.406737, -.987688,
-.207912, -.927184, -.829038, .559193, -.374607, -.978148,
-.258819, -.939693, -.819152, .573576, -.34202, -.965926,
-.309017, -.951057, -.809017, .587785, -.309017, -.951057,
-.358368, -.961262, -.798636, .601815, -.275637, -.93358,
-.406737, -.970296, -.788011, .615661, -.241922, -.913545,
-.45399, -.978148, -.777146, .62932, -.207912, -.891007,
-.5, -.984808, -.766044, .642788, -.173648, -.866025,
-.544639, -.990268, -.75471, .656059, -.139173, -.838671,
-.587785, -.994522, -.743145, .669131, -.104528, -.809017,
-.62932, -.997564, -.731354, .681998, -.069756, -.777146,
-.669131, -.999391, -.71934, .694658, -.034899, -.743145,
-.707107, -1, -.707107, .707107, 0, -.707107,
-.743145, -.999391, -.694658, .71934, .034899, -.669131,
-.777146, -.997564, -.681998, .731354, .069756, -.62932,
-.809017, -.994522, -.669131, .743145, .104528, -.587785,
-.838671, -.990268, -.656059, .75471, .139173, -.544639,
-.866025, -.984808, -.642788, .766044, .173648, -.5,
-.891007, -.978148, -.62932, .777146, .207912, -.45399,
-.913545, -.970296, -.615661, .788011, .241922, -.406737,
-.93358, -.961262, -.601815, .798636, .275637, -.358368,
-.951057, -.951057, -.587785, .809017, .309017, -.309017,
-.965926, -.939693, -.573576, .819152, .34202, -.258819,
-.978148, -.927184, -.559193, .829038, .374607, -.207912,
-.987688, -.913545, -.544639, .838671, .406737, -.156434,
-.994522, -.898794, -.529919, .848048, .438371, -.104528,
-.99863, -.882948, -.515038, .857167, .469472, -.052336,
-1, -.866025, -.5, .866025, .5, 0,
-.99863, -.848048, -.48481, .87462, .529919, .052336,
-.994522, -.829038, -.469472, .882948, .559193, .104528,
-.987688, -.809017, -.45399, .891007, .587785, .156434,
-.978148, -.788011, -.438371, .898794, .615661, .207912,
-.965926, -.766044, -.422618, .906308, .642788, .258819,
-.951057, -.743145, -.406737, .913545, .669131, .309017,
-.93358, -.71934, -.390731, .920505, .694658, .358368,
-.913545, -.694658, -.374607, .927184, .71934, .406737,
-.891007, -.669131, -.358368, .93358, .743145, .45399,
-.866025, -.642788, -.34202, .939693, .766044, .5,
-.838671, -.615661, -.325568, .945519, .788011, .544639,
-.809017, -.587785, -.309017, .951057, .809017, .587785,
-.777146, -.559193, -.292372, .956305, .829038, .62932,
-.743145, -.529919, -.275637, .961262, .848048, .669131,
-.707107, -.5, -.258819, .965926, .866025, .707107,
-.669131, -.469472, -.241922, .970296, .882948, .743145,
-.62932, -.438371, -.224951, .97437, .898794, .777146,
-.587785, -.406737, -.207912, .978148, .913545, .809017,
-.544639, -.374607, -.190809, .981627, .927184, .838671,
-.5, -.34202, -.173648, .984808, .939693, .866025,
-.45399, -.309017, -.156434, .987688, .951057, .891007,
-.406737, -.275637, -.139173, .990268, .961262, .913545,
-.358368, -.241922, -.121869, .992546, .970296, .93358,
-.309017, -.207912, -.104528, .994522, .978148, .951057,
-.258819, -.173648, -.087156, .996195, .984808, .965926,
-.207912, -.139173, -.069756, .997564, .990268, .978148,
-.156434, -.104528, -.052336, .99863, .994522, .987688,
-.104528, -.069756, -.034899, .999391, .997564, .994522,
-.052336, -.034899, -.017452, .999848, .999391, .99863
gi_AF_3D_Audio_SphericalHarmonicsElevationLookupTable fillarray \\
-1, 0, 1, 0, 0, -1, 0, 0, 0,
-.999848, .017452, .999543, -.030224, .000264, -.999086, .042733, -.00059, .000004,
-.999391, .034899, .998173, -.060411, .001055, -.996348, .085356, -.002357, .000034,
-.99863, .052336, .995891, -.090524, .002372, -.991791, .127757, -.005297, .000113,
-.997564, .069756, .992701, -.120527, .004214, -.985429, .169828, -.0094, .000268,
-.996195, .087156, .988606, -.150384, .006578, -.977277, .21146, -.014654, .000523,
-.994522, .104528, .983611, -.180057, .009462, -.967356, .252544, -.021043, .000903,
-.992546, .121869, .977722, -.209511, .012862, -.955693, .292976, -.028547, .001431,
-.990268, .139173, .970946, -.238709, .016774, -.942316, .332649, -.037143, .002131,
-.987688, .156434, .963292, -.267617, .021193, -.927262, .371463, -.046806, .003026,
-.984808, .173648, .954769, -.296198, .026114, -.910569, .409317, -.057505, .00414,
-.981627, .190809, .945388, -.324419, .03153, -.892279, .446114, -.069209, .005492,
-.978148, .207912, .935159, -.352244, .037436, -.872441, .481759, -.08188, .007105,
-.97437, .224951, .924096, -.379641, .043823, -.851105, .516162, -.095481, .008999,
-.970296, .241922, .912211, -.406574, .050685, -.828326, .549233, -.109969, .011193,
-.965926, .258819, .899519, -.433013, .058013, -.804164, .580889, -.1253, .013707,
-.961262, .275637, .886036, -.458924, .065797, -.77868, .61105, -.141427, .016556,
-.956305, .292372, .871778, -.484275, .074029, -.75194, .639639, -.158301, .019758,
-.951057, .309017, .856763, -.509037, .082698, -.724012, .666583, -.175868, .023329,
-.945519, .325568, .841008, -.533178, .091794, -.694969, .691816, -.194075, .027281,
-.939693, .34202, .824533, -.55667, .101306, -.664885, .715274, -.212865, .03163,
-.93358, .358368, .807359, -.579484, .111222, -.633837, .736898, -.23218, .036385,
-.927184, .374607, .789505, -.601592, .121529, -.601904, .756637, -.25196, .041559,
-.920505, .390731, .770994, -.622967, .132217, -.569169, .774442, -.272143, .04716,
-.913545, .406737, .751848, -.643582, .143271, -.535715, .79027, -.292666, .053196,
-.906308, .422618, .732091, -.663414, .154678, -.501627, .804083, -.313464, .059674,
-.898794, .438371, .711746, -.682437, .166423, -.466993, .81585, -.334472, .066599,
-.891007, .45399, .690839, -.700629, .178494, -.431899, .825544, -.355623, .073974,
-.882948, .469472, .669395, -.717968, .190875, -.396436, .833145, -.376851, .081803,
-.87462, .48481, .647439, -.734431, .203551, -.360692, .838638, -.398086, .090085,
-.866025, .5, .625, -.75, .216506, -.32476, .842012, -.419263, .098821,
-.857167, .515038, .602104, -.764655, .229726, -.288728, .843265, -.440311, .108009,
-.848048, .529919, .578778, -.778378, .243192, -.252688, .842399, -.461164, .117644,
-.838671, .544639, .555052, -.791154, .256891, -.21673, .839422, -.481753, .127722,
-.829038, .559193, .530955, -.802965, .270803, -.180944, .834347, -.502011, .138237,
-.819152, .573576, .506515, -.813798, .284914, -.14542, .827194, -.521871, .149181,
-.809017, .587785, .481763, -.823639, .299204, -.110246, .817987, -.541266, .160545,
-.798636, .601815, .456728, -.832477, .313658, -.075508, .806757, -.560132, .172317,
-.788011, .615661, .431441, -.840301, .328257, -.041294, .793541, -.578405, .184487,
-.777146, .62932, .405934, -.847101, .342984, -.007686, .778379, -.596021, .19704,
-.766044, .642788, .380236, -.852869, .357821, .025233, .761319, -.612921, .209963,
-.75471, .656059, .35438, -.857597, .372749, .057383, .742412, -.629044, .223238,
-.743145, .669131, .328396, -.861281, .387751, .088686, .721714, -.644334, .23685,
-.731354, .681998, .302317, -.863916, .402807, .119068, .699288, -.658734, .250778,
-.71934, .694658, .276175, -.865498, .417901, .148454, .675199, -.67219, .265005,
-.707107, .707107, .25, -.866025, .433013, .176777, .649519, -.684653, .279508,
-.694658, .71934, .223825, -.865498, .448125, .203969, .622322, -.696073, .294267,
-.681998, .731354, .197683, -.863916, .463218, .229967, .593688, -.706405, .309259,
-.669131, .743145, .171604, -.861281, .478275, .254712, .5637, -.715605, .324459,
-.656059, .75471, .14562, -.857597, .493276, .278147, .532443, -.723633, .339844,
-.642788, .766044, .119764, -.852869, .508205, .300221, .500009, -.730451, .355387,
-.62932, .777146, .094066, -.847101, .523041, .320884, .46649, -.736025, .371063,
-.615661, .788011, .068559, -.840301, .537768, .340093, .431982, -.740324, .386845,
-.601815, .798636, .043272, -.832477, .552367, .357807, .396584, -.74332, .402704,
-.587785, .809017, .018237, -.823639, .566821, .373991, .360397, -.744989, .418613,
-.573576, .819152, -.006515, -.813798, .581112, .388612, .323524, -.745308, .434544,
-.559193, .829038, -.030955, -.802965, .595222, .401645, .286069, -.744262, .450467,
-.544639, .838671, -.055052, -.791154, .609135, .413066, .24814, -.741835, .466352,
-.529919, .848048, -.078778, -.778378, .622833, .422856, .209843, -.738017, .482171,
-.515038, .857167, -.102104, -.764655, .6363, .431004, .171288, -.732801, .497894,
-.5, .866025, -.125, -.75, .649519, .4375, .132583, -.726184, .51349,
-.48481, .87462, -.147439, -.734431, .662474, .44234, .093837, -.718167, .528929,
-.469472, .882948, -.169395, -.717968, .67515, .445524, .05516, -.708753, .544183,
-.45399, .891007, -.190839, -.700629, .687531, .447059, .016662, -.69795, .55922,
-.438371, .898794, -.211746, -.682437, .699602, .446953, -.02155, -.685769, .574011,
-.422618, .906308, -.232091, -.663414, .711348, .445222, -.059368, -.672226, .588528,
-.406737, .913545, -.251848, -.643582, .722755, .441884, -.096684, -.657339, .602741,
-.390731, .920505, -.270994, -.622967, .733809, .436964, -.133395, -.64113, .616621,
-.374607, .927184, -.289505, -.601592, .744496, .430488, -.169397, -.623624, .630141,
-.358368, .93358, -.307359, -.579484, .754804, .422491, -.204589, -.604851, .643273,
-.34202, .939693, -.324533, -.55667, .76472, .413008, -.238872, -.584843, .65599,
-.325568, .945519, -.341008, -.533178, .774231, .402081, -.27215, -.563635, .668267,
-.309017, .951057, -.356763, -.509037, .783327, .389754, -.304329, -.541266, .680078,
-.292372, .956305, -.371778, -.484275, .791997, .376077, -.335319, -.517778, .691399,
-.275637, .961262, -.386036, -.458924, .800228, .361102, -.365034, -.493216, .702207,
-.258819, .965926, -.399519, -.433013, .808013, .344885, -.393389, -.467627, .712478,
-.241922, .970296, -.412211, -.406574, .81534, .327486, -.420306, -.441061, .722191,
-.224951, .97437, -.424096, -.379641, .822202, .308969, -.445709, -.413572, .731327,
-.207912, .978148, -.435159, -.352244, .828589, .289399, -.469527, -.385215, .739866,
-.190809, .981627, -.445388, -.324419, .834495, .268846, -.491693, -.356047, .74779,
-.173648, .984808, -.454769, -.296198, .839912, .247382, -.512145, -.326129, .755082,
-.156434, .987688, -.463292, -.267617, .844832, .225081, -.530827, -.295521, .761728,
-.139173, .990268, -.470946, -.238709, .849251, .20202, -.547684, -.264287, .767712,
-.121869, .992546, -.477722, -.209511, .853163, .178279, -.562672, -.232494, .773023,
-.104528, .994522, -.483611, -.180057, .856563, .153937, -.575747, -.200207, .777648,
-.087156, .996195, -.488606, -.150384, .859447, .129078, -.586872, -.167494, .781579,
-.069756, .997564, -.492701, -.120527, .861811, .103786, -.596018, -.134426, .784806,
-.052336, .99863, -.495891, -.090524, .863653, .078146, -.603158, -.101071, .787324,
-.034899, .999391, -.498173, -.060411, .864971, .052243, -.608272, -.0675, .789126,
-.017452, .999848, -.499543, -.030224, .865762, .026165, -.611347, -.033786, .790208,
0, 1, -.5, 0, .866025, 0, -.612372, 0, .790569,
.017452, .999848, -.499543, .030224, .865762, -.026165, -.611347, .033786, .790208,
.034899, .999391, -.498173, .060411, .864971, -.052243, -.608272, .0675, .789126,
.052336, .99863, -.495891, .090524, .863653, -.078146, -.603158, .101071, .787324,
.069756, .997564, -.492701, .120527, .861811, -.103786, -.596018, .134426, .784806,
.087156, .996195, -.488606, .150384, .859447, -.129078, -.586872, .167494, .781579,
.104528, .994522, -.483611, .180057, .856563, -.153937, -.575747, .200207, .777648,
.121869, .992546, -.477722, .209511, .853163, -.178279, -.562672, .232494, .773023,
.139173, .990268, -.470946, .238709, .849251, -.20202, -.547684, .264287, .767712,
.156434, .987688, -.463292, .267617, .844832, -.225081, -.530827, .295521, .761728,
.173648, .984808, -.454769, .296198, .839912, -.247382, -.512145, .326129, .755082,
.190809, .981627, -.445388, .324419, .834495, -.268846, -.491693, .356047, .74779,
.207912, .978148, -.435159, .352244, .828589, -.289399, -.469527, .385215, .739866,
.224951, .97437, -.424096, .379641, .822202, -.308969, -.445709, .413572, .731327,
.241922, .970296, -.412211, .406574, .81534, -.327486, -.420306, .441061, .722191,
.258819, .965926, -.399519, .433013, .808013, -.344885, -.393389, .467627, .712478,
.275637, .961262, -.386036, .458924, .800228, -.361102, -.365034, .493216, .702207,
.292372, .956305, -.371778, .484275, .791997, -.376077, -.335319, .517778, .691399,
.309017, .951057, -.356763, .509037, .783327, -.389754, -.304329, .541266, .680078,
.325568, .945519, -.341008, .533178, .774231, -.402081, -.27215, .563635, .668267,
.34202, .939693, -.324533, .55667, .76472, -.413008, -.238872, .584843, .65599,
.358368, .93358, -.307359, .579484, .754804, -.422491, -.204589, .604851, .643273,
.374607, .927184, -.289505, .601592, .744496, -.430488, -.169397, .623624, .630141,
.390731, .920505, -.270994, .622967, .733809, -.436964, -.133395, .64113, .616621,
.406737, .913545, -.251848, .643582, .722755, -.441884, -.096684, .657339, .602741,
.422618, .906308, -.232091, .663414, .711348, -.445222, -.059368, .672226, .588528,
.438371, .898794, -.211746, .682437, .699602, -.446953, -.02155, .685769, .574011,
.45399, .891007, -.190839, .700629, .687531, -.447059, .016662, .69795, .55922,
.469472, .882948, -.169395, .717968, .67515, -.445524, .05516, .708753, .544183,
.48481, .87462, -.147439, .734431, .662474, -.44234, .093837, .718167, .528929,
.5, .866025, -.125, .75, .649519, -.4375, .132583, .726184, .51349,
.515038, .857167, -.102104, .764655, .6363, -.431004, .171288, .732801, .497894,
.529919, .848048, -.078778, .778378, .622833, -.422856, .209843, .738017, .482171,
.544639, .838671, -.055052, .791154, .609135, -.413066, .24814, .741835, .466352,
.559193, .829038, -.030955, .802965, .595222, -.401645, .286069, .744262, .450467,
.573576, .819152, -.006515, .813798, .581112, -.388612, .323524, .745308, .434544,
.587785, .809017, .018237, .823639, .566821, -.373991, .360397, .744989, .418613,
.601815, .798636, .043272, .832477, .552367, -.357807, .396584, .74332, .402704,
.615661, .788011, .068559, .840301, .537768, -.340093, .431982, .740324, .386845,
.62932, .777146, .094066, .847101, .523041, -.320884, .46649, .736025, .371063,
.642788, .766044, .119764, .852869, .508205, -.300221, .500009, .730451, .355387,
.656059, .75471, .14562, .857597, .493276, -.278147, .532443, .723633, .339844,
.669131, .743145, .171604, .861281, .478275, -.254712, .5637, .715605, .324459,
.681998, .731354, .197683, .863916, .463218, -.229967, .593688, .706405, .309259,
.694658, .71934, .223825, .865498, .448125, -.203969, .622322, .696073, .294267,
.707107, .707107, .25, .866025, .433013, -.176777, .649519, .684653, .279508,
.71934, .694658, .276175, .865498, .417901, -.148454, .675199, .67219, .265005,
.731354, .681998, .302317, .863916, .402807, -.119068, .699288, .658734, .250778,
.743145, .669131, .328396, .861281, .387751, -.088686, .721714, .644334, .23685,
.75471, .656059, .35438, .857597, .372749, -.057383, .742412, .629044, .223238,
.766044, .642788, .380236, .852869, .357821, -.025233, .761319, .612921, .209963,
.777146, .62932, .405934, .847101, .342984, .007686, .778379, .596021, .19704,
.788011, .615661, .431441, .840301, .328257, .041294, .793541, .578405, .184487,
.798636, .601815, .456728, .832477, .313658, .075508, .806757, .560132, .172317,
.809017, .587785, .481763, .823639, .299204, .110246, .817987, .541266, .160545,
.819152, .573576, .506515, .813798, .284914, .14542, .827194, .521871, .149181,
.829038, .559193, .530955, .802965, .270803, .180944, .834347, .502011, .138237,
.838671, .544639, .555052, .791154, .256891, .21673, .839422, .481753, .127722,
.848048, .529919, .578778, .778378, .243192, .252688, .842399, .461164, .117644,
.857167, .515038, .602104, .764655, .229726, .288728, .843265, .440311, .108009,
.866025, .5, .625, .75, .216506, .32476, .842012, .419263, .098821,
.87462, .48481, .647439, .734431, .203551, .360692, .838638, .398086, .090085,
.882948, .469472, .669395, .717968, .190875, .396436, .833145, .376851, .081803,
.891007, .45399, .690839, .700629, .178494, .431899, .825544, .355623, .073974,
.898794, .438371, .711746, .682437, .166423, .466993, .81585, .334472, .066599,
.906308, .422618, .732091, .663414, .154678, .501627, .804083, .313464, .059674,
.913545, .406737, .751848, .643582, .143271, .535715, .79027, .292666, .053196,
.920505, .390731, .770994, .622967, .132217, .569169, .774442, .272143, .04716,
.927184, .374607, .789505, .601592, .121529, .601904, .756637, .25196, .041559,
.93358, .358368, .807359, .579484, .111222, .633837, .736898, .23218, .036385,
.939693, .34202, .824533, .55667, .101306, .664885, .715274, .212865, .03163,
.945519, .325568, .841008, .533178, .091794, .694969, .691816, .194075, .027281,
.951057, .309017, .856763, .509037, .082698, .724012, .666583, .175868, .023329,
.956305, .292372, .871778, .484275, .074029, .75194, .639639, .158301, .019758,
.961262, .275637, .886036, .458924, .065797, .77868, .61105, .141427, .016556,
.965926, .258819, .899519, .433013, .058013, .804164, .580889, .1253, .013707,
.970296, .241922, .912211, .406574, .050685, .828326, .549233, .109969, .011193,
.97437, .224951, .924096, .379641, .043823, .851105, .516162, .095481, .008999,
.978148, .207912, .935159, .352244, .037436, .872441, .481759, .08188, .007105,
.981627, .190809, .945388, .324419, .03153, .892279, .446114, .069209, .005492,
.984808, .173648, .954769, .296198, .026114, .910569, .409317, .057505, .00414,
.987688, .156434, .963292, .267617, .021193, .927262, .371463, .046806, .003026,
.990268, .139173, .970946, .238709, .016774, .942316, .332649, .037143, .002131,
.992546, .121869, .977722, .209511, .012862, .955693, .292976, .028547, .001431,
.994522, .104528, .983611, .180057, .009462, .967356, .252544, .021043, .000903,
.996195, .087156, .988606, .150384, .006578, .977277, .21146, .014654, .000523,
.997564, .069756, .992701, .120527, .004214, .985429, .169828, .0094, .000268,
.99863, .052336, .995891, .090524, .002372, .991791, .127757, .005297, .000113,
.999391, .034899, .998173, .060411, .001055, .996348, .085356, .002357, .000034,
.999848, .017452, .999543, .030224, .000264, .999086, .042733, .00059, .000004,
1, 0, 1, 0, 0, 1, 0, 0, 0
gi_AF_3D_Audio_MaxReWeightsLookupTable fillarray \\
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1, 1, 1, 1,
1.003236, 1.002156, .999152, .990038,
1.03237, 1.021194, .990433, .898572,
1.062694, 1.040231, .979161, .799806,
1.093999, 1.058954, .964976, .693603,
1.126003, 1.077006, .947526, .57989,
1.158345, 1.093982, .926474, .45869,
1.19059, 1.109437, .901512, .330158,
1.222228, 1.12289, .87237, .194621,
1.252684, 1.133837, .838839, .052614,
1.281987, 1.142358, .801199, 0,
1.312073, 1.150207, .760839, 0,
1.343011, 1.157424, .717799, 0,
1.374649, 1.163859, .671999, 0,
1.406809, 1.169354, .623371, 0,
1.439286, 1.173739, .571868, 0,
1.471846, 1.176837, .517465, 0,
1.504226, 1.178465, .460174, 0,
1.536133, 1.178438, .400043, 0,
1.567253, 1.176573, .337165, 0,
1.597247, 1.172695, .271688, 0,
1.625766, 1.166645, .203815, 0,
1.652455, 1.158285, .133806, 0,
1.676966, 1.147506, .061983, 0,
1.699006, 1.134261, 0, 0,
1.720224, 1.119789, 0, 0,
1.741631, 1.10481, 0, 0,
1.763183, 1.08933, 0, 0,
1.784837, 1.073356, 0, 0,
1.806548, 1.056898, 0, 0,
1.828269, 1.039968, 0, 0,
1.849952, 1.02258, 0, 0,
1.871552, 1.004752, 0, 0,
1.893018, .986504, 0, 0,
1.914305, .967857, 0, 0,
1.935366, .948837, 0, 0,
1.956154, .929471, 0, 0,
1.976625, .90979, 0, 0,
1.996736, .889823, 0, 0,
2.016448, .869607, 0, 0,
2.035721, .849175, 0, 0,
2.054522, .828565, 0, 0,
2.072818, .807816, 0, 0,
2.090581, .786964, 0, 0,
2.107785, .766051, 0, 0,
2.124411, .745115, 0, 0,
2.140439, .724196, 0, 0,
2.155856, .703332, 0, 0,
2.170653, .682561, 0, 0,
2.184823, .661921, 0, 0,
2.198364, .641445, 0, 0,
2.211275, .621169, 0, 0,
2.223562, .601125, 0, 0,
2.23523, .581341, 0, 0,
2.246289, .561847, 0, 0,
2.256751, .542667, 0, 0,
2.266631, .523826, 0, 0,
2.275943, .505344, 0, 0,
2.284707, .487239, 0, 0,
2.292939, .469528, 0, 0,
2.300661, .452225, 0, 0,
2.307892, .435342, 0, 0,
2.314654, .418888, 0, 0,
2.320969, .40287, 0, 0,
2.326858, .387294, 0, 0,
2.332343, .372164, 0, 0,
2.337445, .357481, 0, 0,
2.342186, .343246, 0, 0,
2.346585, .329458, 0, 0,
2.350664, .316113, 0, 0,
2.354442, .303208, 0, 0,
2.357937, .290738, 0, 0,
2.361168, .278698, 0, 0,
2.364152, .26708, 0, 0,
2.366906, .255878, 0, 0,
2.369446, .245082, 0, 0,
2.371786, .234685, 0, 0,
2.37394, .224677, 0, 0,
2.375923, .215048, 0, 0,
2.377745, .20579, 0, 0,
2.379421, .196891, 0, 0,
2.380959, .188342, 0, 0,
2.382372, .180132, 0, 0,
2.383667, .172251, 0, 0,
2.384856, .164689, 0, 0,
2.385945, .157435, 0, 0,
2.386943, .150479, 0, 0,
2.387857, .143811, 0, 0,
2.388694, .137421, 0, 0,
2.38946, .131299, 0, 0,
2.39016, .125435, 0, 0,
2.390801, .11982, 0, 0,
2.391386, .114445, 0, 0,
2.391921, .1093, 0, 0,
2.39241, .104376, 0, 0,
2.392857, .099666, 0, 0,
2.393265, .09516, 0, 0,
2.393637, .090851, 0, 0,
2.393977, .086731, 0, 0,
2.394288, .082791, 0, 0,
2.394571, .079025, 0, 0,
2.394829, .075426, 0, 0,
2.395064, .071986, 0, 0,
2.395279, .068699, 0, 0,
2.395475, .065558, 0, 0,
2.395653, .062558, 0, 0,
2.395816, .059693, 0, 0,
2.395964, .056955, 0, 0,
2.396099, .054341, 0, 0,
2.396222, .051845, 0, 0,
2.396334, .049462, 0, 0,
2.396436, .047186, 0, 0,
2.396529, .045013, 0, 0,
2.396613, .042939, 0, 0,
2.396691, .040959, 0, 0,
2.396761, .039069, 0, 0,
2.396825, .037266, 0, 0,
2.396883, .035544, 0, 0,
2.396936, .033901, 0, 0,
2.396984, .032334, 0, 0,
2.397028, .030838, 0, 0,
2.397068, .02941, 0, 0,
2.397104, .028048, 0, 0,
2.397137, .026749, 0, 0,
2.397167, .025509, 0, 0,
2.397194, .024326, 0, 0,
2.397219, .023198, 0, 0,
2.397242, .022122, 0, 0,
2.397262, .021095, 0, 0,
2.397281, .020116, 0, 0,
2.397298, .019181, 0, 0,
2.397314, .01829, 0, 0,
2.397328, .017441, 0, 0,
2.397341, .01663, 0, 0,
2.397352, .015857, 0, 0,
2.397363, .015119, 0, 0,
2.397372, .014416, 0, 0,
2.397381, .013745, 0, 0,
2.397389, .013106, 0, 0,
2.397396, .012496, 0, 0,
2.397403, .011914, 0, 0,
2.397409, .01136, 0, 0,
2.397414, .010831, 0, 0,
2.397419, .010326, 0, 0,
2.397424, .009845, 0, 0,
2.397428, .009387, 0, 0,
2.397432, .008949, 0, 0,
2.397435, .008532, 0, 0,
2.397438, .008135, 0, 0,
2.397441, .007755, 0, 0,
2.397443, .007394, 0, 0,
2.397446, .007049, 0, 0,
2.397448, .006721, 0, 0,
2.39745, .006407, 0, 0,
2.397451, .006108, 0, 0,
2.397453, .005824, 0, 0,
2.397454, .005552, 0, 0,
2.397456, .005293, 0, 0,
2.397457, .005046, 0, 0,
2.397458, .004811, 0, 0,
2.397459, .004586, 0, 0,
2.39746, .004372, 0, 0,
2.397461, .004168, 0, 0,
2.397461, .003974, 0, 0,
2.397462, .003788, 0, 0,
2.397463, .003611, 0, 0,
2.397463, .003443, 0, 0,
2.397464, .003282, 0, 0,
2.397464, .003129, 0, 0,
2.397465, .002983, 0, 0,
2.397465, .002844, 0, 0,
2.397465, .002711, 0, 0,
2.397466, .002584, 0, 0,
2.397466, .002464, 0, 0,
2.397466, .002349, 0, 0,
2.397466, .002239, 0, 0,
2.397467, .002135, 0, 0,
2.397467, .002035, 0, 0,
2.397467, .00194, 0, 0,
2.397467, .001849, 0, 0,
2.397467, .001763, 0, 0,
2.397467, .001681, 0, 0,
2.397468, .001602, 0, 0,
2.397468, .001527, 0, 0,
2.397468, .001456, 0, 0,
2.397468, .001388, 0, 0,
2.397468, .001323, 0, 0,
2.397468, .001261, 0, 0,
2.397468, .001202, 0, 0,
2.397468, .001146, 0, 0,
2.397468, .001093, 0, 0,
2.397468, .001042, 0, 0,
2.397468, .000993, 0, 0,
2.397468, .000947, 0, 0,
2.397468, .000902, 0, 0,
2.397468, .00086, 0, 0,
2.397468, .00082, 0, 0,
2.397469, .000782, 0, 0,
2.397469, .000745, 0, 0,
2.397469, .00071, 0, 0,
2.397469, .000677, 0, 0,
2.397469, .000646, 0, 0,
2.397469, .000616, 0, 0,
2.397469, .000587, 0, 0,
2.397469, .000559, 0, 0,
2.397469, .000533, 0, 0,
2.397469, .000508, 0, 0,
2.397469, .000485, 0, 0,
2.397469, .000462, 0, 0,
2.397469, .00044, 0, 0,
2.397469, .00042, 0, 0,
2.397469, .0004, 0, 0,
2.397469, .000381, 0, 0,
2.397469, .000364, 0, 0,
2.397469, .000347, 0, 0,
2.397469, .00033, 0, 0,
2.397469, .000315, 0, 0,
2.397469, .0003, 0, 0,
2.397469, .000286, 0, 0,
2.397469, .000273, 0, 0,
2.397469, .00026, 0, 0,
2.397469, .000248, 0, 0,
2.397469, .000236, 0, 0,
2.397469, .000225, 0, 0,
2.397469, .000215, 0, 0,
2.397469, .000205, 0, 0,
2.397469, .000195, 0, 0,
2.397469, .000186, 0, 0,
2.397469, .000177, 0, 0,
2.397469, .000169, 0, 0,
2.397469, .000161, 0, 0,
2.397469, .000154, 0, 0,
2.397469, .000147, 0, 0,
2.397469, .00014, 0, 0,
2.397469, .000133, 0, 0,
2.397469, .000127, 0, 0,
2.397469, .000121, 0, 0,
2.397469, .000115, 0, 0,
2.397469, .00011, 0, 0,
2.397469, .000105, 0, 0,
2.397469, .0001, 0, 0,
2.397469, .000095, 0, 0,
2.397469, .000091, 0, 0,
2.397469, .000087, 0, 0,
2.397469, .000083, 0, 0,
2.397469, .000079, 0, 0,
2.397469, .000075, 0, 0,
2.397469, .000071, 0, 0,
2.397469, .000068, 0, 0,
2.397469, .000065, 0, 0,
2.397469, .000062, 0, 0,
2.397469, .000059, 0, 0,
2.397469, .000056, 0, 0,
2.397469, .000054, 0, 0,
2.397469, .000051, 0, 0,
2.397469, .000049, 0, 0,
2.397469, .000046, 0, 0,
2.397469, .000044, 0, 0,
2.397469, .000042, 0, 0,
2.397469, .00004, 0, 0,
2.397469, .000038, 0, 0,
2.397469, .000037, 0, 0,
2.397469, .000035, 0, 0,
2.397469, .000033, 0, 0,
2.397469, .000032, 0, 0,
2.397469, .00003, 0, 0,
2.397469, .000029, 0, 0,
2.397469, .000027, 0, 0,
2.397469, .000026, 0, 0,
2.397469, .000025, 0, 0,
2.397469, .000024, 0, 0,
2.397469, .000023, 0, 0,
2.397469, .000022, 0, 0,
2.397469, .000021, 0, 0,
2.397469, .00002, 0, 0,
2.397469, .000019, 0, 0,
2.397469, .000018, 0, 0,
2.397469, .000017, 0, 0,
2.397469, .000016, 0, 0,
2.397469, .000015, 0, 0,
2.397469, .000015, 0, 0,
2.397469, .000014, 0, 0,
2.397469, .000013, 0, 0,
2.397469, .000013, 0, 0,
2.397469, .000012, 0, 0,
2.397469, .000012, 0, 0,
2.397469, .000011, 0, 0,
2.397469, .000011, 0, 0,
2.397469, .00001, 0, 0,
2.397469, .00001, 0, 0,
2.397469, .000009, 0, 0,
2.397469, .000009, 0, 0,
2.397469, .000008, 0, 0,
2.397469, .000008, 0, 0,
2.397469, .000008, 0, 0,
2.397469, .000007, 0, 0,
2.397469, .000007, 0, 0,
2.397469, .000007, 0, 0,
2.397469, .000006, 0, 0,
2.397469, .000006, 0, 0,
2.397469, .000006, 0, 0,
2.397469, .000005, 0, 0,
2.397469, .000005, 0, 0,
2.397469, .000005, 0, 0,
2.397469, .000005, 0, 0,
2.397469, .000004, 0, 0,
2.397469, .000004, 0, 0,
2.397469, .000004, 0, 0,
2.397469, .000004, 0, 0,
2.397469, .000004, 0, 0,
2.397469, .000004, 0, 0,
2.397469, .000003, 0, 0,
2.397469, .000003, 0, 0,
2.397469, .000003, 0, 0,
2.397469, .000003, 0, 0,
2.397469, .000003, 0, 0,
2.397469, .000003, 0, 0,
2.397469, .000003, 0, 0,
2.397469, .000002, 0, 0,
2.397469, .000002, 0, 0,
2.397469, .000002, 0, 0,
2.397469, .000002, 0, 0,
2.397469, .000002, 0, 0,
2.397469, .000002, 0, 0,
2.397469, .000002, 0, 0,
2.397469, .000002, 0, 0,
2.397469, .000002, 0, 0,
2.397469, .000002, 0, 0,
2.397469, .000001, 0, 0,
2.397469, .000001, 0, 0,
2.397469, .000001, 0, 0,
2.397469, 0, 0, 0
gi_AF_3D_HrirChannel1TableNumber = ftgen(0, 0, 256, -2, \\
-.00027735404243516849874529039965, \\
-.00138677021217584249372645199827, \\
-.00069338510608792124686322599914, \\
-.00027735404243516849874529039965, \\
-.00027735404243516849874529039965, \\
-.00013867702121758424937264519983, \\
-.00069338510608792124686322599914, \\
.00110941616974067399498116159862, \\
-.00110941616974067399498116159862, \\
.00332824850922202198494348479585, \\
-.00249618638191651670554804809399, \\
-.00069338510608792124686322599914, \\
-.00721120510331438140105841938521, \\
-.07141866592705588268064076373776, \\
-.13798363611149633278785131551558, \\
.068922479545139372913986619551, \\
.48647899043128556284543151377875, \\
.04312855359866870491591939185128, \\
-.38039106919983362020687422955234, \\
-.10373041187075301983178121645324, \\
-.3638885036749410772927149082534, \\
-.09208154208847593724662772274314, \\
-.40049923727638331305556107508892, \\
-.88933573706836777095219304101192, \\
-.07599500762723616908989043849942, \\
.0857023991124670619923264780482, \\
1, \\
.86728609069477191617636435694294, \\
-.1056718901677991956367108628001, \\
.43128553598668700752583049506939, \\
.12869227568991817300947388957866, \\
.18652059353765082505560712888837, \\
.18249895992234085873029414415214, \\
.13132713909305229749158172580792, \\
.34960477048952987022545357831405, \\
.00624046595479129089650838224657, \\
.05214255997781167689675285714657, \\
-.25890999861322977482203100407787, \\
-.23408681181528220860421640736604, \\
-.18430176119816946145313352189987, \\
-.15365413950908335394274217833299, \\
.16308417695187907292542206505459, \\
.2135626126750797548758953325887, \\
.21203716544168632607281210766814, \\
-.01442241020662876280211683877042, \\
.1503258909998613224168195756647, \\
.05339065316876993871897383314717, \\
.00679517403966162832767983204008, \\
.11080293995284981600768503540166, \\
-.03619470253778948876099974540921, \\
.06240465954791291069980729844247, \\
-.03147968381639162233076589814118, \\
.00443766467896269597992464639447, \\
-.07225072805436139056212141440483, \\
-.06240465954791291069980729844247, \\
.02690334211621134286041012728674, \\
-.03966162806822909336901261667663, \\
.02731937317986409680115045262028, \\
-.05089446678685342201342578505319, \\
-.05366800721120510569983608206712, \\
-.08015531826376369461950588402033, \\
-.04382193870475662583752196610476, \\
-.04978505061711274715108288546617, \\
-.04520870891693246768072711461173, \\
.01359034807932325665535966408015, \\
-.07349882124531964544544848649821, \\
-.05366800721120510569983608206712, \\
-.07349882124531964544544848649821, \\
-.05685757869920954332698670441459, \\
-.03522396338926640085853492223578, \\
-.01261960893080016701817136492991, \\
-.04382193870475662583752196610476, \\
-.07419220635140758024483886856615, \\
-.05366800721120510569983608206712, \\
-.09665788378865622365587739750481, \\
-.02953820551934544652583625179432, \\
-.0399389821106642672887687695038, \\
-.04409929274719179281838421502471, \\
-.0404936901955346012504932673437, \\
-.06295936763278324466153179628236, \\
-.06157259742060740975722055168262, \\
-.06129524337817223583746439885545, \\
-.03855221189848841850666971708961, \\
-.05768964082651505120846735508167, \\
-.01567050339758702115489086281741, \\
-.05602551657190403544550605374752, \\
-.06545555401469976830597374828358, \\
-.04021633615309943426963101842375, \\
-.06753570933296353107078147104403, \\
-.04063236721675218821037134375729, \\
-.0422964914713631970344387411842, \\
-.0465954791291083095239322631187, \\
-.05755096380529746424858927866808, \\
-.04354458466232145191776581327758, \\
-.06698100124809319710905697320413, \\
-.05283594508389959781835543140005, \\
-.03591734849535432178013749648926, \\
-.06503952295104700742633951904281, \\
-.0284287893496047716634933522073, \\
-.04867563444737207228873998587915, \\
-.05311329912633476479921768032, \\
-.03952295104701151334802844417027, \\
-.04798224934128415136713741162566, \\
-.05061711274441824809366963222601, \\
-.0399389821106642672887687695038, \\
-.0446540008320621267801087128646, \\
-.05879905699625571913191635076146, \\
-.03411454721952572599619202264876, \\
-.05547080848703370148378155590763, \\
-.04257384551379836401530099010415, \\
-.03106365275273887185947252476126, \\
-.0507557897656358350535477086396, \\
-.03411454721952572599619202264876, \\
-.03466925530439605995791652048865, \\
-.04298987657745111795604131543769, \\
-.03563999445291915479927524756931, \\
-.03092497573152128836904140030128, \\
-.04881431146858965230972415838551, \\
-.03161836083760920929064397455477, \\
-.03286645402856746417397104664815, \\
-.0422964914713631970344387411842, \\
-.02191096935237831291876098305238, \\
-.0343919012619608929770542715687, \\
-.0302315906254333674474388260478, \\
-.02191096935237831291876098305238, \\
-.03037026764665095093786995050777, \\
-.03050894466786853442830107496775, \\
-.02246567743724864688048548089228, \\
-.03314380807100263809372719947532, \\
-.03064762168908611791873219942772, \\
-.02066287616142005456598695900539, \\
-.03550131743170156783939717115572, \\
-.02218832339481347989962323197233, \\
-.02315906254333657127153500709937, \\
-.03092497573152128836904140030128, \\
-.01913742892802662576290373408483, \\
-.02274303147968381733079468176584, \\
-.02704201913742892982028820370033, \\
-.01913742892802662576290373408483, \\
-.0223270004160310633900543564323, \\
-.02676466509499375936997900282677, \\
-.01483844127028151500813368812715, \\
-.02510054084038275054591160539985, \\
-.02385244764942449219313758135286, \\
-.01636388850367494207649343707089, \\
-.02468450977672999660517128006632, \\
-.01733462765219802997895826024433, \\
-.01886007488559145878204148516488, \\
-.02329773956455415476196613155935, \\
-.0192761059492442092533348585448, \\
-.01830536680072112135087003537137, \\
-.02343641658577173825239725601932, \\
-.02121758424629038852771145684528, \\
-.02204964637359589640919210751235, \\
-.02482318679794758009560240452629, \\
-.0151157953127166837237194130239, \\
-.01664124254611010905735568599084, \\
-.01788933573706836741012971003784, \\
-.01289696297323533573375708982667, \\
-.01428373318541117757696223833364, \\
-.01636388850367494207649343707089, \\
-.01123283871862432344024274044614, \\
-.01178754680349466087141419023965, \\
-.01400637914297600886137651343688, \\
-.00721120510331438140105841938521, \\
-.01303563999445291922418821428664, \\
-.0120649008459298295869999151364, \\
-.00832062127305505452867784299542, \\
-.01442241020662876280211683877042, \\
-.01053945361253640251864016619265, \\
-.00873665233670780846941816832896, \\
-.01137151573984190866539734088292, \\
-.00776591318818471796486813119031, \\
-.00734988212453196489148954384518, \\
-.01067813063375398774379476662943, \\
-.00596311191235612304828439533821, \\
-.00762723616696713360707526874194, \\
-.00943003744279572939102074258244, \\
-.00402163361530994290654605904933, \\
-.00818194425183747103824671853545, \\
-.00762723616696713360707526874194, \\
-.00429898765774511162213178394609, \\
-.00873665233670780846941816832896, \\
-.00693385106087921268547269448845, \\
-.00429898765774511162213178394609, \\
-.0084592982942726397538324434322, \\
-.00610178893357370653871551979819, \\
-.00443766467896269597992464639447, \\
-.00873665233670780846941816832896, \\
-.00513104978505061690152722064795, \\
-.00499237276383303341109609618798, \\
-.0084592982942726397538324434322, \\
-.00429898765774511162213178394609, \\
-.00526972680626820125932008309633, \\
-.00776591318818471796486813119031, \\
-.00388295659409235898243406559516, \\
-.00596311191235612304828439533821, \\
-.00734988212453196489148954384518, \\
-.0036056025516571907005292096926, \\
-.00637914297600887525430124469494, \\
-.00651781999722645961209410714332, \\
-.00374427957287477462464120314678, \\
-.00693385106087921268547269448845, \\
-.00610178893357370653871551979819, \\
-.00388295659409235898243406559516, \\
-.00693385106087921268547269448845, \\
-.00526972680626820125932008309633, \\
-.00416031063652752726433892149771, \\
-.00707252808209679704326555693683, \\
-.00457634170018028033771750884284, \\
-.00457634170018028033771750884284, \\
-.0066564970184440439698869695917, \\
-.00416031063652752726433892149771, \\
-.0048536957426154490533032337396, \\
-.00624046595479129089650838224657, \\
-.00388295659409235898243406559516, \\
-.00513104978505061690152722064795, \\
-.00596311191235612304828439533821, \\
-.00346692553043960634273634724423, \\
-.0054084038274857856171129455447, \\
-.00526972680626820125932008309633, \\
-.0036056025516571907005292096926, \\
-.00554708084870336997490580799308, \\
-.00471501872139786469551037129122, \\
-.0036056025516571907005292096926, \\
-.00554708084870336997490580799308, \\
-.00429898765774511162213178394609, \\
-.00374427957287477462464120314678, \\
-.0054084038274857856171129455447, \\
-.00388295659409235898243406559516, \\
-.00402163361530994290654605904933, \\
-.00513104978505061690152722064795, \\
-.00346692553043960634273634724423, \\
-.00429898765774511162213178394609, \\
-.0048536957426154490533032337396, \\
-.00346692553043960634273634724423, \\
-.00443766467896269597992464639447, \\
-.00457634170018028033771750884284, \\
-.00332824850922202198494348479585, \\
-.00443766467896269597992464639447, \\
-.00429898765774511162213178394609, \\
-.00332824850922202198494348479585, \\
-.00471501872139786469551037129122, \\
-.00429898765774511162213178394609, \\
-.00416031063652752726433892149771, \\
-.00513104978505061690152722064795, \\
-.0048536957426154490533032337396, \\
-.00499237276383303341109609618798, \\
-.0054084038274857856171129455447, \\
-.00513104978505061690152722064795, \\
-.00513104978505061690152722064795, \\
-.00513104978505061690152722064795, \\
-.0048536957426154490533032337396, \\
-.00471501872139786469551037129122, \\
-.00429898765774511162213178394609, \\
-.00402163361530994290654605904933)
gi_AF_3D_HrirChannel2TableNumber = ftgen(0, 0, 256, -2, \\
.00026950545748551405986215279142, \\
.0021560436598841124788972223314, \\
.00148228001617032732924184035284, \\
.00094326910119929920951753476999, \\
.00161703274491308435917291674855, \\
.00013475272874275702993107639571, \\
.00013475272874275702993107639571, \\
.00053901091497102811972430558285, \\
-.00080851637245654217958645837427, \\
.0021560436598841124788972223314, \\
-.00336881821856892596511734438991, \\
-.00161703274491308435917291674855, \\
-.00862417463953644991558888932559, \\
-.07007141894623365729888320174723, \\
-.13556124511521358555476979290688, \\
.06697210618515024582730887914295, \\
.47069128149845029795983464282472, \\
.03948254952162780911928408045242, \\
-.37110901495755288514999392646132, \\
-.10308583748820912551202866325184, \\
-.35507344023716475023277894251805, \\
-.08907155369896239960336714602818, \\
-.38620132057674166903282753082749, \\
-.8546018056865650747155882527295, \\
-.05834793154561379591171998981736, \\
.1022773211157525924397404537558, \\
.99999999999999988897769753748435, \\
.88411265328122889961548480641795, \\
-.03840452769168575114511199330991, \\
.47608139064816057395290727072279, \\
.14593720522840586406587704004778, \\
.20698019134887479797413334381417, \\
.16116426357633739652186477542273, \\
.05484436059830211096510765855783, \\
.40344966985581454110842969384976, \\
.16251179086376496552013293239725, \\
.23797331895970891268987656985701, \\
.10349009567443739898706667190709, \\
.04217760409648294711582039440145, \\
.02681579301980864873944376824966, \\
.13960382697749629254957426383044, \\
.08651125185285001017998496308792, \\
-.17733459102546825225665827474586, \\
-.05470960786955935545305962364182, \\
-.26195930467591965751239513338078, \\
-.27772537393882223977215062404866, \\
-.20239859857162106893113673322659, \\
-.0817949063468535186860464136771, \\
-.09122759735884651555171132031319, \\
-.14418541975475002159257087441802, \\
-.11885190675111169389399634610527, \\
-.2738175448052823091060758997628, \\
-.11063199029780351745344546543492, \\
-.14472443066972104364076301408204, \\
-.05646139334321519792636578927159, \\
-.01792211292278668433031185713844, \\
-.10605039752054978841044885484735, \\
-.09688721196604230256888001804327, \\
-.18973184206980189814295556516299, \\
-.06737636437137851930234688779819, \\
-.09661770650855679154478394821126, \\
-.04365988411265327856503049019921, \\
-.07721331356959977576526199527507, \\
-.09742622288101333849485996552175, \\
-.06198625522166823637038035599289, \\
-.14445492521223554649445475206448, \\
-.06036922247675514940912222527913, \\
-.08893680097021963715242520720494, \\
-.03651798948928715315975779276414, \\
-.0578089206306427669246339462461, \\
-.0710146880474329528221133500665, \\
-.071823204419889499772189367377, \\
-.08678075731033552120408103291993, \\
-.02519876027489556524763258948951, \\
-.06535507344023716580494465233642, \\
-.01145398194313434689362019014425, \\
-.05888694246058482489880603338861, \\
-.05214930602344697296857134460879, \\
-.04851098234739253250991097843325, \\
-.07451825899474463776872568132603, \\
-.03611373130305888662361368801612, \\
-.05012801509230561253227520523978, \\
-.01724834927907289983117777865118, \\
-.03570947311683061314857567936087, \\
-.00727664735210887918259725637427, \\
-.03800026950545748460896788856189, \\
-.03301441854197547515203936541184, \\
-.00539010914971028119724305582849, \\
-.03045411669586308919810413442519, \\
.00309931276108341147157432260428, \\
-.02209944751381215377605826688523, \\
-.00795041099582266541645481083833, \\
-.01104972375690607688802913344261, \\
-.00673763643713785193023468877982, \\
-.00188653820239859841903506953997, \\
.00700714189462336555641597257704, \\
.01037596011319229065417157897855, \\
-.01078021829942056239448611165699, \\
.01778736019404392881826382222243, \\
-.00795041099582266541645481083833, \\
.00754615280959439367614027815989, \\
.01590082199164533083290962167666, \\
.00498585096348201032429026113846, \\
.01428378924673224560637496693971, \\
.00848942191079369266881737843278, \\
.00660288370839509468346317788701, \\
.00026950545748551405986215279142, \\
.01468804743296051561196602364134, \\
-.00067376364371378514965538197856, \\
.01320576741679018936692635577401, \\
.00781565826707990816968329994552, \\
-.0043120873197682249577944446628, \\
.01401428378924673111283194515408, \\
.00134752728742757029931076395712, \\
.01024120738444953340740006808574, \\
.01468804743296051561196602364134, \\
.01051071284193504790094308987136, \\
.00404258186228271046425142287717, \\
.01212774558684813312747774460831, \\
.00485109823473925307751875024564, \\
.00229079638862686972566873322421, \\
.01293626195930467487338333398839, \\
-.00471634550599649583074723935283, \\
.00579436733593855207019585051853, \\
.0043120873197682249577944446628, \\
-.00175178547365584138910399314426, \\
.00579436733593855207019585051853, \\
.00363832367605443959129862818713, \\
-.00026950545748551405986215279142, \\
.00539010914971028119724305582849, \\
.00565961460719579569078607761412, \\
-.00148228001617032732924184035284, \\
.01158873467187710414039170103706, \\
.00121277455868481326937968756141, \\
.00026950545748551405986215279142, \\
.00835466918205093542204586753996, \\
-.0021560436598841124788972223314, \\
.00296456003234065465848368070567, \\
.00552486187845303844401456672131, \\
-.00040425818622827108979322918714, \\
.00256030184611238335185001702143, \\
.00714189462336612280318748346986, \\
-.00336881821856892596511734438991, \\
.0032340654898261687183458334971, \\
.00404258186228271046425142287717, \\
-.00161703274491308435917291674855, \\
.0087589273682792071623604002184, \\
-.00067376364371378514965538197856, \\
-.00134752728742757029931076395712, \\
.00377307640479719683807013907995, \\
-.00175178547365584138910399314426, \\
-.00121277455868481326937968756141, \\
.00013475272874275702993107639571, \\
-.00498585096348201032429026113846, \\
-.00202129093114135523212571143858, \\
.00471634550599649583074723935283, \\
.00040425818622827108979322918714, \\
.00444684004851098220456595555561, \\
.00485109823473925307751875024564, \\
.00282980730359789784539303880706, \\
.00525535642096752395047154493568, \\
.00404258186228271046425142287717, \\
.00471634550599649583074723935283, \\
.00619862552216682294314864520857, \\
.00754615280959439367614027815989, \\
.00485109823473925307751875024564, \\
.00795041099582266541645481083833, \\
.00687238916588060830964446168423, \\
.00498585096348201032429026113846, \\
.00929793828325023441472296781285, \\
.00565961460719579569078607761412, \\
.00525535642096752395047154493568, \\
.0076809055383371509229117890527, \\
.00471634550599649583074723935283, \\
.00350357094731168277820798628852, \\
.00565961460719579569078607761412, \\
.00296456003234065465848368070567, \\
.00269505457485514059862152791425, \\
.00525535642096752395047154493568, \\
.00148228001617032732924184035284, \\
.00269505457485514059862152791425, \\
.00336881821856892596511734438991, \\
.00080851637245654217958645837427, \\
.00269505457485514059862152791425, \\
.00296456003234065465848368070567, \\
.00094326910119929920951753476999, \\
.00269505457485514059862152791425, \\
.0021560436598841124788972223314, \\
.00013475272874275702993107639571, \\
.00269505457485514059862152791425, \\
.00121277455868481326937968756141, \\
.00026950545748551405986215279142, \\
.00242554911736962653875937512282, \\
.00053901091497102811972430558285, \\
.00026950545748551405986215279142, \\
.00175178547365584138910399314426, \\
-.00026950545748551405986215279142, \\
.00040425818622827108979322918714, \\
.00161703274491308435917291674855, \\
-.00026950545748551405986215279142, \\
.00080851637245654217958645837427, \\
.00121277455868481326937968756141, \\
-.00053901091497102811972430558285, \\
.00094326910119929920951753476999, \\
.00094326910119929920951753476999, \\
-.00053901091497102811972430558285, \\
.00121277455868481326937968756141, \\
.00053901091497102811972430558285, \\
-.00053901091497102811972430558285, \\
.0010780218299420562394486111657, \\
-.00013475272874275702993107639571, \\
-.00040425818622827108979322918714, \\
.00094326910119929920951753476999, \\
-.00026950545748551405986215279142, \\
-.00013475272874275702993107639571, \\
.00080851637245654217958645837427, \\
-.00053901091497102811972430558285, \\
0, \\
.00067376364371378514965538197856, \\
-.00067376364371378514965538197856, \\
.00026950545748551405986215279142, \\
.00040425818622827108979322918714, \\
-.00067376364371378514965538197856, \\
.00053901091497102811972430558285, \\
.00026950545748551405986215279142, \\
-.00040425818622827108979322918714, \\
.00067376364371378514965538197856, \\
.00013475272874275702993107639571, \\
-.00026950545748551405986215279142, \\
.00080851637245654217958645837427, \\
0, \\
0, \\
.00080851637245654217958645837427, \\
-.00013475272874275702993107639571, \\
.00026950545748551405986215279142, \\
.00067376364371378514965538197856, \\
-.00013475272874275702993107639571, \\
.00040425818622827108979322918714, \\
.00067376364371378514965538197856, \\
-.00013475272874275702993107639571, \\
.00053901091497102811972430558285, \\
.00053901091497102811972430558285, \\
-.00013475272874275702993107639571, \\
.00067376364371378514965538197856, \\
.00040425818622827108979322918714, \\
.00013475272874275702993107639571, \\
.00053901091497102811972430558285, \\
.00026950545748551405986215279142, \\
.00026950545748551405986215279142, \\
.00040425818622827108979322918714, \\
.00026950545748551405986215279142, \\
.00026950545748551405986215279142, \\
.00026950545748551405986215279142, \\
.00026950545748551405986215279142, \\
.00013475272874275702993107639571, \\
.00013475272874275702993107639571)
gi_AF_3D_HrirChannel3TableNumber = ftgen(0, 0, 256, -2, \\
0, \\
-.00055055973573132682610115073985, \\
-.00018351991191044227536705024662, \\
-.00018351991191044227536705024662, \\
-.00018351991191044227536705024662, \\
-.00055055973573132682610115073985, \\
.00036703982382088455073410049323, \\
-.00128463938337309603598956897486, \\
.00036703982382088455073410049323, \\
.00091759955955221137683525123308, \\
-.00238575885483574947135143595744, \\
.00477151770967149894270287191489, \\
-.00789135621214901751552250885879, \\
.00532207744540282631090510889749, \\
.00477151770967149894270287191489, \\
-.0796476417691319438230124205802, \\
-.14975224811892090537313038112188, \\
.3712607817948247457273680538492, \\
.47348137272894108562582005106378, \\
-.83758487795925851138179041299736, \\
-.17709671499357679258501718777552, \\
.63736465406496600749619574344251, \\
-.59295283538263898748255087411962, \\
.25986419526518628186906312294013, \\
.40300972655533123800708494854916, \\
-.37474766012112314950144309477764, \\
-.21214901816847125948228836023191, \\
-.13929161314002569405090525833657, \\
1, \\
.04881629656817764589815666909089, \\
-.97173793356579185598320691497065, \\
-.03743806202973022634328259528047, \\
.22205909341163515557937557787227, \\
.27638098733712607169010766483552, \\
.16590200036703980912555778104434, \\
.28500642319691688042482269338507, \\
-.29858689667828958169693009949697, \\
-.44375114699944939733455839814269, \\
.02018719031014865050721596162475, \\
-.1851715911176362583390186955512, \\
.2440814828408882364296772493617, \\
.09928427234354926522730266924555, \\
-.130299137456414027003148703443, \\
.00128463938337309603598956897486, \\
-.05579005322077445344630675094777, \\
.15048632776656267751036466506775, \\
.07175628555698293498110729160544, \\
.08258396035969901849416174854923, \\
.02881262616993943842524927845261, \\
-.04643053771334189339103915017404, \\
-.00330335841438796073976646994197, \\
-.04055790053220774404874049423597, \\
.05340429436593870093918923203091, \\
.04643053771334189339103915017404, \\
.03193246467241695613070717740811, \\
.02752798678656634065453623350095, \\
.00220223894292530730440460295938, \\
-.05670765278032666167895570197288, \\
-.02440814828408882294907833454545, \\
.0739585244999082375150223356286, \\
.03945678106074508584288906831716, \\
.01743439163149201540092825268857, \\
.01449807304092493899505544874273, \\
.00238575885483574947135143595744, \\
-.06221325013763993189153111984524, \\
-.03578638282253624597339936030949, \\
.00165167920719398036988323497098, \\
.00550559735731326847785194189555, \\
.04386125894659570478850696417794, \\
-.03321710405579005043197327040616, \\
-.03505230317489447383616507636361, \\
-.00587263718113415281174560789168, \\
-.02293998898880528561350367056093, \\
.0141310332171040546611617827466, \\
.03707102220590934027466545330753, \\
-.00055055973573132682610115073985, \\
.0031198385024775185728196369439, \\
.03248302440814828523363289036752, \\
-.02018719031014865050721596162475, \\
-.01284639383373095862517221377175, \\
.00146815929528353820293640197292, \\
-.00752431638832813318162884286266, \\
.01376399339328317032726811675047, \\
-.00348687832629840334039417193424, \\
-.01156175445035786258918264479689, \\
0, \\
-.01376399339328317032726811675047, \\
-.0293631859056707640587280394584, \\
.01431455312901449769547035373307, \\
.00403743806202973027491553992263, \\
-.01578271242429803503104501771759, \\
.01541567260047715069715135172146, \\
-.01559919251238759373145992270793, \\
-.01119471462653697825528897880076, \\
.00825839603596990184941617485492, \\
-.00954303541934299788540574382978, \\
-.00330335841438796073976646994197, \\
.00330335841438796073976646994197, \\
-.01633327216002936413397073067699, \\
-.01137823453844742128959754978723, \\
.00752431638832813318162884286266, \\
-.0141310332171040546611617827466, \\
.00568911726922371064479877489362, \\
.00991007524316388221929940982591, \\
-.01798495136722334450385396564798, \\
.00458799779776105677575603891682, \\
-.00146815929528353820293640197292, \\
-.00954303541934299788540574382978, \\
.01192879427417874865779978676983, \\
.00256927876674619207197913794971, \\
-.00513855753349238414395827589942, \\
.01192879427417874865779978676983, \\
.00201871903101486513745776996132, \\
-.00073407964764176910146820098646, \\
.01945311066250688183942862963249, \\
.00110111947146265365220230147969, \\
-.00073407964764176910146820098646, \\
.01082767480271609392139531280463, \\
-.00605615709304459497869244088974, \\
.00091759955955221137683525123308, \\
.00660671682877592147953293988394, \\
-.00972655533125344091971431481625, \\
.0036703982382088455073410049323, \\
.00972655533125344091971431481625, \\
-.00880895577170122921761841183752, \\
.00550559735731326847785194189555, \\
.00403743806202973027491553992263, \\
-.01211231418608918995738488177949, \\
.00440447788585061460880920591876, \\
.00165167920719398036988323497098, \\
-.00568911726922371064479877489362, \\
.00623967700495503714563927388781, \\
-.00256927876674619207197913794971, \\
-.00623967700495503714563927388781, \\
.00660671682877592147953293988394, \\
-.00458799779776105677575603891682, \\
-.0036703982382088455073410049323, \\
.00825839603596990184941617485492, \\
-.00807487612405946054983107984526, \\
-.00183519911910442275367050246615, \\
.00679023674068636451384151087041, \\
-.00899247568361167225192698282399, \\
.00073407964764176910146820098646, \\
.00385391815011928767428783793036, \\
-.01009359515507432525360798081238, \\
.00201871903101486513745776996132, \\
.00385391815011928767428783793036, \\
-.00477151770967149894270287191489, \\
.00165167920719398036988323497098, \\
-.00348687832629840334039417193424, \\
-.00183519911910442275367050246615, \\
.00183519911910442275367050246615, \\
-.00532207744540282631090510889749, \\
.00183519911910442275367050246615, \\
-.00018351991191044227536705024662, \\
-.0073407964764176910146820098646, \\
.00201871903101486513745776996132, \\
.00256927876674619207197913794971, \\
-.00330335841438796073976646994197, \\
-.00146815929528353820293640197292, \\
-.00293631859056707640587280394584, \\
-.00146815929528353820293640197292, \\
.00073407964764176910146820098646, \\
-.00201871903101486513745776996132, \\
.00073407964764176910146820098646, \\
-.00146815929528353820293640197292, \\
-.00458799779776105677575603891682, \\
0, \\
-.00201871903101486513745776996132, \\
-.00348687832629840334039417193424, \\
.00091759955955221137683525123308, \\
-.0031198385024775185728196369439, \\
-.00403743806202973027491553992263, \\
.00128463938337309603598956897486, \\
-.0036703982382088455073410049323, \\
-.00220223894292530730440460295938, \\
.00110111947146265365220230147969, \\
-.00385391815011928767428783793036, \\
.00018351991191044227536705024662, \\
.00110111947146265365220230147969, \\
-.0031198385024775185728196369439, \\
.00055055973573132682610115073985, \\
.00036703982382088455073410049323, \\
-.0031198385024775185728196369439, \\
.00110111947146265365220230147969, \\
.00018351991191044227536705024662, \\
-.00330335841438796073976646994197, \\
.00110111947146265365220230147969, \\
-.00110111947146265365220230147969, \\
-.00238575885483574947135143595744, \\
.00165167920719398036988323497098, \\
-.00146815929528353820293640197292, \\
-.00146815929528353820293640197292, \\
.00128463938337309603598956897486, \\
-.00220223894292530730440460295938, \\
-.00128463938337309603598956897486, \\
.00128463938337309603598956897486, \\
-.00220223894292530730440460295938, \\
-.00055055973573132682610115073985, \\
.00055055973573132682610115073985, \\
-.00275279867865663423892597094778, \\
-.00018351991191044227536705024662, \\
-.00018351991191044227536705024662, \\
-.00238575885483574947135143595744, \\
.00018351991191044227536705024662, \\
-.00055055973573132682610115073985, \\
-.00201871903101486513745776996132, \\
.00036703982382088455073410049323, \\
-.00091759955955221137683525123308, \\
-.00183519911910442275367050246615, \\
.00055055973573132682610115073985, \\
-.00128463938337309603598956897486, \\
-.00128463938337309603598956897486, \\
.00055055973573132682610115073985, \\
-.00146815929528353820293640197292, \\
-.00091759955955221137683525123308, \\
.00018351991191044227536705024662, \\
-.00146815929528353820293640197292, \\
-.00055055973573132682610115073985, \\
.00018351991191044227536705024662, \\
-.00165167920719398036988323497098, \\
-.00018351991191044227536705024662, \\
-.00018351991191044227536705024662, \\
-.00146815929528353820293640197292, \\
0, \\
-.00055055973573132682610115073985, \\
-.00128463938337309603598956897486, \\
0, \\
-.00073407964764176910146820098646, \\
-.00110111947146265365220230147969, \\
0, \\
-.00091759955955221137683525123308, \\
-.00073407964764176910146820098646, \\
0, \\
-.00110111947146265365220230147969, \\
-.00073407964764176910146820098646, \\
-.00018351991191044227536705024662, \\
-.00110111947146265365220230147969, \\
-.00036703982382088455073410049323, \\
-.00036703982382088455073410049323, \\
-.00091759955955221137683525123308, \\
-.00018351991191044227536705024662, \\
-.00036703982382088455073410049323, \\
-.00091759955955221137683525123308, \\
-.00018351991191044227536705024662, \\
-.00055055973573132682610115073985, \\
-.00055055973573132682610115073985, \\
-.00036703982382088455073410049323, \\
-.00055055973573132682610115073985, \\
-.00055055973573132682610115073985, \\
-.00036703982382088455073410049323, \\
-.00055055973573132682610115073985, \\
-.00055055973573132682610115073985, \\
-.00036703982382088455073410049323, \\
-.00036703982382088455073410049323, \\
-.00036703982382088455073410049323)
gi_AF_3D_HrirChannel4TableNumber = ftgen(0, 0, 256, -2, \\
0, \\
.00048744820862783329708592394702, \\
.00024372410431391664854296197351, \\
.00024372410431391664854296197351, \\
.00024372410431391664854296197351, \\
0, \\
-.00048744820862783329708592394702, \\
0, \\
-.00097489641725566659417184789405, \\
.00097489641725566659417184789405, \\
0, \\
-.00170606873019741645848557087817, \\
.00097489641725566659417184789405, \\
-.0121862052156958330234592935426, \\
.01584206678040458310396942920306, \\
.03290275408237874898986774496734, \\
-.09627102120399708140574546177959, \\
-.10260784791615891464733323346081, \\
.46380697050938340941783621929062, \\
.16475749451620766428128206371184, \\
-.93663173287838163982854666755884, \\
.0506946136972946659327021734498, \\
.30465513039239583426009971844906, \\
-.53863027053375578390159716946073, \\
.42432366561052886622107394032355, \\
-.09505240068242749862381657521837, \\
-.14501584206678039268290092422831, \\
1, \\
.3970265659273702341103273738554, \\
.0804289544235924913628821286693, \\
-.16134535705581282138965093508887, \\
-.48988544967097247262444170701201, \\
-.3738727760175481473758907213778, \\
.01949792834511333144975608888672, \\
.05605654399220082878541049353771, \\
-.17523763100170605677696755719808, \\
.07311723129417499467130880930199, \\
-.20424079941506215196689311142109, \\
-.00024372410431391664854296197351, \\
.19644162807701681661143311430351, \\
-.1311235681208871572955843021191, \\
.07214233487691933122132326161591, \\
.12259322446990007782208209619057, \\
.01096758469412624850680693100458, \\
.03533999512551791455372551808978, \\
.22349500365586155714581195752544, \\
-.03607116743845966561066163080795, \\
-.19083597367779672748788755143323, \\
-.04606385571533024719803606217283, \\
-.17572507921033389544085423494835, \\
-.0253473068486473329663510867249, \\
.08725322934438216326835657810079, \\
.13819156714599073465521428261127, \\
-.03850840848159883117451940393039, \\
-.19497928345113332837534869668161, \\
-.05459419936631732667153826810136, \\
-.05435047526200341427848883313345, \\
.03046551303923957995656301989129, \\
.05020716548866682726881549569953, \\
-.00877406775530099880544554480366, \\
-.03923958079454058223145551664857, \\
-.02827199610041433025520163369038, \\
-.06068730197416524752007660481468, \\
-.04508895929807457680915661057952, \\
.07092371435534974843939437505469, \\
.036558615647087497335654404651, \\
.06190592249573483030200549137589, \\
.05678771630514257984234660625589, \\
-.04265171825493541124529883745709, \\
-.04338289056787716230223495017526, \\
.00243724104313916643121951111084, \\
-.01389227394589324926510442992367, \\
.02997806483061174823157024604825, \\
.03192785766512307860098829337403, \\
-.07384840360711673878935101811294, \\
-.00731172312941749929365853333252, \\
-.00463075798196441613258089731175, \\
-.02096027297099683009418136236945, \\
.04338289056787716230223495017526, \\
-.00584937850353399978187152186138, \\
-.03436509870826224416484606649647, \\
-.00365586156470874964682926666626, \\
-.02193516938825249701361386200915, \\
-.03875213258591275050646274280552, \\
.01023641238118449918459429426321, \\
-.01364854984157933166788456702534, \\
.00073117231294174997273394023267, \\
.03533999512551791455372551808978, \\
-.02559103095296124882884747364642, \\
-.00097489641725566659417184789405, \\
.01876675603217158039281997616854, \\
-.0253473068486473329663510867249, \\
.00097489641725566659417184789405, \\
.01462344625883499858731706666504, \\
-.02802827199610041439270524676886, \\
.00999268827687058332209790734169, \\
.00974896417255666572487804444336, \\
-.02510358274433341363440774784976, \\
.02071654886668291423168497544793, \\
-.00292468925176699989093576093069, \\
-.02047282476236899836918858852641, \\
.01998537655374116664419581468337, \\
-.00438703387765049940272277240183, \\
-.01657323909334633069145858996762, \\
.02607847916158908055384024748946, \\
-.00316841335608091662079388584061, \\
-.01048013648549841504709068118473, \\
.02656592737021691574827997328612, \\
-.01584206678040458310396942920306, \\
-.00292468925176699989093576093069, \\
.01852303192785766453032358924702, \\
-.01267365342432366648317554336245, \\
.01194248111138191542623943064427, \\
.01779185961491591694283442848246, \\
-.0173044114062880817483947026858, \\
.00268096514745308316107763602076, \\
.00389958566902266637668739157618, \\
-.02827199610041433025520163369038, \\
.00828661954667316534572929498381, \\
-.00024372410431391664854296197351, \\
-.01779185961491591694283442848246, \\
.02071654886668291423168497544793, \\
-.00146234462588349994546788046534, \\
-.00584937850353399978187152186138, \\
.02242261759688033220805358780581, \\
-.00170606873019741645848557087817, \\
-.00536193029490616632215527204153, \\
.01340482573726541580538818010382, \\
-.01486717036314891618453692956336, \\
-.00584937850353399978187152186138, \\
.00950524006824274986238165752184, \\
-.01925420424079941558725970196519, \\
.00341213746039483291697114175633, \\
.00779917133804533275337478315237, \\
-.01462344625883499858731706666504, \\
.00950524006824274986238165752184, \\
.00536193029490616632215527204153, \\
-.01340482573726541580538818010382, \\
.00950524006824274986238165752184, \\
-.00121862052156958321560975555542, \\
-.01169875700706799956374304372275, \\
.01291737752863758234567193028397, \\
-.00877406775530099880544554480366, \\
-.00682427492078966583394228351267, \\
.01340482573726541580538818010382, \\
-.0112113087984401661040267939029, \\
-.00292468925176699989093576093069, \\
.01169875700706799956374304372275, \\
-.00999268827687058332209790734169, \\
-.00243724104313916643121951111084, \\
.00877406775530099880544554480366, \\
-.00950524006824274986238165752184, \\
.00073117231294174997273394023267, \\
.00536193029490616632215527204153, \\
-.00901779185961491640266540770199, \\
.00414330977333658267286464749191, \\
.0060931026078479165117296467713, \\
-.00146234462588349994546788046534, \\
.00658055081647574910408415860275, \\
.00341213746039483291697114175633, \\
-.00389958566902266637668739157618, \\
.00438703387765049940272277240183, \\
.00121862052156958321560975555542, \\
-.00268096514745308316107763602076, \\
.00633682671216183324158777168122, \\
0, \\
-.00024372410431391664854296197351, \\
.0060931026078479165117296467713, \\
-.00024372410431391664854296197351, \\
.00121862052156958321560975555542, \\
.0051182061905922495922971471316, \\
0, \\
.00268096514745308316107763602076, \\
.0051182061905922495922971471316, \\
.00024372410431391664854296197351, \\
.00438703387765049940272277240183, \\
.00268096514745308316107763602076, \\
-.00048744820862783329708592394702, \\
.00438703387765049940272277240183, \\
.00121862052156958321560975555542, \\
.00048744820862783329708592394702, \\
.00536193029490616632215527204153, \\
.00048744820862783329708592394702, \\
0, \\
.00463075798196441613258089731175, \\
-.00073117231294174997273394023267, \\
.00097489641725566659417184789405, \\
.00389958566902266637668739157618, \\
-.00194979283451133318834369578809, \\
.00121862052156958321560975555542, \\
.00268096514745308316107763602076, \\
-.00219351693882524970136138620092, \\
.00194979283451133318834369578809, \\
.00243724104313916643121951111084, \\
-.00170606873019741645848557087817, \\
.00341213746039483291697114175633, \\
.00194979283451133318834369578809, \\
-.00121862052156958321560975555542, \\
.00341213746039483291697114175633, \\
.00073117231294174997273394023267, \\
-.00073117231294174997273394023267, \\
.00365586156470874964682926666626, \\
.00024372410431391664854296197351, \\
-.00024372410431391664854296197351, \\
.00316841335608091662079388584061, \\
-.00048744820862783329708592394702, \\
.00048744820862783329708592394702, \\
.00316841335608091662079388584061, \\
-.00097489641725566659417184789405, \\
.00097489641725566659417184789405, \\
.00243724104313916643121951111084, \\
-.00121862052156958321560975555542, \\
.00146234462588349994546788046534, \\
.00170606873019741645848557087817, \\
-.00121862052156958321560975555542, \\
.00170606873019741645848557087817, \\
.00097489641725566659417184789405, \\
-.00097489641725566659417184789405, \\
.00219351693882524970136138620092, \\
.00048744820862783329708592394702, \\
-.00073117231294174997273394023267, \\
.00219351693882524970136138620092, \\
-.00024372410431391664854296197351, \\
-.00024372410431391664854296197351, \\
.00194979283451133318834369578809, \\
-.00048744820862783329708592394702, \\
0, \\
.00170606873019741645848557087817, \\
-.00073117231294174997273394023267, \\
.00048744820862783329708592394702, \\
.00146234462588349994546788046534, \\
-.00097489641725566659417184789405, \\
.00097489641725566659417184789405, \\
.00097489641725566659417184789405, \\
-.00073117231294174997273394023267, \\
.00121862052156958321560975555542, \\
.00048744820862783329708592394702, \\
-.00048744820862783329708592394702, \\
.00121862052156958321560975555542, \\
.00024372410431391664854296197351, \\
-.00024372410431391664854296197351, \\
.00146234462588349994546788046534, \\
0, \\
.00024372410431391664854296197351, \\
.00097489641725566659417184789405, \\
0, \\
.00024372410431391664854296197351, \\
.00073117231294174997273394023267, \\
0, \\
.00048744820862783329708592394702, \\
.00048744820862783329708592394702, \\
.00024372410431391664854296197351, \\
.00048744820862783329708592394702, \\
.00048744820862783329708592394702, \\
.00024372410431391664854296197351, \\
.00024372410431391664854296197351)
#define X #0#
#define Y #1#
#define Z #2#
#define R #0#
#define T #1#
#define AF_FALSE #0#
#define AF_TRUE #1#
#define AF_EPSILON_FLOAT #0.00000001#
#define AF_MATH__PI #3.1419527#
#define AF_MATH__PI2 #6.2831853#
#define AF_MATH__PI_OVER_180 #0.01745329#
#define AF_MATH__180_OVER_PI #57.29577951#
#define AF_MATH__DEGREES_TO_RADIANS #$AF_MATH__PI_OVER_180#
#define AF_MATH__RADIANS_TO_DEGREES #$AF_MATH__180_OVER_PI#
#define AF_3D_FRAME_DURATION #0.01666667#
#define AF_3D_FRAME_DURATION_OVER_2 #0.001#
#define AF_3D_LISTENER_LAG_TIME #0.025#
opcode AF_FuzzyEqual, k, kk
k_a, k_b xin
k_equal = $AF_TRUE
if ($AF_EPSILON_FLOAT < abs(k_b - k_a)) then
k_equal = $AF_FALSE
endif
xout k_equal
endop
opcode AF_Math_RadiansFromDegrees, k, k
k_degrees xin
xout k_degrees * $AF_MATH__DEGREES_TO_RADIANS
endop
opcode AF_Math_DegreesFromRadians, k, k
k_radians xin
xout k_radians * $AF_MATH__DEGREES_TO_RADIANS
endop
opcode AF_Math_Sin, k, k
k_degrees xin
xout sin(AF_Math_RadiansFromDegrees(k_degrees))
endop
opcode AF_Math_Cos, k, k
k_degrees xin
xout cos(AF_Math_RadiansFromDegrees(k_degrees))
endop
opcode AF_GetInstrumentId, S, 0
xout sprintf("[%.0f,%d]", p1, (p1 - floor(p1)) * 1000)
endop
opcode AF_SendInstrumentOnMessage, 0, Sij
S_instrumentId, i_startTime, i_duration xin
if (-1 == i_duration) then
prints("{\\"csd\\":{\\"i\\":{\\"id\\":%s,\\"on\\":1,\\"startTime\\":%f}}}\\n", S_instrumentId, i_startTime)
else
prints("{\\"csd\\":{\\"i\\":{\\"id\\":%s,\\"on\\":1,\\"startTime\\":%f,\\"duration\\":%f}}}\\n", S_instrumentId,
i_startTime, i_duration)
endif
endop
opcode AF_CreateKChannel, 0, So
S_channelName, i_defaultValue xin
chn_k S_channelName, 3, 0, i_defaultValue
endop
opcode AF_GetKChannel, k, S
S_channelName xin
k_channelValue chnget S_channelName
xout k_channelValue
endop
opcode AF_SetKChannel, 0, Sk
S_channelName, k_channelValue xin
chnset k_channelValue, S_channelName
endop
opcode math_roundFloat_k, k, ki
k_inputFloat, i_decimalPlaces xin
k_outputFloat = k_inputFloat
if (i_decimalPlaces == 0) then
k_outputFloat = round(k_inputFloat)
else
i_10ToTheDecimalPlacesPower = pow(10, i_decimalPlaces)
k_outputFloat = int(k_inputFloat)
k_outputFloat += int(round(frac(k_inputFloat) * i_10ToTheDecimalPlacesPower)) / i_10ToTheDecimalPlacesPower
endif
xout k_outputFloat
endop
giFastSquareMaxI init 101
giFastSquareTable ftgen 0, 0, giFastSquareMaxI, 2, 0
instr math_InitFastSquareTable
iI = 0
while (iI < giFastSquareMaxI) do
tablew(iI * iI, iI, giFastSquareTable)
iI += 1
od
turnoff
endin
scoreline_i("i \\"math_InitFastSquareTable\\" 0 -1")
opcode math_fastSquare, i, i
ii xin
xout tablei(ii, giFastSquareTable)
endop
opcode math_fastSquare, k, k
ki xin
xout tablei(ki, giFastSquareTable)
endop
giFastSqrtMaxI init 10001
giFastSqrtTable ftgen 0, 0, giFastSqrtMaxI, 2, 0
instr math_InitFastSqrtTables
iI = 0
while (iI < giFastSqrtMaxI) do
tablew(sqrt(iI), iI, giFastSqrtTable)
iI += 1
od
turnoff
endin
scoreline_i("i \\"math_InitFastSqrtTables\\" 0 -1")
opcode math_fastSqrt, i, i
ii xin
xout tablei(ii, giFastSqrtTable)
endop
opcode math_fastSqrt, k, k
ki xin
xout tablei(ki, giFastSqrtTable)
endop
opcode math_rytToXyz, i[], iii
iR, iY, iT xin
iXyz[] init 3
iXyz[$X] = iR * sin(iT)
iXyz[$Y] = iY
iXyz[$Z] = iR * cos(iT)
xout iXyz
endop
opcode time_i, i, 0
xout (i(gk_i) + 1) / giKR
endop
opcode time_k, k, 0
xout gk_i / giKR
endop
opcode time_string_i, S, 0
i_time = time_i()
i_hours = floor(i_time / 3600)
i_ = i_time - (3600 * i_hours)
i_minutes = floor(i_ / 60)
i_seconds = floor(i_ - (60 * i_minutes))
i_nanoseconds = 10000 * frac(i_time)
xout sprintf("%d:%02d:%02d.%04d", i_hours, i_minutes, i_seconds, i_nanoseconds)
endop
opcode time_string_k, S, 0
k_time = time_k()
k_hours = floor(k_time / 3600)
k_ = k_time - (3600 * k_hours)
k_minutes = floor(k_ / 60)
k_seconds = floor(k_ - (60 * k_minutes))
k_nanoseconds = 10000 * frac(k_time)
xout sprintfk("%d:%02d:%02d.%04d", k_hours, k_minutes, k_seconds, k_nanoseconds)
endop
opcode time_metro, k, i
i_cps xin
k_returnValue init 0
i_secondsPerTick = 1 / i_cps
i_startTime = time_i()
k_nextTickTime init i_startTime
k_currentTime = time_k()
if (k_nextTickTime < k_currentTime) then
k_returnValue = 1
k_nextTickTime += i_secondsPerTick
else
k_returnValue = 0
endif
xout k_returnValue
endop
#define AF_3D_AUDIO__AMBISONIC_ORDER_MAX #3#
#define AF_3D_AUDIO__SPEED_OF_SOUND #343#
gi_AF_3D_ListenerMatrixTableNumber ftgen 1, 0, 16, -2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1
gk_AF_3D_ListenerRotationMatrix[] init 9
gk_AF_3D_ListenerPosition[] init 3
opcode AF_3D_Audio_AzimuthLookupTableRow, k, k
k_azimuth xin
k_azimuth = -(round(k_azimuth % 360) + 180)
if (k_azimuth < 0) then
k_azimuth += 360
elseif (360 <= k_azimuth) then
k_azimuth -= 360
endif
xout k_azimuth
endop
opcode AF_3D_Audio_ElevationLookupTableRow, k, k
k_elevation xin
xout min(round(min(90, max(-90, k_elevation))) + 90, 179)
endop
opcode AF_3D_Audio_MaxReWeightsLookupTableRow, k, k
k_sourceWidth xin
xout min(max(0, round(k_sourceWidth)), 360)
endop
gkAmbisonicChannelGains[] init 4
opcode AF_3D_Audio_ChannelGains, 0, kkkp
k_azimuth, k_elevation, k_sourceWidth, i_ambisonicOrder xin
k_azimuthRow = AF_3D_Audio_AzimuthLookupTableRow(k_azimuth)
k_elevationRow = AF_3D_Audio_ElevationLookupTableRow(k_elevation)
k_spreadRow = AF_3D_Audio_MaxReWeightsLookupTableRow(k_sourceWidth)
gkAmbisonicChannelGains[0] = gi_AF_3D_Audio_MaxReWeightsLookupTable[k_spreadRow][0]
k_i = 1
while (k_i <= i_ambisonicOrder) do
k_degreeWeight = gi_AF_3D_Audio_MaxReWeightsLookupTable[k_spreadRow][k_i]
k_j = -k_i
while (k_j <= k_i) do
k_channel = (k_i * k_i) + k_i + k_j
k_elevationColumn = k_i * (k_i + 1) / 2 + abs(k_j) - 1
k_gain = gi_AF_3D_Audio_SphericalHarmonicsElevationLookupTable[k_elevationRow][k_elevationColumn]
if (k_j != 0) then
if (k_j < 0) then
k_azimuthColumn = $AF_3D_AUDIO__AMBISONIC_ORDER_MAX + k_j
else
k_azimuthColumn = $AF_3D_AUDIO__AMBISONIC_ORDER_MAX + k_j - 1
endif
if (k_azimuthRow < 180) then
k_gain *= gi_AF_3D_Audio_SphericalHarmonicsAzimuthLookupTable_000_179 [k_azimuthRow][k_azimuthColumn]
else
k_gain *= gi_AF_3D_Audio_SphericalHarmonicsAzimuthLookupTable_180_359 [k_azimuthRow - 180][k_azimuthColumn]
endif
endif
gkAmbisonicChannelGains[k_channel] = k_degreeWeight * k_gain
k_j += 1
od
k_i += 1
od
endop
opcode AF_3D_Audio_ChannelGains, 0, i[]kp
i_sourcePosition[], k_sourceWidth, i_ambisonicOrder xin
k_direction[] = fillarray(i_sourcePosition[$X] - gk_AF_3D_ListenerPosition[$X],
i_sourcePosition[$Y] - gk_AF_3D_ListenerPosition[$Y],
i_sourcePosition[$Z] - gk_AF_3D_ListenerPosition[$Z])
k_azimuth = taninv2(k_direction[$X], k_direction[$Z]) * $AF_MATH__RADIANS_TO_DEGREES
k_elevation = taninv2(k_direction[$Y],
sqrt:k(k_direction[$X] * k_direction[$X] + k_direction[$Z] * k_direction[$Z])) * $AF_MATH__RADIANS_TO_DEGREES
AF_3D_Audio_ChannelGains(k_azimuth, k_elevation, k_sourceWidth, i_ambisonicOrder)
endop
opcode AF_3D_Audio_ChannelGains, 0, k[]kp
k_sourcePosition[], k_sourceWidth, i_ambisonicOrder xin
k_direction[] = fillarray(k_sourcePosition[$X] - gk_AF_3D_ListenerPosition[$X],
k_sourcePosition[$Y] - gk_AF_3D_ListenerPosition[$Y],
k_sourcePosition[$Z] - gk_AF_3D_ListenerPosition[$Z])
k_azimuth = taninv2(k_direction[$X], k_direction[$Z]) * $AF_MATH__RADIANS_TO_DEGREES
k_elevation = taninv2(k_direction[$Y],
sqrt:k(k_direction[$X] * k_direction[$X] + k_direction[$Z] * k_direction[$Z])) * $AF_MATH__RADIANS_TO_DEGREES
AF_3D_Audio_ChannelGains(k_azimuth, k_elevation, k_sourceWidth, i_ambisonicOrder)
endop
opcode AF_3D_Audio_ChannelGains_XYZ, 0, kkkPp
k_sourcePositionX, k_sourcePositionY, k_sourcePositionZ, k_sourceWidth, i_ambisonicOrder xin
k_direction[] init 3
k_direction[$X] = k_sourcePositionX - gk_AF_3D_ListenerPosition[$X]
k_direction[$Y] = k_sourcePositionY - gk_AF_3D_ListenerPosition[$Y]
k_direction[$Z] = k_sourcePositionZ - gk_AF_3D_ListenerPosition[$Z]
k_azimuth = taninv2(k_direction[$X], k_direction[$Z]) * $AF_MATH__RADIANS_TO_DEGREES
k_elevation = taninv2(k_direction[$Y],
sqrt:k(k_direction[$X] * k_direction[$X] + k_direction[$Z] * k_direction[$Z])) * $AF_MATH__RADIANS_TO_DEGREES
AF_3D_Audio_ChannelGains(k_azimuth, k_elevation, k_sourceWidth, i_ambisonicOrder)
endop
opcode AF_3D_Audio_ChannelGains_RTZ, 0, kkkPp
k_sourcePositionR, k_sourcePositionT, k_sourcePositionZ, k_sourceWidth, i_ambisonicOrder xin
k_sourcePositionX = k_sourcePositionR * cos(k_sourcePositionT)
k_sourcePositionY = k_sourcePositionR * sin(k_sourcePositionT)
k_elevation = taninv2(k_sourcePositionZ, k_sourcePositionR) * $AF_MATH__RADIANS_TO_DEGREES
AF_3D_Audio_ChannelGains_XYZ(k_sourcePositionX, k_sourcePositionY, k_sourcePositionZ, k_sourceWidth,
i_ambisonicOrder)
endop
opcode AF_3D_Audio_DistanceAttenuation, k, kPP
kDistance, kReferenceDistance, kRolloffFactor xin
kAttenuation = kReferenceDistance / ((max(kDistance, kReferenceDistance) - kReferenceDistance) * kRolloffFactor + kReferenceDistance)
xout kAttenuation
endop
opcode AF_3D_Audio_DistanceAttenuation, a, aPP
aDistance, kReferenceDistance, kRolloffFactor xin
aAttenuation = kReferenceDistance / ((max(aDistance, a(kReferenceDistance)) - kReferenceDistance) * kRolloffFactor + kReferenceDistance)
xout aAttenuation
endop
opcode AF_3D_Audio_SourceDistance, k, iii
iSourcePositionX, iSourcePositionY, iSourcePositionZ xin
kVector[] init 3
kVector[$X] = iSourcePositionX - gk_AF_3D_ListenerPosition[$X]
kVector[$Y] = iSourcePositionY - gk_AF_3D_ListenerPosition[$Y]
kVector[$Z] = iSourcePositionZ - gk_AF_3D_ListenerPosition[$Z]
xout lag:k(sqrt:k(kVector[$X] * kVector[$X] + kVector[$Y] * kVector[$Y] + kVector[$Z] * kVector[$Z]), $AF_3D_LISTENER_LAG_TIME)
endop
opcode AF_3D_Audio_SourceDistance, k, kkk
kSourcePositionX, kSourcePositionY, kSourcePositionZ xin
kVector[] init 3
kVector[$X] = kSourcePositionX - gk_AF_3D_ListenerPosition[$X]
kVector[$Y] = kSourcePositionY - gk_AF_3D_ListenerPosition[$Y]
kVector[$Z] = kSourcePositionZ - gk_AF_3D_ListenerPosition[$Z]
xout lag:k(sqrt:k(kVector[$X] * kVector[$X] + kVector[$Y] * kVector[$Y] + kVector[$Z] * kVector[$Z]), $AF_3D_LISTENER_LAG_TIME)
endop
opcode AF_3D_Audio_SourceDistance_a, a, kkk
kSourcePositionX, kSourcePositionY, kSourcePositionZ xin
kVector[] init 3
kVector[$X] = kSourcePositionX - gk_AF_3D_ListenerPosition[$X]
kVector[$Y] = kSourcePositionY - gk_AF_3D_ListenerPosition[$Y]
kVector[$Z] = kSourcePositionZ - gk_AF_3D_ListenerPosition[$Z]
xout a(lag:k(sqrt:k(kVector[$X] * kVector[$X] + kVector[$Y] * kVector[$Y] + kVector[$Z] * kVector[$Z]), $AF_3D_LISTENER_LAG_TIME))
endop
opcode AF_3D_Audio_SourceDistance, k, i[]
iSourcePosition[] xin
kVector[] init 3
kVector[$X] = iSourcePosition[$X] - gk_AF_3D_ListenerPosition[$X]
kVector[$Y] = iSourcePosition[$Y] - gk_AF_3D_ListenerPosition[$Y]
kVector[$Z] = iSourcePosition[$Z] - gk_AF_3D_ListenerPosition[$Z]
xout lag:k(sqrt:k(kVector[$X] * kVector[$X] + kVector[$Y] * kVector[$Y] + kVector[$Z] * kVector[$Z]), $AF_3D_LISTENER_LAG_TIME)
endop
opcode AF_3D_Audio_SourceDistance, k, k[]
kSourcePosition[] xin
kVector[] init 3
kVector[$X] = kSourcePosition[$X] - gk_AF_3D_ListenerPosition[$X]
kVector[$Y] = kSourcePosition[$Y] - gk_AF_3D_ListenerPosition[$Y]
kVector[$Z] = kSourcePosition[$Z] - gk_AF_3D_ListenerPosition[$Z]
xout lag:k(sqrt:k(kVector[$X] * kVector[$X] + kVector[$Y] * kVector[$Y] + kVector[$Z] * kVector[$Z]), $AF_3D_LISTENER_LAG_TIME)
endop
opcode AF_3D_Audio_SourceDistance_a, a, k[]
kSourcePosition[] xin
kVector[] init 3
kVector[$X] = kSourcePosition[$X] - gk_AF_3D_ListenerPosition[$X]
kVector[$Y] = kSourcePosition[$Y] - gk_AF_3D_ListenerPosition[$Y]
kVector[$Z] = kSourcePosition[$Z] - gk_AF_3D_ListenerPosition[$Z]
xout a(lag:k(sqrt:k(kVector[$X] * kVector[$X] + kVector[$Y] * kVector[$Y] + kVector[$Z] * kVector[$Z]), $AF_3D_LISTENER_LAG_TIME))
endop
opcode AF_3D_Audio_SourceDirection, k[], k[]
k_sourcePosition[] xin
k_direction[] = fillarray(k_sourcePosition[$X] - gk_AF_3D_ListenerPosition[$X],
k_sourcePosition[$Y] - gk_AF_3D_ListenerPosition[$Y],
k_sourcePosition[$Z] - gk_AF_3D_ListenerPosition[$Z])
k_distance = sqrt(k_direction[$X] * k_direction[$X] + k_direction[$Y] * k_direction[$Y] + k_direction[$Z] * k_direction[$Z])
if (0 < k_distance) then
k_direction /= k_distance
endif
xout k_direction
endop
opcode AF_3D_Audio_DopplerShift, k, kkk
k_previousDistance, k_currentDistance, k_deltaTime xin
k_dopplerShift init 1
if (0 < k_deltaTime) then
k_deltaDistance = k_currentDistance - k_previousDistance
k_velocity = k_deltaDistance / k_deltaTime
k_dopplerShift = $AF_3D_AUDIO__SPEED_OF_SOUND / ($AF_3D_AUDIO__SPEED_OF_SOUND + k_velocity)
endif
xout k_dopplerShift
endop
opcode AF_3D_UpdateListenerRotationMatrix, 0, 0
gk_AF_3D_ListenerRotationMatrix[0] = tab:k(0, gi_AF_3D_ListenerMatrixTableNumber)
gk_AF_3D_ListenerRotationMatrix[1] = tab:k(1, gi_AF_3D_ListenerMatrixTableNumber)
gk_AF_3D_ListenerRotationMatrix[2] = tab:k(2, gi_AF_3D_ListenerMatrixTableNumber)
gk_AF_3D_ListenerRotationMatrix[3] = tab:k(4, gi_AF_3D_ListenerMatrixTableNumber)
gk_AF_3D_ListenerRotationMatrix[4] = tab:k(5, gi_AF_3D_ListenerMatrixTableNumber)
gk_AF_3D_ListenerRotationMatrix[5] = tab:k(6, gi_AF_3D_ListenerMatrixTableNumber)
gk_AF_3D_ListenerRotationMatrix[6] = tab:k(8, gi_AF_3D_ListenerMatrixTableNumber)
gk_AF_3D_ListenerRotationMatrix[7] = tab:k(9, gi_AF_3D_ListenerMatrixTableNumber)
gk_AF_3D_ListenerRotationMatrix[8] = tab:k(10, gi_AF_3D_ListenerMatrixTableNumber)
endop
opcode AF_3D_UpdateListenerPosition, 0, 0
gk_AF_3D_ListenerPosition[0] = tab:k(12, gi_AF_3D_ListenerMatrixTableNumber)
gk_AF_3D_ListenerPosition[1] = tab:k(13, gi_AF_3D_ListenerMatrixTableNumber)
gk_AF_3D_ListenerPosition[2] = tab:k(14, gi_AF_3D_ListenerMatrixTableNumber)
endop
ga_AF_3D_AmbisonicOutput[] init 4
opcode AF_Ambisonics_Send, 0, ai[]P
a_signal, i_position[], k_width xin
AF_3D_Audio_ChannelGains(i_position, k_width)
ga_AF_3D_AmbisonicOutput[0] = ga_AF_3D_AmbisonicOutput[0] + (gkAmbisonicChannelGains[0] * a_signal)
ga_AF_3D_AmbisonicOutput[1] = ga_AF_3D_AmbisonicOutput[1] + (gkAmbisonicChannelGains[1] * a_signal)
ga_AF_3D_AmbisonicOutput[2] = ga_AF_3D_AmbisonicOutput[2] + (gkAmbisonicChannelGains[2] * a_signal)
ga_AF_3D_AmbisonicOutput[3] = ga_AF_3D_AmbisonicOutput[3] + (gkAmbisonicChannelGains[3] * a_signal)
endop
opcode AF_Ambisonics_Send, 0, ak[]P
a_signal, k_position[], k_width xin
AF_3D_Audio_ChannelGains(k_position, k_width)
ga_AF_3D_AmbisonicOutput[0] = ga_AF_3D_AmbisonicOutput[0] + (gkAmbisonicChannelGains[0] * a_signal)
ga_AF_3D_AmbisonicOutput[1] = ga_AF_3D_AmbisonicOutput[1] + (gkAmbisonicChannelGains[1] * a_signal)
ga_AF_3D_AmbisonicOutput[2] = ga_AF_3D_AmbisonicOutput[2] + (gkAmbisonicChannelGains[2] * a_signal)
ga_AF_3D_AmbisonicOutput[3] = ga_AF_3D_AmbisonicOutput[3] + (gkAmbisonicChannelGains[3] * a_signal)
endop
ga_AF_Reverb_Send init 0
opcode AF_Reverb_Send, 0, a
a_signal xin
ga_AF_Reverb_Send += a_signal
endop
gi_instrumentCount = 1
gi_instrumentIndexOffset = 0
gSInstrumentSignalIds[][] init gi_instrumentCount, $INTERNAL_CHANNEL_COUNT
gi_auxCount = 1
gi_auxIndexOffset = 0
giAuxChannelIndexRanges[][][] init gi_auxCount, gi_instrumentCount, 2
ga_auxVolumes[][][] init gi_auxCount, gi_instrumentCount, $INTERNAL_CHANNEL_COUNT
ga_auxSignals[][] init gi_auxCount, $INTERNAL_CHANNEL_COUNT
gi_trackCount = gi_instrumentCount + gi_auxCount
giMasterChannelIndexRanges[][] init gi_trackCount, 2
ga_masterVolumes[][] init gi_trackCount, $INTERNAL_CHANNEL_COUNT
ga_masterSignals[] init $INTERNAL_CHANNEL_COUNT
gkPlaybackTimeInSeconds init 0
#ifdef IS_MIXDOWN
giMainCameraArrayLength init ${SHARED.MainCameraArray.length}
giMainCameraArrayMatrixes[] init ${SHARED.MainCameraArray.matrixesString}
#end
iDummy = vco2init(31)
chn_k("main-volume", 1, 2, 1, 0, 1)
chn_k("pause", 1)
instr 1
AF_3D_UpdateListenerRotationMatrix()
AF_3D_UpdateListenerPosition()
iSecondsPerKPass = 1 / kr
gkPlaybackTimeInSeconds += iSecondsPerKPass
endin
instr 2
gi_instrumentCount = p4
gi_instrumentIndexOffset = p5
gi_auxCount = p6
gi_auxIndexOffset = p7
gi_trackCount = gi_instrumentCount + gi_auxCount
SInstrumentSignalIds[][] init gi_instrumentCount, $INTERNAL_CHANNEL_COUNT
ii = 0
while (ii < gi_instrumentCount) do
ij = 0
while (ij < $INTERNAL_CHANNEL_COUNT) do
SInstrumentSignalIds[ii][ij] = sprintf("%d/%d", ii, ij)
ij += 1
od
ii += 1
od
gSInstrumentSignalIds = SInstrumentSignalIds
iAuxChannelIndexRanges[][][] init gi_auxCount, gi_instrumentCount, 2
iI = 0
while (iI < gi_auxCount) do
iJ = 0
while (iJ < gi_instrumentCount) do
iAuxChannelIndexRanges[iI][iJ][0] = 0
iAuxChannelIndexRanges[iI][iJ][1] = $INTERNAL_CHANNEL_COUNT - 1
iJ += 1
od
iI += 1
od
giAuxChannelIndexRanges = iAuxChannelIndexRanges
a_auxVolumes[][][] init gi_auxCount, gi_instrumentCount, $INTERNAL_CHANNEL_COUNT
ga_auxVolumes = a_auxVolumes
a_auxSignals[][] init gi_auxCount, $INTERNAL_CHANNEL_COUNT
ga_auxSignals = a_auxSignals
iMasterChannelIndexRanges[][] init gi_trackCount, 2
iI = 0
while (iI < gi_trackCount) do
iMasterChannelIndexRanges[iI][0] = 0
iMasterChannelIndexRanges[iI][1] = $INTERNAL_CHANNEL_COUNT - 1
iI += 1
od
giMasterChannelIndexRanges = iMasterChannelIndexRanges
a_masterVolumes[][] init gi_trackCount, $INTERNAL_CHANNEL_COUNT
ga_masterVolumes = a_masterVolumes
a_masterSignals[] init $INTERNAL_CHANNEL_COUNT
ga_masterSignals = a_masterSignals
event_i("i", 3, 0, -1)
event_i("i", 17, 1, -1)
event_i("i", 21, 1, -1)
turnoff
endin
instr 3
gk_i += 1
iClearTrackChannelSignalInstrumentNumber = nstrnum("ClearTrackChannelSignal")
iFraction = 1
ii = 0
while (ii < gi_instrumentCount) do
ij = 0
while (ij < $INTERNAL_CHANNEL_COUNT) do
scoreline_i(sprintf("i %d.%03d 0 -1 %d %d", iClearTrackChannelSignalInstrumentNumber, iFraction, ii, ij))
ij += 1
iFraction += 1
od
ii += 1
od
k_bus = 0
while (k_bus < gi_auxCount) do
k_channel = 0
while (k_channel < $INTERNAL_CHANNEL_COUNT) do
ga_auxSignals[k_bus][k_channel] = 0
k_channel += 1
od
k_bus += 1
od
k_channel = 0
while (k_channel < $INTERNAL_CHANNEL_COUNT) do
ga_masterSignals[k_channel] = 0
k_channel += 1
od
endin
#ifdef IS_GENERATING_JSON
giWriteComma init 0
gSPluginUuids[][] init 1000, 100
instr StartJsonArray
turnoff
fprints("DawPlayback.json", "[")
endin
instr EndJsonArray
turnoff
fprints("DawPlayback.json", "]")
endin
instr StartJsonObject
turnoff
fprints("DawPlayback.json", "{")
endin
instr EndJsonObject
turnoff
fprints("DawPlayback.json", "}")
endin
instr GeneratePluginJson
turnoff
SPluginUuid = strget(p4)
if (giWriteComma == 1) then
fprints("DawPlayback.json", ",")
else
giWriteComma = 1
endif
fprints("DawPlayback.json", sprintf("\\"%s\\":[", SPluginUuid))
iI = 0
iWriteComma = 0
while (iI != -1) do
SFileName = sprintf("json/%s.%d.json", SPluginUuid, iI)
if (filevalid(SFileName) == 0) then
iI = -1
else
iLineNumber = 0
while (iLineNumber != -1) do
SLine, iLineNumber readfi SFileName
if (iLineNumber == -1) then
else
if (iWriteComma == 1) then
fprints("DawPlayback.json", ",")
else
iWriteComma = 1
endif
if (strcmp(strsub(SLine, strlen(SLine) - 1, strlen(SLine)), "\\n") == 0) then
SLine = strsub(SLine, 0, strlen(SLine) - 1)
endif
if (iLineNumber > 1) then
SLine = strsub(SLine, 1, strlen(SLine))
endif
fprints("DawPlayback.json", SLine)
endif
od
iI += 1
endif
od
endin
instr GenerateJson
prints("instr GenerateJson ...\\n")
scoreline_i("i \\"StartJsonObject\\" 0 0")
iI = 0
while (iI < 1000) do
if (strlen(gSPluginUuids[iI][0]) == 32) then
scoreline_i(sprintf("i \\"GeneratePluginJson\\" 0 0 \\"%s\\"", gSPluginUuids[iI][0]))
scoreline_i("i \\"EndJsonArray\\" 0 0")
endif
iI += 1
od
scoreline_i("i \\"EndJsonObject\\" 0 0")
prints("instr GenerateJson - done\\n")
endin
#end
#define CSOUND_IS_PLAYBACK #1#
#ifndef MIX_CHANNEL_COUNT
#ifdef INTERNAL_CHANNEL_COUNT
#define MIX_CHANNEL_COUNT # $INTERNAL_CHANNEL_COUNT #
#else
#define MIX_CHANNEL_COUNT # 6 #
#endif
#endif
ii = 0
while (ii < $MIX_CHANNEL_COUNT) do
chn_a(sprintf("%s/%d", "0", ii), 2)
ii += 1
od
#ifndef ADSR_LINSEGR_UDO_ORC
#define ADSR_LINSEGR_UDO_ORC ##
opcode adsr_linsegr, a, iiii
iA, iD, iS, iR xin
iA = max(0.000001, iA)
iD = max(0.000001, iD)
iR = max(0.000001, iR)
aOut = linsegr(0, iA, 1, iD, iS, 1, iS, iR, 0)
xout aOut
endop
opcode adsr_linsegr, k, kkkk
iA, iD, iS, iR xin
iA = max(0.000001, iA)
iD = max(0.000001, iD)
iR = max(0.000001, iR)
kOut = linsegr(0, iA, 1, iD, iS, 1, iS, iR, 0)
xout kOut
endop
#end
gSCcInfo_TR_808[] = fillarray( \\
\\
"positionEnabled", "bool", "true", "synced", "positionMaxAmpWhenClose", "number", "1", "synced", "positionReferenceDistance", "number", "0.1", "synced", "positionRolloffFactor", "number", "0.01", "synced", "positionOpcodeComboBoxIndex", "number", "0", "synced", "positionOpcode", "string", "", "synced", "positionXScale", "number", "100", "synced", "positionYScale", "number", "100", "synced", "positionZScale", "number", "100", "synced", "positionXOffset", "number", "0", "synced", "positionYOffset", "number", "0", "synced", "positionZOffset", "number", "0", "synced",
\\
"", "", "", "")
#define gSCcInfo_TR_808_Count #52#
#define CC_INFO_CHANNEL #0#
#define CC_INFO_TYPE #1#
#define CC_INFO_VALUE #2#
#define CC_INFO_SYNC_TYPE #3#
#define CC_NO_SYNC #0#
#define CC_SYNC_TO_CHANNEL #1#
#define CC_CHANNEL_NAME(channel) #gSCcInfo_TR_808[giCc_TR_808_$channel][$CC_INFO_CHANNEL]#
#ifdef gSCcInfo_TR_808_Count
if (lenarray(gSCcInfo_TR_808) != $gSCcInfo_TR_808_Count) igoto skipCcInfoReshapeArray_TR_808
giCcCount_TR_808 = (lenarray(gSCcInfo_TR_808) / 4) - 1
reshapearray(gSCcInfo_TR_808, giCcCount_TR_808 + 1, 4)
skipCcInfoReshapeArray_TR_808:
#else
giCcCount_TR_808 = (lenarray(gSCcInfo_TR_808) / 4) - 1
reshapearray(gSCcInfo_TR_808, giCcCount_TR_808 + 1, 4)
#end
opcode ccIndex_TR_808, i, S
SChannel xin
kgoto end
iI = 0
while (iI < giCcCount_TR_808) do
if (strcmp(gSCcInfo_TR_808[iI][$CC_INFO_CHANNEL], SChannel) == 0) igoto end
iI += 1
od
iI = -1
end:
xout iI
endop
gSCcValueDefaults_TR_808[] init giCcCount_TR_808
giCcValueDefaults_TR_808[] init giCcCount_TR_808
gSCcValues_TR_808[][] init 6, giCcCount_TR_808
giCcValues_TR_808[][] init 6, giCcCount_TR_808
gkCcValues_TR_808[][] init 6, giCcCount_TR_808
gkCcSyncTypes_TR_808[][] init 6, giCcCount_TR_808
instr TR_808_InitializeCcValues
iI = 0
while (iI < giCcCount_TR_808) do
SType = gSCcInfo_TR_808[iI][$CC_INFO_TYPE]
SValue = gSCcInfo_TR_808[iI][$CC_INFO_VALUE]
iJ = 0
while (iJ < 6) do
iValue = -1
if (strcmp(SType, "string") == 0) then
gSCcValueDefaults_TR_808[iI] = SValue
gSCcValues_TR_808[iJ][iI] = SValue
else
if (strcmp(SType, "bool") == 0) then
if (strcmp(SValue, "false") == 0) then
iValue = 0
else
iValue = 1
endif
elseif (strcmp(SType, "number") == 0 && strcmp(SValue, "") != 0) then
iValue = strtod(SValue)
endif
giCcValueDefaults_TR_808[iI] = iValue
giCcValues_TR_808[iJ][iI] = iValue
endif
iJ += 1
od
iI += 1
od
igoto end
kI = 0
while (kI < giCcCount_TR_808) do
SType = gSCcInfo_TR_808[kI][$CC_INFO_TYPE]
SValue = gSCcInfo_TR_808[kI][$CC_INFO_VALUE]
SSyncType = gSCcInfo_TR_808[kI][$CC_INFO_SYNC_TYPE]
kJ = 0
while (kJ < 6) do
kValue = -1
if (strcmpk(SType, "bool") == 0) then
if (strcmpk(SValue, "false") == 0) then
kValue = 0
else
kValue = 1
endif
elseif (strcmpk(SType, "number") == 0 && strcmpk(SValue, "") != 0) then
kValue = strtodk(SValue)
endif
gkCcValues_TR_808[kJ][kI] = kValue
gkCcSyncTypes_TR_808[kJ][kI] = $CC_NO_SYNC
if (strcmpk(SSyncType, "synced") == 0) then
gkCcSyncTypes_TR_808[kJ][kI] = $CC_SYNC_TO_CHANNEL
endif
kJ += 1
od
kI += 1
od
turnoff
end:
endin
event_i("i", "TR_808_InitializeCcValues", 0, -1)
instr TR_808_CreateCcIndexes
giCc_TR_808_positionEnabled init ccIndex_TR_808("positionEnabled")
giCc_TR_808_positionMaxAmpWhenClose init ccIndex_TR_808("positionMaxAmpWhenClose")
giCc_TR_808_positionReferenceDistance init ccIndex_TR_808("positionReferenceDistance")
giCc_TR_808_positionRolloffFactor init ccIndex_TR_808("positionRolloffFactor")
giCc_TR_808_positionOpcodeComboBoxIndex init ccIndex_TR_808("positionOpcodeComboBoxIndex")
giCc_TR_808_positionOpcode init ccIndex_TR_808("positionOpcode")
giCc_TR_808_positionXScale init ccIndex_TR_808("positionXScale")
giCc_TR_808_positionYScale init ccIndex_TR_808("positionYScale")
giCc_TR_808_positionZScale init ccIndex_TR_808("positionZScale")
giCc_TR_808_positionXOffset init ccIndex_TR_808("positionXOffset")
giCc_TR_808_positionYOffset init ccIndex_TR_808("positionYOffset")
giCc_TR_808_positionZOffset init ccIndex_TR_808("positionZOffset")
turnoff
endin
event_i("i", "TR_808_CreateCcIndexes", 0, -1)
#ifdef CSOUND_IS_PLAYBACK
opcode time_PlaybackTime, i, 0
xout i(gk_i) / giKR
endop
opcode time_PlaybackTime, k, 0
xout gk_i / giKR
endop
#else
opcode time_PlaybackTime, i, 0
xout time_i() - i(gk_dawPlayStartTime)
endop
opcode time_PlaybackTime, k, 0
xout time_k() - gk_dawPlayStartTime
endop
#end
opcode dEd_circle_XZ, iii, 0
iPeriod = 1
iX init 0
iY init 0
iZ init 0
iT = $AF_MATH__PI2 * (wrap(time_PlaybackTime:i(), 0, iPeriod) / iPeriod)
iX = sin(iT)
iZ = cos(iT)
xout iX, iY, iZ
endop
opcode dEd_circle_XZ, kkk, 0
iPeriod = 1
kX init 0
kY init 0
kZ init 0
kT = $AF_MATH__PI2 * (wrap(time_PlaybackTime:k(), 0, iPeriod) / iPeriod)
kX = sin(kT)
kZ = cos(kT)
xout kX, kY, kZ
endop
opcode dEd_random_XZ, iii, 0
iX init random(-1, 1)
iY init 0
iZ init random(-1, 1)
xout iX, iY, iZ
endop
opcode dEd_random_XZ, kkk, 0
kX init 0
kY init 0
kZ init 0
kTick init 0
kPreviousTick init 0
kTick = gkPlaybackTimeInSeconds / 0.0625
if (kTick - kPreviousTick > 1 || kTick < kPreviousTick) then
kPreviousTick = kTick
kX = random:k(-1, 1)
kZ = random:k(-1, 1)
endif
xout kX, kY, kZ
endop
opcode time_NoteTime, i, 0
xout 0
endop
opcode time_NoteTime, k, 0
ki init 0
ki += 1
xout ki / kr
endop
opcode dEd_ray_XZ, iii, 0
iXZ init time_NoteTime:i()
iY init 0
xout iXZ, iY, iXZ
endop
opcode dEd_ray_XZ, kkk, 0
kXZ init 0
kY init 0
kI init 0
kXZ = time_NoteTime:k()
kI += 1
xout kXZ, kY, kXZ
endop
opcode dEd_position, iii, i
iPositionOpcode xin
iX = 0
iY = 0
iZ = 0
if (iPositionOpcode == 1) then
elseif (iPositionOpcode == 2) then
iX, iY, iZ dEd_circle_XZ
elseif (iPositionOpcode == 3) then
iX, iY, iZ dEd_random_XZ
elseif (iPositionOpcode == 4) then
iX, iY, iZ dEd_ray_XZ
endif
xout iX, iY, iZ
endop
opcode dEd_position, kkk, k
kPositionOpcode xin
kX = 0
kY = 0
kZ = 0
if (kPositionOpcode == 1) then
elseif (kPositionOpcode == 2) then
kX, kY, kZ dEd_circle_XZ
elseif (kPositionOpcode == 3) then
kX, kY, kZ dEd_random_XZ
elseif (kPositionOpcode == 4) then
kX, kY, kZ dEd_ray_XZ
endif
xout kX, kY, kZ
endop
giTR_808_PlaybackVolumeAdjustment = 1
giTR_808_PlaybackReverbAdjustment = 1
giTR_808_BassDrum_Level = 1
giTR_808_BassDrum_Decay = 1
giTR_808_BassDrum_Tune init 0
giTR_808_BassDrum_HighPassCutoffFrequencyHz = 80
giTR_808_BassDrum_LowPassCutoffFrequencyHz = 1000
giTR_808_SnareDrum_Level = 1
giTR_808_SnareDrum_Decay = 1
giTR_808_SnareDrum_Tune init 0
giTR_808_OpenHighHat_Level = 1
giTR_808_OpenHighHat_Decay = 1
giTR_808_OpenHighHat_Tune init 0
giTR_808_ClosedHighHat_Level = 1
giTR_808_ClosedHighHat_Decay = 1
giTR_808_ClosedHighHat_Tune init 0
giTR_808_HighHat_HighPassCutoffFrequencyHz = 20000
giTR_808_NoteIndex[] init 6
giTR_808_Sine_TableNumber = ftgen(0, 0, 1024, 10, 1)
giTR_808_Cosine_TableNumber = ftgen(0, 0, 65536, 9, 1, 1, 90)
giTR_808_SampleCacheLongestDuration = 10.1
giTR_808_SampleCacheNoteNumbers[] fillarray 37,
39,
40,
42,
44,
46,
49,
51,
54,
56,
58,
61,
63,
66,
68,
70
giTR_808_SampleCacheTableNumbers[] init lenarray(giTR_808_SampleCacheNoteNumbers)
giTR_808_SampleCacheLength init sr * giTR_808_SampleCacheLongestDuration
giTR_808_SampleCacheTableLength = 2
while (giTR_808_SampleCacheTableLength < giTR_808_SampleCacheLength) do
giTR_808_SampleCacheTableLength *= 2
od
ii = 0
while (ii < lenarray(giTR_808_SampleCacheNoteNumbers)) do
giTR_808_SampleCacheTableNumbers[ii] = ftgen(0, 0, giTR_808_SampleCacheTableLength, 2, 0)
ii += 1
od
instr FillSampleCache_TR_808
iInsrumentNumber = 4
ii = 0
while (ii < lenarray(giTR_808_SampleCacheNoteNumbers)) do
prints("Filling TR_808 sample cache for note %d\\n", giTR_808_SampleCacheNoteNumbers[ii])
scoreline_i(sprintf(
"i %d 0 %f %d %d 127",
iInsrumentNumber,
0.001,
5,
giTR_808_SampleCacheNoteNumbers[ii]))
ii += 1
od
turnoff
endin
scoreline_i("i \\"FillSampleCache_TR_808\\" 0 -1")
#ifdef IS_GENERATING_JSON
gSPluginUuids[0][0] = "e274e9138ef048c4ba9c4d42e836c85c"
instr Json_4
SJsonFile = sprintf("json/%s.0.json", "e274e9138ef048c4ba9c4d42e836c85c")
fprints(SJsonFile, "{")
fprints(SJsonFile, sprintf("\\"instanceName\\":\\"%s\\"", "-"))
fprints(SJsonFile, "}")
turnoff
endin
#end
instr 4
iOrcInstanceIndex = 0
iEventType = p4
if (iEventType == 4) then
iCcIndex = p5
iCcValue = p6
if (strcmp(gSCcInfo_TR_808[iCcIndex][$CC_INFO_TYPE], "string") == 0) then
gSCcValues_TR_808[0][iCcIndex] = strget(iCcValue)
else
giCcValues_TR_808[0][iCcIndex] = iCcValue
gkCcValues_TR_808[0][iCcIndex] = iCcValue
endif
turnoff
elseif (iEventType == 1 || iEventType == 5) then
iNoteNumber = p5
aOut init 0
iSampleCacheIndex = -1
ii = 0
while (ii < lenarray(giTR_808_SampleCacheNoteNumbers)) do
if (iNoteNumber == giTR_808_SampleCacheNoteNumbers[ii]) then
iSampleCacheIndex = ii
ii = lenarray(giTR_808_SampleCacheNoteNumbers)
endif
ii += 1
od
if (iSampleCacheIndex == -1 || iSampleCacheIndex >= lenarray(giTR_808_SampleCacheNoteNumbers)) then
turnoff
endif
iNoteDuration init p3
if (iNoteNumber == 37) then
iNoteDuration = 2 * giTR_808_BassDrum_Decay
xtratim(0.1)
elseif (iNoteNumber == 39) then
iNoteDuration = 0.3 * giTR_808_SnareDrum_Decay
elseif (iNoteNumber == 51) then
iNoteDuration = 0.5 * giTR_808_OpenHighHat_Decay
xtratim(0.1)
elseif (iNoteNumber == 49) then
if (iEventType == 1) then
iNoteDuration = limit(0.088 * giTR_808_ClosedHighHat_Decay, 0.1, 10)
else
iNoteDuration = 10
endif
xtratim(0.1)
endif
aAmpEnvelope init 1
if (iEventType == 1) then
if (iNoteNumber == 49) then
aAmpEnvelope = expsega(1, iNoteDuration, 0.001, 1, 0.001)
endif
endif
p3 = iNoteDuration
if (iEventType == 5) then
if (iNoteNumber == 37) then
kmul = transeg:k(0.2, iNoteDuration * 0.5, -15, 0.01, iNoteDuration * 0.5, 0, 0)
kbend = transeg:k(0.5, 1.2, -4, 0, 1, 0, 0)
asig = gbuzz(0.5, 50 * octave:k(giTR_808_BassDrum_Tune) * semitone:k(kbend), 20, 1, kmul,
giTR_808_Cosine_TableNumber)
aenv = transeg:a(1, iNoteDuration - 0.004, -6, 0)
aatt = linseg:a(0, 0.004, 1)
asig = asig * aenv * aatt
aenv = linseg:a(1, 0.07, 0)
acps = expsega(400, 0.07, 0.001, 1, 0.001)
aimp = oscili(aenv, acps * octave(giTR_808_BassDrum_Tune * 0.25), giTR_808_Sine_TableNumber)
aOut = ((asig * 0.5) + (aimp * 0.35)) * giTR_808_BassDrum_Level
aOut = atone(aOut, k(giTR_808_BassDrum_HighPassCutoffFrequencyHz))
aOut = tone(aOut, k(giTR_808_BassDrum_LowPassCutoffFrequencyHz))
elseif (iNoteNumber == 39) then
ifrq = 342
iNseDur = iNoteDuration
iPchDur = 0.1 * giTR_808_SnareDrum_Decay
aenv1 = expseg(1, iPchDur, 0.0001, iNoteDuration - iPchDur, 0.0001)
apitch1 = oscili(1, ifrq * octave(giTR_808_SnareDrum_Tune), giTR_808_Sine_TableNumber)
apitch2 = oscili(0.25, ifrq * 0.5 * octave(giTR_808_SnareDrum_Tune), giTR_808_Sine_TableNumber)
apitch = (apitch1 + apitch2) * 0.75
aenv2 = expon(1, iNoteDuration, 0.0005)
anoise = noise(0.75, 0)
anoise = butbp(anoise, 10000 * octave(giTR_808_SnareDrum_Tune), 10000)
anoise = buthp(anoise, 1000)
kcf = expseg(5000, 0.1, 3000, iNoteDuration - 0.2, 3000)
anoise = butlp(anoise, kcf)
aOut = ((apitch * aenv1) + (anoise * aenv2)) * giTR_808_SnareDrum_Level
elseif (iNoteNumber == 51) then
kFrq1 = 296 * octave(giTR_808_OpenHighHat_Tune)
kFrq2 = 285 * octave(giTR_808_OpenHighHat_Tune)
kFrq3 = 365 * octave(giTR_808_OpenHighHat_Tune)
kFrq4 = 348 * octave(giTR_808_OpenHighHat_Tune)
kFrq5 = 420 * octave(giTR_808_OpenHighHat_Tune)
kFrq6 = 835 * octave(giTR_808_OpenHighHat_Tune)
aenv = linseg(1, iNoteDuration - 0.05, 0.1, 0.05, 0)
ipw = 0.25
a1 = vco2(0.5, kFrq1, 2, ipw)
a2 = vco2(0.5, kFrq2, 2, ipw)
a3 = vco2(0.5, kFrq3, 2, ipw)
a4 = vco2(0.5, kFrq4, 2, ipw)
a5 = vco2(0.5, kFrq5, 2, ipw)
a6 = vco2(0.5, kFrq6, 2, ipw)
amix = sum(a1, a2, a3, a4, a5, a6)
amix = reson(amix, 5000 * octave(giTR_808_OpenHighHat_Tune), 5000, 1)
amix = buthp(amix, 5000)
amix = buthp(amix, 5000)
amix = (amix * aenv)
aenv = linseg(1, iNoteDuration - 0.05, 0.1, 0.05, 0)
anoise = noise(0.8, 0)
kcf = expseg(20000, 0.7, 9000, iNoteDuration - 0.1, 9000)
anoise = butlp(anoise, kcf)
anoise = buthp(anoise, 8000)
anoise = anoise * aenv
aOut = (amix + anoise) * giTR_808_OpenHighHat_Level * 0.55
aOut = atone(aOut, k(giTR_808_HighHat_HighPassCutoffFrequencyHz))
elseif (iNoteNumber == 49) then
kFrq1 = 296 * octave(giTR_808_ClosedHighHat_Tune)
kFrq2 = 285 * octave(giTR_808_ClosedHighHat_Tune)
kFrq3 = 365 * octave(giTR_808_ClosedHighHat_Tune)
kFrq4 = 348 * octave(giTR_808_ClosedHighHat_Tune)
kFrq5 = 420 * octave(giTR_808_ClosedHighHat_Tune)
kFrq6 = 835 * octave(giTR_808_ClosedHighHat_Tune)
ipw = 0.25
a1 = vco2(0.5, kFrq1, 2, ipw)
a2 = vco2(0.5, kFrq2, 2, ipw)
a3 = vco2(0.5, kFrq3, 2, ipw)
a4 = vco2(0.5, kFrq4, 2, ipw)
a5 = vco2(0.5, kFrq5, 2, ipw)
a6 = vco2(0.5, kFrq6, 2, ipw)
amix = sum(a1, a2, a3, a4, a5, a6)
amix = reson(amix, 5000 * octave(giTR_808_ClosedHighHat_Tune), 5000, 1)
amix = buthp(amix, 5000)
amix = buthp(amix, 5000)
anoise = noise(0.8, 0)
kcf = expseg(20000, 0.7, 9000, iNoteDuration - 0.1, 9000)
anoise = butlp(anoise, kcf)
anoise = buthp(anoise, 8000)
aOut = (amix + anoise) * giTR_808_ClosedHighHat_Level * 0.55
aOut = atone(aOut, k(giTR_808_HighHat_HighPassCutoffFrequencyHz))
endif
kPass init 0
kUnused = tablewa(giTR_808_SampleCacheTableNumbers[iSampleCacheIndex], aOut, kPass * ksmps)
kPass += 1
elseif (iEventType == 1) then
iVelocity = p6
iAmp = ampdbfs(((iVelocity / 127) - 1) * 30)
kPass init 0
aOut = tab:a(a(kPass * ksmps), giTR_808_SampleCacheTableNumbers[iSampleCacheIndex]) * aAmpEnvelope * iAmp
kPass += 1
if (giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionEnabled] == 1) then
iPositionMaxAmpWhenClose = giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionMaxAmpWhenClose]
iPositionReferenceDistance = giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionReferenceDistance]
iPositionRolloffFactor = giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionRolloffFactor]
iX, iY, iZ dEd_position giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionOpcodeComboBoxIndex]
iX *= giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionXScale]
iY *= giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionYScale]
iZ *= giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionZScale]
iX += giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionXOffset]
iY += giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionYOffset]
iZ += giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionZOffset]
kX init iX
kY init iY
kZ init iZ
kPositionMaxAmpWhenClose init iPositionMaxAmpWhenClose
kPositionReferenceDistance init iPositionReferenceDistance
kPositionRolloffFactor init iPositionRolloffFactor
aDistance = AF_3D_Audio_SourceDistance_a(kX, kY, kZ)
aDistanceAmp = AF_3D_Audio_DistanceAttenuation:a(aDistance, kPositionReferenceDistance, kPositionRolloffFactor)
aDistanceAmp = min(aDistanceAmp, a(kPositionMaxAmpWhenClose))
aDistancedOut = aOut * aDistanceAmp
aAuxOut = aOut * min((aDistanceAmp * 3), a(0.5))
AF_3D_Audio_ChannelGains_XYZ(iX, iY, iZ)
a1 = a(gkAmbisonicChannelGains[0]) * aDistancedOut
a2 = a(gkAmbisonicChannelGains[1]) * aDistancedOut
a3 = a(gkAmbisonicChannelGains[2]) * aDistancedOut
a4 = a(gkAmbisonicChannelGains[3]) * aDistancedOut
else
a1 = aDistancedOut
a2 = 0
a3 = 0
a4 = 0
endif
chnset(a1, "0/0")
chnset(a2, "0/1")
chnset(a3, "0/2")
chnset(a4, "0/3")
chnset(aAuxOut, "0/4")
chnset(aAuxOut, "0/5")
#ifdef IS_GENERATING_JSON
if (giTR_808_NoteIndex[0] == 0) then
scoreline_i(sprintf("i \\"%s\\" 0 0", "Json_4"))
endif
giTR_808_NoteIndex[0] = giTR_808_NoteIndex[0] + 1
SJsonFile = sprintf("json/%s.%d.json", "e274e9138ef048c4ba9c4d42e836c85c", giTR_808_NoteIndex[0])
fprints(SJsonFile, "{\\"note\\":{\\"onTime\\":%.3f", times())
if (giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionEnabled] == 1) then
fprints(SJsonFile, ",\\"xyz\\":[%.3f,%.3f,%.3f]", iX, iY, iZ)
endif
fprints(SJsonFile, "}}")
ficlose(SJsonFile)
#end
endif
endif
end:
endin
instr Preallocate_4
ii = 0
while (ii < giPresetUuidPreallocationCount[0]) do
scoreline_i(sprintf("i %d.%.3d 0 .1 %d 63 63", 4, ii, 3))
ii += 1
od
turnoff
endin
scoreline_i(sprintf("i \\"Preallocate_%d\\" 0 -1", 4))
#ifndef MIX_CHANNEL_COUNT
#ifdef INTERNAL_CHANNEL_COUNT
#define MIX_CHANNEL_COUNT # $INTERNAL_CHANNEL_COUNT #
#else
#define MIX_CHANNEL_COUNT # 6 #
#endif
#endif
ii = 0
while (ii < $MIX_CHANNEL_COUNT) do
chn_a(sprintf("%s/%d", "1", ii), 2)
ii += 1
od
#ifdef IS_GENERATING_JSON
gSPluginUuids[1][0] = "8aac7747b6b44366b1080319e34a8616"
instr Json_5
SJsonFile = sprintf("json/%s.0.json", "8aac7747b6b44366b1080319e34a8616")
fprints(SJsonFile, "{")
fprints(SJsonFile, sprintf("\\"instanceName\\":\\"%s\\"", "-"))
fprints(SJsonFile, "}")
turnoff
endin
#end
instr 5
iOrcInstanceIndex = 1
iEventType = p4
if (iEventType == 4) then
iCcIndex = p5
iCcValue = p6
if (strcmp(gSCcInfo_TR_808[iCcIndex][$CC_INFO_TYPE], "string") == 0) then
gSCcValues_TR_808[1][iCcIndex] = strget(iCcValue)
else
giCcValues_TR_808[1][iCcIndex] = iCcValue
gkCcValues_TR_808[1][iCcIndex] = iCcValue
endif
turnoff
elseif (iEventType == 1 || iEventType == 5) then
iNoteNumber = p5
aOut init 0
iSampleCacheIndex = -1
ii = 0
while (ii < lenarray(giTR_808_SampleCacheNoteNumbers)) do
if (iNoteNumber == giTR_808_SampleCacheNoteNumbers[ii]) then
iSampleCacheIndex = ii
ii = lenarray(giTR_808_SampleCacheNoteNumbers)
endif
ii += 1
od
if (iSampleCacheIndex == -1 || iSampleCacheIndex >= lenarray(giTR_808_SampleCacheNoteNumbers)) then
turnoff
endif
iNoteDuration init p3
if (iNoteNumber == 37) then
iNoteDuration = 2 * giTR_808_BassDrum_Decay
xtratim(0.1)
elseif (iNoteNumber == 39) then
iNoteDuration = 0.3 * giTR_808_SnareDrum_Decay
elseif (iNoteNumber == 51) then
iNoteDuration = 0.5 * giTR_808_OpenHighHat_Decay
xtratim(0.1)
elseif (iNoteNumber == 49) then
if (iEventType == 1) then
iNoteDuration = limit(0.088 * giTR_808_ClosedHighHat_Decay, 0.1, 10)
else
iNoteDuration = 10
endif
xtratim(0.1)
endif
aAmpEnvelope init 1
if (iEventType == 1) then
if (iNoteNumber == 49) then
aAmpEnvelope = expsega(1, iNoteDuration, 0.001, 1, 0.001)
endif
endif
p3 = iNoteDuration
if (iEventType == 5) then
if (iNoteNumber == 37) then
kmul = transeg:k(0.2, iNoteDuration * 0.5, -15, 0.01, iNoteDuration * 0.5, 0, 0)
kbend = transeg:k(0.5, 1.2, -4, 0, 1, 0, 0)
asig = gbuzz(0.5, 50 * octave:k(giTR_808_BassDrum_Tune) * semitone:k(kbend), 20, 1, kmul,
giTR_808_Cosine_TableNumber)
aenv = transeg:a(1, iNoteDuration - 0.004, -6, 0)
aatt = linseg:a(0, 0.004, 1)
asig = asig * aenv * aatt
aenv = linseg:a(1, 0.07, 0)
acps = expsega(400, 0.07, 0.001, 1, 0.001)
aimp = oscili(aenv, acps * octave(giTR_808_BassDrum_Tune * 0.25), giTR_808_Sine_TableNumber)
aOut = ((asig * 0.5) + (aimp * 0.35)) * giTR_808_BassDrum_Level
aOut = atone(aOut, k(giTR_808_BassDrum_HighPassCutoffFrequencyHz))
aOut = tone(aOut, k(giTR_808_BassDrum_LowPassCutoffFrequencyHz))
elseif (iNoteNumber == 39) then
ifrq = 342
iNseDur = iNoteDuration
iPchDur = 0.1 * giTR_808_SnareDrum_Decay
aenv1 = expseg(1, iPchDur, 0.0001, iNoteDuration - iPchDur, 0.0001)
apitch1 = oscili(1, ifrq * octave(giTR_808_SnareDrum_Tune), giTR_808_Sine_TableNumber)
apitch2 = oscili(0.25, ifrq * 0.5 * octave(giTR_808_SnareDrum_Tune), giTR_808_Sine_TableNumber)
apitch = (apitch1 + apitch2) * 0.75
aenv2 = expon(1, iNoteDuration, 0.0005)
anoise = noise(0.75, 0)
anoise = butbp(anoise, 10000 * octave(giTR_808_SnareDrum_Tune), 10000)
anoise = buthp(anoise, 1000)
kcf = expseg(5000, 0.1, 3000, iNoteDuration - 0.2, 3000)
anoise = butlp(anoise, kcf)
aOut = ((apitch * aenv1) + (anoise * aenv2)) * giTR_808_SnareDrum_Level
elseif (iNoteNumber == 51) then
kFrq1 = 296 * octave(giTR_808_OpenHighHat_Tune)
kFrq2 = 285 * octave(giTR_808_OpenHighHat_Tune)
kFrq3 = 365 * octave(giTR_808_OpenHighHat_Tune)
kFrq4 = 348 * octave(giTR_808_OpenHighHat_Tune)
kFrq5 = 420 * octave(giTR_808_OpenHighHat_Tune)
kFrq6 = 835 * octave(giTR_808_OpenHighHat_Tune)
aenv = linseg(1, iNoteDuration - 0.05, 0.1, 0.05, 0)
ipw = 0.25
a1 = vco2(0.5, kFrq1, 2, ipw)
a2 = vco2(0.5, kFrq2, 2, ipw)
a3 = vco2(0.5, kFrq3, 2, ipw)
a4 = vco2(0.5, kFrq4, 2, ipw)
a5 = vco2(0.5, kFrq5, 2, ipw)
a6 = vco2(0.5, kFrq6, 2, ipw)
amix = sum(a1, a2, a3, a4, a5, a6)
amix = reson(amix, 5000 * octave(giTR_808_OpenHighHat_Tune), 5000, 1)
amix = buthp(amix, 5000)
amix = buthp(amix, 5000)
amix = (amix * aenv)
aenv = linseg(1, iNoteDuration - 0.05, 0.1, 0.05, 0)
anoise = noise(0.8, 0)
kcf = expseg(20000, 0.7, 9000, iNoteDuration - 0.1, 9000)
anoise = butlp(anoise, kcf)
anoise = buthp(anoise, 8000)
anoise = anoise * aenv
aOut = (amix + anoise) * giTR_808_OpenHighHat_Level * 0.55
aOut = atone(aOut, k(giTR_808_HighHat_HighPassCutoffFrequencyHz))
elseif (iNoteNumber == 49) then
kFrq1 = 296 * octave(giTR_808_ClosedHighHat_Tune)
kFrq2 = 285 * octave(giTR_808_ClosedHighHat_Tune)
kFrq3 = 365 * octave(giTR_808_ClosedHighHat_Tune)
kFrq4 = 348 * octave(giTR_808_ClosedHighHat_Tune)
kFrq5 = 420 * octave(giTR_808_ClosedHighHat_Tune)
kFrq6 = 835 * octave(giTR_808_ClosedHighHat_Tune)
ipw = 0.25
a1 = vco2(0.5, kFrq1, 2, ipw)
a2 = vco2(0.5, kFrq2, 2, ipw)
a3 = vco2(0.5, kFrq3, 2, ipw)
a4 = vco2(0.5, kFrq4, 2, ipw)
a5 = vco2(0.5, kFrq5, 2, ipw)
a6 = vco2(0.5, kFrq6, 2, ipw)
amix = sum(a1, a2, a3, a4, a5, a6)
amix = reson(amix, 5000 * octave(giTR_808_ClosedHighHat_Tune), 5000, 1)
amix = buthp(amix, 5000)
amix = buthp(amix, 5000)
anoise = noise(0.8, 0)
kcf = expseg(20000, 0.7, 9000, iNoteDuration - 0.1, 9000)
anoise = butlp(anoise, kcf)
anoise = buthp(anoise, 8000)
aOut = (amix + anoise) * giTR_808_ClosedHighHat_Level * 0.55
aOut = atone(aOut, k(giTR_808_HighHat_HighPassCutoffFrequencyHz))
endif
kPass init 0
kUnused = tablewa(giTR_808_SampleCacheTableNumbers[iSampleCacheIndex], aOut, kPass * ksmps)
kPass += 1
elseif (iEventType == 1) then
iVelocity = p6
iAmp = ampdbfs(((iVelocity / 127) - 1) * 30)
kPass init 0
aOut = tab:a(a(kPass * ksmps), giTR_808_SampleCacheTableNumbers[iSampleCacheIndex]) * aAmpEnvelope * iAmp
kPass += 1
if (giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionEnabled] == 1) then
iPositionMaxAmpWhenClose = giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionMaxAmpWhenClose]
iPositionReferenceDistance = giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionReferenceDistance]
iPositionRolloffFactor = giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionRolloffFactor]
iX, iY, iZ dEd_position giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionOpcodeComboBoxIndex]
iX *= giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionXScale]
iY *= giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionYScale]
iZ *= giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionZScale]
iX += giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionXOffset]
iY += giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionYOffset]
iZ += giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionZOffset]
kX init iX
kY init iY
kZ init iZ
kPositionMaxAmpWhenClose init iPositionMaxAmpWhenClose
kPositionReferenceDistance init iPositionReferenceDistance
kPositionRolloffFactor init iPositionRolloffFactor
aDistance = AF_3D_Audio_SourceDistance_a(kX, kY, kZ)
aDistanceAmp = AF_3D_Audio_DistanceAttenuation:a(aDistance, kPositionReferenceDistance, kPositionRolloffFactor)
aDistanceAmp = min(aDistanceAmp, a(kPositionMaxAmpWhenClose))
aDistancedOut = aOut * aDistanceAmp
aAuxOut = aOut * min((aDistanceAmp * 3), a(0.5))
AF_3D_Audio_ChannelGains_XYZ(iX, iY, iZ)
a1 = a(gkAmbisonicChannelGains[0]) * aDistancedOut
a2 = a(gkAmbisonicChannelGains[1]) * aDistancedOut
a3 = a(gkAmbisonicChannelGains[2]) * aDistancedOut
a4 = a(gkAmbisonicChannelGains[3]) * aDistancedOut
else
a1 = aDistancedOut
a2 = 0
a3 = 0
a4 = 0
endif
chnset(a1, "1/0")
chnset(a2, "1/1")
chnset(a3, "1/2")
chnset(a4, "1/3")
chnset(aAuxOut, "1/4")
chnset(aAuxOut, "1/5")
#ifdef IS_GENERATING_JSON
if (giTR_808_NoteIndex[1] == 0) then
scoreline_i(sprintf("i \\"%s\\" 0 0", "Json_5"))
endif
giTR_808_NoteIndex[1] = giTR_808_NoteIndex[1] + 1
SJsonFile = sprintf("json/%s.%d.json", "8aac7747b6b44366b1080319e34a8616", giTR_808_NoteIndex[1])
fprints(SJsonFile, "{\\"note\\":{\\"onTime\\":%.3f", times())
if (giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionEnabled] == 1) then
fprints(SJsonFile, ",\\"xyz\\":[%.3f,%.3f,%.3f]", iX, iY, iZ)
endif
fprints(SJsonFile, "}}")
ficlose(SJsonFile)
#end
endif
endif
end:
endin
instr Preallocate_5
ii = 0
while (ii < giPresetUuidPreallocationCount[1]) do
scoreline_i(sprintf("i %d.%.3d 0 .1 %d 63 63", 5, ii, 3))
ii += 1
od
turnoff
endin
scoreline_i(sprintf("i \\"Preallocate_%d\\" 0 -1", 5))
#ifndef MIX_CHANNEL_COUNT
#ifdef INTERNAL_CHANNEL_COUNT
#define MIX_CHANNEL_COUNT # $INTERNAL_CHANNEL_COUNT #
#else
#define MIX_CHANNEL_COUNT # 6 #
#endif
#endif
ii = 0
while (ii < $MIX_CHANNEL_COUNT) do
chn_a(sprintf("%s/%d", "2", ii), 2)
ii += 1
od
#ifdef IS_GENERATING_JSON
gSPluginUuids[2][0] = "8e12ccc0dff44a4283211d553199a8cd"
instr Json_6
SJsonFile = sprintf("json/%s.0.json", "8e12ccc0dff44a4283211d553199a8cd")
fprints(SJsonFile, "{")
fprints(SJsonFile, sprintf("\\"instanceName\\":\\"%s\\"", "-"))
fprints(SJsonFile, "}")
turnoff
endin
#end
instr 6
iOrcInstanceIndex = 2
iEventType = p4
if (iEventType == 4) then
iCcIndex = p5
iCcValue = p6
if (strcmp(gSCcInfo_TR_808[iCcIndex][$CC_INFO_TYPE], "string") == 0) then
gSCcValues_TR_808[2][iCcIndex] = strget(iCcValue)
else
giCcValues_TR_808[2][iCcIndex] = iCcValue
gkCcValues_TR_808[2][iCcIndex] = iCcValue
endif
turnoff
elseif (iEventType == 1 || iEventType == 5) then
iNoteNumber = p5
aOut init 0
iSampleCacheIndex = -1
ii = 0
while (ii < lenarray(giTR_808_SampleCacheNoteNumbers)) do
if (iNoteNumber == giTR_808_SampleCacheNoteNumbers[ii]) then
iSampleCacheIndex = ii
ii = lenarray(giTR_808_SampleCacheNoteNumbers)
endif
ii += 1
od
if (iSampleCacheIndex == -1 || iSampleCacheIndex >= lenarray(giTR_808_SampleCacheNoteNumbers)) then
turnoff
endif
iNoteDuration init p3
if (iNoteNumber == 37) then
iNoteDuration = 2 * giTR_808_BassDrum_Decay
xtratim(0.1)
elseif (iNoteNumber == 39) then
iNoteDuration = 0.3 * giTR_808_SnareDrum_Decay
elseif (iNoteNumber == 51) then
iNoteDuration = 0.5 * giTR_808_OpenHighHat_Decay
xtratim(0.1)
elseif (iNoteNumber == 49) then
if (iEventType == 1) then
iNoteDuration = limit(0.088 * giTR_808_ClosedHighHat_Decay, 0.1, 10)
else
iNoteDuration = 10
endif
xtratim(0.1)
endif
aAmpEnvelope init 1
if (iEventType == 1) then
if (iNoteNumber == 49) then
aAmpEnvelope = expsega(1, iNoteDuration, 0.001, 1, 0.001)
endif
endif
p3 = iNoteDuration
if (iEventType == 5) then
if (iNoteNumber == 37) then
kmul = transeg:k(0.2, iNoteDuration * 0.5, -15, 0.01, iNoteDuration * 0.5, 0, 0)
kbend = transeg:k(0.5, 1.2, -4, 0, 1, 0, 0)
asig = gbuzz(0.5, 50 * octave:k(giTR_808_BassDrum_Tune) * semitone:k(kbend), 20, 1, kmul,
giTR_808_Cosine_TableNumber)
aenv = transeg:a(1, iNoteDuration - 0.004, -6, 0)
aatt = linseg:a(0, 0.004, 1)
asig = asig * aenv * aatt
aenv = linseg:a(1, 0.07, 0)
acps = expsega(400, 0.07, 0.001, 1, 0.001)
aimp = oscili(aenv, acps * octave(giTR_808_BassDrum_Tune * 0.25), giTR_808_Sine_TableNumber)
aOut = ((asig * 0.5) + (aimp * 0.35)) * giTR_808_BassDrum_Level
aOut = atone(aOut, k(giTR_808_BassDrum_HighPassCutoffFrequencyHz))
aOut = tone(aOut, k(giTR_808_BassDrum_LowPassCutoffFrequencyHz))
elseif (iNoteNumber == 39) then
ifrq = 342
iNseDur = iNoteDuration
iPchDur = 0.1 * giTR_808_SnareDrum_Decay
aenv1 = expseg(1, iPchDur, 0.0001, iNoteDuration - iPchDur, 0.0001)
apitch1 = oscili(1, ifrq * octave(giTR_808_SnareDrum_Tune), giTR_808_Sine_TableNumber)
apitch2 = oscili(0.25, ifrq * 0.5 * octave(giTR_808_SnareDrum_Tune), giTR_808_Sine_TableNumber)
apitch = (apitch1 + apitch2) * 0.75
aenv2 = expon(1, iNoteDuration, 0.0005)
anoise = noise(0.75, 0)
anoise = butbp(anoise, 10000 * octave(giTR_808_SnareDrum_Tune), 10000)
anoise = buthp(anoise, 1000)
kcf = expseg(5000, 0.1, 3000, iNoteDuration - 0.2, 3000)
anoise = butlp(anoise, kcf)
aOut = ((apitch * aenv1) + (anoise * aenv2)) * giTR_808_SnareDrum_Level
elseif (iNoteNumber == 51) then
kFrq1 = 296 * octave(giTR_808_OpenHighHat_Tune)
kFrq2 = 285 * octave(giTR_808_OpenHighHat_Tune)
kFrq3 = 365 * octave(giTR_808_OpenHighHat_Tune)
kFrq4 = 348 * octave(giTR_808_OpenHighHat_Tune)
kFrq5 = 420 * octave(giTR_808_OpenHighHat_Tune)
kFrq6 = 835 * octave(giTR_808_OpenHighHat_Tune)
aenv = linseg(1, iNoteDuration - 0.05, 0.1, 0.05, 0)
ipw = 0.25
a1 = vco2(0.5, kFrq1, 2, ipw)
a2 = vco2(0.5, kFrq2, 2, ipw)
a3 = vco2(0.5, kFrq3, 2, ipw)
a4 = vco2(0.5, kFrq4, 2, ipw)
a5 = vco2(0.5, kFrq5, 2, ipw)
a6 = vco2(0.5, kFrq6, 2, ipw)
amix = sum(a1, a2, a3, a4, a5, a6)
amix = reson(amix, 5000 * octave(giTR_808_OpenHighHat_Tune), 5000, 1)
amix = buthp(amix, 5000)
amix = buthp(amix, 5000)
amix = (amix * aenv)
aenv = linseg(1, iNoteDuration - 0.05, 0.1, 0.05, 0)
anoise = noise(0.8, 0)
kcf = expseg(20000, 0.7, 9000, iNoteDuration - 0.1, 9000)
anoise = butlp(anoise, kcf)
anoise = buthp(anoise, 8000)
anoise = anoise * aenv
aOut = (amix + anoise) * giTR_808_OpenHighHat_Level * 0.55
aOut = atone(aOut, k(giTR_808_HighHat_HighPassCutoffFrequencyHz))
elseif (iNoteNumber == 49) then
kFrq1 = 296 * octave(giTR_808_ClosedHighHat_Tune)
kFrq2 = 285 * octave(giTR_808_ClosedHighHat_Tune)
kFrq3 = 365 * octave(giTR_808_ClosedHighHat_Tune)
kFrq4 = 348 * octave(giTR_808_ClosedHighHat_Tune)
kFrq5 = 420 * octave(giTR_808_ClosedHighHat_Tune)
kFrq6 = 835 * octave(giTR_808_ClosedHighHat_Tune)
ipw = 0.25
a1 = vco2(0.5, kFrq1, 2, ipw)
a2 = vco2(0.5, kFrq2, 2, ipw)
a3 = vco2(0.5, kFrq3, 2, ipw)
a4 = vco2(0.5, kFrq4, 2, ipw)
a5 = vco2(0.5, kFrq5, 2, ipw)
a6 = vco2(0.5, kFrq6, 2, ipw)
amix = sum(a1, a2, a3, a4, a5, a6)
amix = reson(amix, 5000 * octave(giTR_808_ClosedHighHat_Tune), 5000, 1)
amix = buthp(amix, 5000)
amix = buthp(amix, 5000)
anoise = noise(0.8, 0)
kcf = expseg(20000, 0.7, 9000, iNoteDuration - 0.1, 9000)
anoise = butlp(anoise, kcf)
anoise = buthp(anoise, 8000)
aOut = (amix + anoise) * giTR_808_ClosedHighHat_Level * 0.55
aOut = atone(aOut, k(giTR_808_HighHat_HighPassCutoffFrequencyHz))
endif
kPass init 0
kUnused = tablewa(giTR_808_SampleCacheTableNumbers[iSampleCacheIndex], aOut, kPass * ksmps)
kPass += 1
elseif (iEventType == 1) then
iVelocity = p6
iAmp = ampdbfs(((iVelocity / 127) - 1) * 30)
kPass init 0
aOut = tab:a(a(kPass * ksmps), giTR_808_SampleCacheTableNumbers[iSampleCacheIndex]) * aAmpEnvelope * iAmp
kPass += 1
if (giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionEnabled] == 1) then
iPositionMaxAmpWhenClose = giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionMaxAmpWhenClose]
iPositionReferenceDistance = giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionReferenceDistance]
iPositionRolloffFactor = giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionRolloffFactor]
iX, iY, iZ dEd_position giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionOpcodeComboBoxIndex]
iX *= giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionXScale]
iY *= giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionYScale]
iZ *= giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionZScale]
iX += giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionXOffset]
iY += giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionYOffset]
iZ += giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionZOffset]
kX init iX
kY init iY
kZ init iZ
kPositionMaxAmpWhenClose init iPositionMaxAmpWhenClose
kPositionReferenceDistance init iPositionReferenceDistance
kPositionRolloffFactor init iPositionRolloffFactor
aDistance = AF_3D_Audio_SourceDistance_a(kX, kY, kZ)
aDistanceAmp = AF_3D_Audio_DistanceAttenuation:a(aDistance, kPositionReferenceDistance, kPositionRolloffFactor)
aDistanceAmp = min(aDistanceAmp, a(kPositionMaxAmpWhenClose))
aDistancedOut = aOut * aDistanceAmp
aAuxOut = aOut * min((aDistanceAmp * 3), a(0.5))
AF_3D_Audio_ChannelGains_XYZ(iX, iY, iZ)
a1 = a(gkAmbisonicChannelGains[0]) * aDistancedOut
a2 = a(gkAmbisonicChannelGains[1]) * aDistancedOut
a3 = a(gkAmbisonicChannelGains[2]) * aDistancedOut
a4 = a(gkAmbisonicChannelGains[3]) * aDistancedOut
else
a1 = aDistancedOut
a2 = 0
a3 = 0
a4 = 0
endif
chnset(a1, "2/0")
chnset(a2, "2/1")
chnset(a3, "2/2")
chnset(a4, "2/3")
chnset(aAuxOut, "2/4")
chnset(aAuxOut, "2/5")
#ifdef IS_GENERATING_JSON
if (giTR_808_NoteIndex[2] == 0) then
scoreline_i(sprintf("i \\"%s\\" 0 0", "Json_6"))
endif
giTR_808_NoteIndex[2] = giTR_808_NoteIndex[2] + 1
SJsonFile = sprintf("json/%s.%d.json", "8e12ccc0dff44a4283211d553199a8cd", giTR_808_NoteIndex[2])
fprints(SJsonFile, "{\\"note\\":{\\"onTime\\":%.3f", times())
if (giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionEnabled] == 1) then
fprints(SJsonFile, ",\\"xyz\\":[%.3f,%.3f,%.3f]", iX, iY, iZ)
endif
fprints(SJsonFile, "}}")
ficlose(SJsonFile)
#end
endif
endif
end:
endin
instr Preallocate_6
ii = 0
while (ii < giPresetUuidPreallocationCount[2]) do
scoreline_i(sprintf("i %d.%.3d 0 .1 %d 63 63", 6, ii, 3))
ii += 1
od
turnoff
endin
scoreline_i(sprintf("i \\"Preallocate_%d\\" 0 -1", 6))
#ifndef MIX_CHANNEL_COUNT
#ifdef INTERNAL_CHANNEL_COUNT
#define MIX_CHANNEL_COUNT # $INTERNAL_CHANNEL_COUNT #
#else
#define MIX_CHANNEL_COUNT # 6 #
#endif
#endif
ii = 0
while (ii < $MIX_CHANNEL_COUNT) do
chn_a(sprintf("%s/%d", "3", ii), 2)
ii += 1
od
#ifdef IS_GENERATING_JSON
gSPluginUuids[3][0] = "6aecd056fd3f4c6d9a108de531c48ddf"
instr Json_7
SJsonFile = sprintf("json/%s.0.json", "6aecd056fd3f4c6d9a108de531c48ddf")
fprints(SJsonFile, "{")
fprints(SJsonFile, sprintf("\\"instanceName\\":\\"%s\\"", "-"))
fprints(SJsonFile, "}")
turnoff
endin
#end
instr 7
iOrcInstanceIndex = 3
iEventType = p4
if (iEventType == 4) then
iCcIndex = p5
iCcValue = p6
if (strcmp(gSCcInfo_TR_808[iCcIndex][$CC_INFO_TYPE], "string") == 0) then
gSCcValues_TR_808[3][iCcIndex] = strget(iCcValue)
else
giCcValues_TR_808[3][iCcIndex] = iCcValue
gkCcValues_TR_808[3][iCcIndex] = iCcValue
endif
turnoff
elseif (iEventType == 1 || iEventType == 5) then
iNoteNumber = p5
aOut init 0
iSampleCacheIndex = -1
ii = 0
while (ii < lenarray(giTR_808_SampleCacheNoteNumbers)) do
if (iNoteNumber == giTR_808_SampleCacheNoteNumbers[ii]) then
iSampleCacheIndex = ii
ii = lenarray(giTR_808_SampleCacheNoteNumbers)
endif
ii += 1
od
if (iSampleCacheIndex == -1 || iSampleCacheIndex >= lenarray(giTR_808_SampleCacheNoteNumbers)) then
turnoff
endif
iNoteDuration init p3
if (iNoteNumber == 37) then
iNoteDuration = 2 * giTR_808_BassDrum_Decay
xtratim(0.1)
elseif (iNoteNumber == 39) then
iNoteDuration = 0.3 * giTR_808_SnareDrum_Decay
elseif (iNoteNumber == 51) then
iNoteDuration = 0.5 * giTR_808_OpenHighHat_Decay
xtratim(0.1)
elseif (iNoteNumber == 49) then
if (iEventType == 1) then
iNoteDuration = limit(0.088 * giTR_808_ClosedHighHat_Decay, 0.1, 10)
else
iNoteDuration = 10
endif
xtratim(0.1)
endif
aAmpEnvelope init 1
if (iEventType == 1) then
if (iNoteNumber == 49) then
aAmpEnvelope = expsega(1, iNoteDuration, 0.001, 1, 0.001)
endif
endif
p3 = iNoteDuration
if (iEventType == 5) then
if (iNoteNumber == 37) then
kmul = transeg:k(0.2, iNoteDuration * 0.5, -15, 0.01, iNoteDuration * 0.5, 0, 0)
kbend = transeg:k(0.5, 1.2, -4, 0, 1, 0, 0)
asig = gbuzz(0.5, 50 * octave:k(giTR_808_BassDrum_Tune) * semitone:k(kbend), 20, 1, kmul,
giTR_808_Cosine_TableNumber)
aenv = transeg:a(1, iNoteDuration - 0.004, -6, 0)
aatt = linseg:a(0, 0.004, 1)
asig = asig * aenv * aatt
aenv = linseg:a(1, 0.07, 0)
acps = expsega(400, 0.07, 0.001, 1, 0.001)
aimp = oscili(aenv, acps * octave(giTR_808_BassDrum_Tune * 0.25), giTR_808_Sine_TableNumber)
aOut = ((asig * 0.5) + (aimp * 0.35)) * giTR_808_BassDrum_Level
aOut = atone(aOut, k(giTR_808_BassDrum_HighPassCutoffFrequencyHz))
aOut = tone(aOut, k(giTR_808_BassDrum_LowPassCutoffFrequencyHz))
elseif (iNoteNumber == 39) then
ifrq = 342
iNseDur = iNoteDuration
iPchDur = 0.1 * giTR_808_SnareDrum_Decay
aenv1 = expseg(1, iPchDur, 0.0001, iNoteDuration - iPchDur, 0.0001)
apitch1 = oscili(1, ifrq * octave(giTR_808_SnareDrum_Tune), giTR_808_Sine_TableNumber)
apitch2 = oscili(0.25, ifrq * 0.5 * octave(giTR_808_SnareDrum_Tune), giTR_808_Sine_TableNumber)
apitch = (apitch1 + apitch2) * 0.75
aenv2 = expon(1, iNoteDuration, 0.0005)
anoise = noise(0.75, 0)
anoise = butbp(anoise, 10000 * octave(giTR_808_SnareDrum_Tune), 10000)
anoise = buthp(anoise, 1000)
kcf = expseg(5000, 0.1, 3000, iNoteDuration - 0.2, 3000)
anoise = butlp(anoise, kcf)
aOut = ((apitch * aenv1) + (anoise * aenv2)) * giTR_808_SnareDrum_Level
elseif (iNoteNumber == 51) then
kFrq1 = 296 * octave(giTR_808_OpenHighHat_Tune)
kFrq2 = 285 * octave(giTR_808_OpenHighHat_Tune)
kFrq3 = 365 * octave(giTR_808_OpenHighHat_Tune)
kFrq4 = 348 * octave(giTR_808_OpenHighHat_Tune)
kFrq5 = 420 * octave(giTR_808_OpenHighHat_Tune)
kFrq6 = 835 * octave(giTR_808_OpenHighHat_Tune)
aenv = linseg(1, iNoteDuration - 0.05, 0.1, 0.05, 0)
ipw = 0.25
a1 = vco2(0.5, kFrq1, 2, ipw)
a2 = vco2(0.5, kFrq2, 2, ipw)
a3 = vco2(0.5, kFrq3, 2, ipw)
a4 = vco2(0.5, kFrq4, 2, ipw)
a5 = vco2(0.5, kFrq5, 2, ipw)
a6 = vco2(0.5, kFrq6, 2, ipw)
amix = sum(a1, a2, a3, a4, a5, a6)
amix = reson(amix, 5000 * octave(giTR_808_OpenHighHat_Tune), 5000, 1)
amix = buthp(amix, 5000)
amix = buthp(amix, 5000)
amix = (amix * aenv)
aenv = linseg(1, iNoteDuration - 0.05, 0.1, 0.05, 0)
anoise = noise(0.8, 0)
kcf = expseg(20000, 0.7, 9000, iNoteDuration - 0.1, 9000)
anoise = butlp(anoise, kcf)
anoise = buthp(anoise, 8000)
anoise = anoise * aenv
aOut = (amix + anoise) * giTR_808_OpenHighHat_Level * 0.55
aOut = atone(aOut, k(giTR_808_HighHat_HighPassCutoffFrequencyHz))
elseif (iNoteNumber == 49) then
kFrq1 = 296 * octave(giTR_808_ClosedHighHat_Tune)
kFrq2 = 285 * octave(giTR_808_ClosedHighHat_Tune)
kFrq3 = 365 * octave(giTR_808_ClosedHighHat_Tune)
kFrq4 = 348 * octave(giTR_808_ClosedHighHat_Tune)
kFrq5 = 420 * octave(giTR_808_ClosedHighHat_Tune)
kFrq6 = 835 * octave(giTR_808_ClosedHighHat_Tune)
ipw = 0.25
a1 = vco2(0.5, kFrq1, 2, ipw)
a2 = vco2(0.5, kFrq2, 2, ipw)
a3 = vco2(0.5, kFrq3, 2, ipw)
a4 = vco2(0.5, kFrq4, 2, ipw)
a5 = vco2(0.5, kFrq5, 2, ipw)
a6 = vco2(0.5, kFrq6, 2, ipw)
amix = sum(a1, a2, a3, a4, a5, a6)
amix = reson(amix, 5000 * octave(giTR_808_ClosedHighHat_Tune), 5000, 1)
amix = buthp(amix, 5000)
amix = buthp(amix, 5000)
anoise = noise(0.8, 0)
kcf = expseg(20000, 0.7, 9000, iNoteDuration - 0.1, 9000)
anoise = butlp(anoise, kcf)
anoise = buthp(anoise, 8000)
aOut = (amix + anoise) * giTR_808_ClosedHighHat_Level * 0.55
aOut = atone(aOut, k(giTR_808_HighHat_HighPassCutoffFrequencyHz))
endif
kPass init 0
kUnused = tablewa(giTR_808_SampleCacheTableNumbers[iSampleCacheIndex], aOut, kPass * ksmps)
kPass += 1
elseif (iEventType == 1) then
iVelocity = p6
iAmp = ampdbfs(((iVelocity / 127) - 1) * 30)
kPass init 0
aOut = tab:a(a(kPass * ksmps), giTR_808_SampleCacheTableNumbers[iSampleCacheIndex]) * aAmpEnvelope * iAmp
kPass += 1
if (giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionEnabled] == 1) then
iPositionMaxAmpWhenClose = giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionMaxAmpWhenClose]
iPositionReferenceDistance = giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionReferenceDistance]
iPositionRolloffFactor = giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionRolloffFactor]
iX, iY, iZ dEd_position giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionOpcodeComboBoxIndex]
iX *= giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionXScale]
iY *= giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionYScale]
iZ *= giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionZScale]
iX += giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionXOffset]
iY += giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionYOffset]
iZ += giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionZOffset]
kX init iX
kY init iY
kZ init iZ
kPositionMaxAmpWhenClose init iPositionMaxAmpWhenClose
kPositionReferenceDistance init iPositionReferenceDistance
kPositionRolloffFactor init iPositionRolloffFactor
aDistance = AF_3D_Audio_SourceDistance_a(kX, kY, kZ)
aDistanceAmp = AF_3D_Audio_DistanceAttenuation:a(aDistance, kPositionReferenceDistance, kPositionRolloffFactor)
aDistanceAmp = min(aDistanceAmp, a(kPositionMaxAmpWhenClose))
aDistancedOut = aOut * aDistanceAmp
aAuxOut = aOut * min((aDistanceAmp * 3), a(0.5))
AF_3D_Audio_ChannelGains_XYZ(iX, iY, iZ)
a1 = a(gkAmbisonicChannelGains[0]) * aDistancedOut
a2 = a(gkAmbisonicChannelGains[1]) * aDistancedOut
a3 = a(gkAmbisonicChannelGains[2]) * aDistancedOut
a4 = a(gkAmbisonicChannelGains[3]) * aDistancedOut
else
a1 = aDistancedOut
a2 = 0
a3 = 0
a4 = 0
endif
chnset(a1, "3/0")
chnset(a2, "3/1")
chnset(a3, "3/2")
chnset(a4, "3/3")
chnset(aAuxOut, "3/4")
chnset(aAuxOut, "3/5")
#ifdef IS_GENERATING_JSON
if (giTR_808_NoteIndex[3] == 0) then
scoreline_i(sprintf("i \\"%s\\" 0 0", "Json_7"))
endif
giTR_808_NoteIndex[3] = giTR_808_NoteIndex[3] + 1
SJsonFile = sprintf("json/%s.%d.json", "6aecd056fd3f4c6d9a108de531c48ddf", giTR_808_NoteIndex[3])
fprints(SJsonFile, "{\\"note\\":{\\"onTime\\":%.3f", times())
if (giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionEnabled] == 1) then
fprints(SJsonFile, ",\\"xyz\\":[%.3f,%.3f,%.3f]", iX, iY, iZ)
endif
fprints(SJsonFile, "}}")
ficlose(SJsonFile)
#end
endif
endif
end:
endin
instr Preallocate_7
ii = 0
while (ii < giPresetUuidPreallocationCount[3]) do
scoreline_i(sprintf("i %d.%.3d 0 .1 %d 63 63", 7, ii, 3))
ii += 1
od
turnoff
endin
scoreline_i(sprintf("i \\"Preallocate_%d\\" 0 -1", 7))
#ifndef MIX_CHANNEL_COUNT
#ifdef INTERNAL_CHANNEL_COUNT
#define MIX_CHANNEL_COUNT # $INTERNAL_CHANNEL_COUNT #
#else
#define MIX_CHANNEL_COUNT # 6 #
#endif
#endif
ii = 0
while (ii < $MIX_CHANNEL_COUNT) do
chn_a(sprintf("%s/%d", "4", ii), 2)
ii += 1
od
#ifdef IS_GENERATING_JSON
gSPluginUuids[4][0] = "e3e7d57082834a28b53e021beaeb783d"
instr Json_8
SJsonFile = sprintf("json/%s.0.json", "e3e7d57082834a28b53e021beaeb783d")
fprints(SJsonFile, "{")
fprints(SJsonFile, sprintf("\\"instanceName\\":\\"%s\\"", "-"))
fprints(SJsonFile, "}")
turnoff
endin
#end
instr 8
iOrcInstanceIndex = 4
iEventType = p4
if (iEventType == 4) then
iCcIndex = p5
iCcValue = p6
if (strcmp(gSCcInfo_TR_808[iCcIndex][$CC_INFO_TYPE], "string") == 0) then
gSCcValues_TR_808[4][iCcIndex] = strget(iCcValue)
else
giCcValues_TR_808[4][iCcIndex] = iCcValue
gkCcValues_TR_808[4][iCcIndex] = iCcValue
endif
turnoff
elseif (iEventType == 1 || iEventType == 5) then
iNoteNumber = p5
aOut init 0
iSampleCacheIndex = -1
ii = 0
while (ii < lenarray(giTR_808_SampleCacheNoteNumbers)) do
if (iNoteNumber == giTR_808_SampleCacheNoteNumbers[ii]) then
iSampleCacheIndex = ii
ii = lenarray(giTR_808_SampleCacheNoteNumbers)
endif
ii += 1
od
if (iSampleCacheIndex == -1 || iSampleCacheIndex >= lenarray(giTR_808_SampleCacheNoteNumbers)) then
turnoff
endif
iNoteDuration init p3
if (iNoteNumber == 37) then
iNoteDuration = 2 * giTR_808_BassDrum_Decay
xtratim(0.1)
elseif (iNoteNumber == 39) then
iNoteDuration = 0.3 * giTR_808_SnareDrum_Decay
elseif (iNoteNumber == 51) then
iNoteDuration = 0.5 * giTR_808_OpenHighHat_Decay
xtratim(0.1)
elseif (iNoteNumber == 49) then
if (iEventType == 1) then
iNoteDuration = limit(0.088 * giTR_808_ClosedHighHat_Decay, 0.1, 10)
else
iNoteDuration = 10
endif
xtratim(0.1)
endif
aAmpEnvelope init 1
if (iEventType == 1) then
if (iNoteNumber == 49) then
aAmpEnvelope = expsega(1, iNoteDuration, 0.001, 1, 0.001)
endif
endif
p3 = iNoteDuration
if (iEventType == 5) then
if (iNoteNumber == 37) then
kmul = transeg:k(0.2, iNoteDuration * 0.5, -15, 0.01, iNoteDuration * 0.5, 0, 0)
kbend = transeg:k(0.5, 1.2, -4, 0, 1, 0, 0)
asig = gbuzz(0.5, 50 * octave:k(giTR_808_BassDrum_Tune) * semitone:k(kbend), 20, 1, kmul,
giTR_808_Cosine_TableNumber)
aenv = transeg:a(1, iNoteDuration - 0.004, -6, 0)
aatt = linseg:a(0, 0.004, 1)
asig = asig * aenv * aatt
aenv = linseg:a(1, 0.07, 0)
acps = expsega(400, 0.07, 0.001, 1, 0.001)
aimp = oscili(aenv, acps * octave(giTR_808_BassDrum_Tune * 0.25), giTR_808_Sine_TableNumber)
aOut = ((asig * 0.5) + (aimp * 0.35)) * giTR_808_BassDrum_Level
aOut = atone(aOut, k(giTR_808_BassDrum_HighPassCutoffFrequencyHz))
aOut = tone(aOut, k(giTR_808_BassDrum_LowPassCutoffFrequencyHz))
elseif (iNoteNumber == 39) then
ifrq = 342
iNseDur = iNoteDuration
iPchDur = 0.1 * giTR_808_SnareDrum_Decay
aenv1 = expseg(1, iPchDur, 0.0001, iNoteDuration - iPchDur, 0.0001)
apitch1 = oscili(1, ifrq * octave(giTR_808_SnareDrum_Tune), giTR_808_Sine_TableNumber)
apitch2 = oscili(0.25, ifrq * 0.5 * octave(giTR_808_SnareDrum_Tune), giTR_808_Sine_TableNumber)
apitch = (apitch1 + apitch2) * 0.75
aenv2 = expon(1, iNoteDuration, 0.0005)
anoise = noise(0.75, 0)
anoise = butbp(anoise, 10000 * octave(giTR_808_SnareDrum_Tune), 10000)
anoise = buthp(anoise, 1000)
kcf = expseg(5000, 0.1, 3000, iNoteDuration - 0.2, 3000)
anoise = butlp(anoise, kcf)
aOut = ((apitch * aenv1) + (anoise * aenv2)) * giTR_808_SnareDrum_Level
elseif (iNoteNumber == 51) then
kFrq1 = 296 * octave(giTR_808_OpenHighHat_Tune)
kFrq2 = 285 * octave(giTR_808_OpenHighHat_Tune)
kFrq3 = 365 * octave(giTR_808_OpenHighHat_Tune)
kFrq4 = 348 * octave(giTR_808_OpenHighHat_Tune)
kFrq5 = 420 * octave(giTR_808_OpenHighHat_Tune)
kFrq6 = 835 * octave(giTR_808_OpenHighHat_Tune)
aenv = linseg(1, iNoteDuration - 0.05, 0.1, 0.05, 0)
ipw = 0.25
a1 = vco2(0.5, kFrq1, 2, ipw)
a2 = vco2(0.5, kFrq2, 2, ipw)
a3 = vco2(0.5, kFrq3, 2, ipw)
a4 = vco2(0.5, kFrq4, 2, ipw)
a5 = vco2(0.5, kFrq5, 2, ipw)
a6 = vco2(0.5, kFrq6, 2, ipw)
amix = sum(a1, a2, a3, a4, a5, a6)
amix = reson(amix, 5000 * octave(giTR_808_OpenHighHat_Tune), 5000, 1)
amix = buthp(amix, 5000)
amix = buthp(amix, 5000)
amix = (amix * aenv)
aenv = linseg(1, iNoteDuration - 0.05, 0.1, 0.05, 0)
anoise = noise(0.8, 0)
kcf = expseg(20000, 0.7, 9000, iNoteDuration - 0.1, 9000)
anoise = butlp(anoise, kcf)
anoise = buthp(anoise, 8000)
anoise = anoise * aenv
aOut = (amix + anoise) * giTR_808_OpenHighHat_Level * 0.55
aOut = atone(aOut, k(giTR_808_HighHat_HighPassCutoffFrequencyHz))
elseif (iNoteNumber == 49) then
kFrq1 = 296 * octave(giTR_808_ClosedHighHat_Tune)
kFrq2 = 285 * octave(giTR_808_ClosedHighHat_Tune)
kFrq3 = 365 * octave(giTR_808_ClosedHighHat_Tune)
kFrq4 = 348 * octave(giTR_808_ClosedHighHat_Tune)
kFrq5 = 420 * octave(giTR_808_ClosedHighHat_Tune)
kFrq6 = 835 * octave(giTR_808_ClosedHighHat_Tune)
ipw = 0.25
a1 = vco2(0.5, kFrq1, 2, ipw)
a2 = vco2(0.5, kFrq2, 2, ipw)
a3 = vco2(0.5, kFrq3, 2, ipw)
a4 = vco2(0.5, kFrq4, 2, ipw)
a5 = vco2(0.5, kFrq5, 2, ipw)
a6 = vco2(0.5, kFrq6, 2, ipw)
amix = sum(a1, a2, a3, a4, a5, a6)
amix = reson(amix, 5000 * octave(giTR_808_ClosedHighHat_Tune), 5000, 1)
amix = buthp(amix, 5000)
amix = buthp(amix, 5000)
anoise = noise(0.8, 0)
kcf = expseg(20000, 0.7, 9000, iNoteDuration - 0.1, 9000)
anoise = butlp(anoise, kcf)
anoise = buthp(anoise, 8000)
aOut = (amix + anoise) * giTR_808_ClosedHighHat_Level * 0.55
aOut = atone(aOut, k(giTR_808_HighHat_HighPassCutoffFrequencyHz))
endif
kPass init 0
kUnused = tablewa(giTR_808_SampleCacheTableNumbers[iSampleCacheIndex], aOut, kPass * ksmps)
kPass += 1
elseif (iEventType == 1) then
iVelocity = p6
iAmp = ampdbfs(((iVelocity / 127) - 1) * 30)
kPass init 0
aOut = tab:a(a(kPass * ksmps), giTR_808_SampleCacheTableNumbers[iSampleCacheIndex]) * aAmpEnvelope * iAmp
kPass += 1
if (giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionEnabled] == 1) then
iPositionMaxAmpWhenClose = giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionMaxAmpWhenClose]
iPositionReferenceDistance = giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionReferenceDistance]
iPositionRolloffFactor = giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionRolloffFactor]
iX, iY, iZ dEd_position giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionOpcodeComboBoxIndex]
iX *= giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionXScale]
iY *= giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionYScale]
iZ *= giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionZScale]
iX += giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionXOffset]
iY += giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionYOffset]
iZ += giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionZOffset]
kX init iX
kY init iY
kZ init iZ
kPositionMaxAmpWhenClose init iPositionMaxAmpWhenClose
kPositionReferenceDistance init iPositionReferenceDistance
kPositionRolloffFactor init iPositionRolloffFactor
aDistance = AF_3D_Audio_SourceDistance_a(kX, kY, kZ)
aDistanceAmp = AF_3D_Audio_DistanceAttenuation:a(aDistance, kPositionReferenceDistance, kPositionRolloffFactor)
aDistanceAmp = min(aDistanceAmp, a(kPositionMaxAmpWhenClose))
aDistancedOut = aOut * aDistanceAmp
aAuxOut = aOut * min((aDistanceAmp * 3), a(0.5))
AF_3D_Audio_ChannelGains_XYZ(iX, iY, iZ)
a1 = a(gkAmbisonicChannelGains[0]) * aDistancedOut
a2 = a(gkAmbisonicChannelGains[1]) * aDistancedOut
a3 = a(gkAmbisonicChannelGains[2]) * aDistancedOut
a4 = a(gkAmbisonicChannelGains[3]) * aDistancedOut
else
a1 = aDistancedOut
a2 = 0
a3 = 0
a4 = 0
endif
chnset(a1, "4/0")
chnset(a2, "4/1")
chnset(a3, "4/2")
chnset(a4, "4/3")
chnset(aAuxOut, "4/4")
chnset(aAuxOut, "4/5")
#ifdef IS_GENERATING_JSON
if (giTR_808_NoteIndex[4] == 0) then
scoreline_i(sprintf("i \\"%s\\" 0 0", "Json_8"))
endif
giTR_808_NoteIndex[4] = giTR_808_NoteIndex[4] + 1
SJsonFile = sprintf("json/%s.%d.json", "e3e7d57082834a28b53e021beaeb783d", giTR_808_NoteIndex[4])
fprints(SJsonFile, "{\\"note\\":{\\"onTime\\":%.3f", times())
if (giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionEnabled] == 1) then
fprints(SJsonFile, ",\\"xyz\\":[%.3f,%.3f,%.3f]", iX, iY, iZ)
endif
fprints(SJsonFile, "}}")
ficlose(SJsonFile)
#end
endif
endif
end:
endin
instr Preallocate_8
ii = 0
while (ii < giPresetUuidPreallocationCount[4]) do
scoreline_i(sprintf("i %d.%.3d 0 .1 %d 63 63", 8, ii, 3))
ii += 1
od
turnoff
endin
scoreline_i(sprintf("i \\"Preallocate_%d\\" 0 -1", 8))
#ifndef MIX_CHANNEL_COUNT
#ifdef INTERNAL_CHANNEL_COUNT
#define MIX_CHANNEL_COUNT # $INTERNAL_CHANNEL_COUNT #
#else
#define MIX_CHANNEL_COUNT # 6 #
#endif
#endif
ii = 0
while (ii < $MIX_CHANNEL_COUNT) do
chn_a(sprintf("%s/%d", "5", ii), 2)
ii += 1
od
#ifdef IS_GENERATING_JSON
gSPluginUuids[5][0] = "02c103e8fcef483292ebc49d3898ef96"
instr Json_9
SJsonFile = sprintf("json/%s.0.json", "02c103e8fcef483292ebc49d3898ef96")
fprints(SJsonFile, "{")
fprints(SJsonFile, sprintf("\\"instanceName\\":\\"%s\\"", "-"))
fprints(SJsonFile, "}")
turnoff
endin
#end
instr 9
iOrcInstanceIndex = 5
iEventType = p4
if (iEventType == 4) then
iCcIndex = p5
iCcValue = p6
if (strcmp(gSCcInfo_TR_808[iCcIndex][$CC_INFO_TYPE], "string") == 0) then
gSCcValues_TR_808[5][iCcIndex] = strget(iCcValue)
else
giCcValues_TR_808[5][iCcIndex] = iCcValue
gkCcValues_TR_808[5][iCcIndex] = iCcValue
endif
turnoff
elseif (iEventType == 1 || iEventType == 5) then
iNoteNumber = p5
aOut init 0
iSampleCacheIndex = -1
ii = 0
while (ii < lenarray(giTR_808_SampleCacheNoteNumbers)) do
if (iNoteNumber == giTR_808_SampleCacheNoteNumbers[ii]) then
iSampleCacheIndex = ii
ii = lenarray(giTR_808_SampleCacheNoteNumbers)
endif
ii += 1
od
if (iSampleCacheIndex == -1 || iSampleCacheIndex >= lenarray(giTR_808_SampleCacheNoteNumbers)) then
turnoff
endif
iNoteDuration init p3
if (iNoteNumber == 37) then
iNoteDuration = 2 * giTR_808_BassDrum_Decay
xtratim(0.1)
elseif (iNoteNumber == 39) then
iNoteDuration = 0.3 * giTR_808_SnareDrum_Decay
elseif (iNoteNumber == 51) then
iNoteDuration = 0.5 * giTR_808_OpenHighHat_Decay
xtratim(0.1)
elseif (iNoteNumber == 49) then
if (iEventType == 1) then
iNoteDuration = limit(0.088 * giTR_808_ClosedHighHat_Decay, 0.1, 10)
else
iNoteDuration = 10
endif
xtratim(0.1)
endif
aAmpEnvelope init 1
if (iEventType == 1) then
if (iNoteNumber == 49) then
aAmpEnvelope = expsega(1, iNoteDuration, 0.001, 1, 0.001)
endif
endif
p3 = iNoteDuration
if (iEventType == 5) then
if (iNoteNumber == 37) then
kmul = transeg:k(0.2, iNoteDuration * 0.5, -15, 0.01, iNoteDuration * 0.5, 0, 0)
kbend = transeg:k(0.5, 1.2, -4, 0, 1, 0, 0)
asig = gbuzz(0.5, 50 * octave:k(giTR_808_BassDrum_Tune) * semitone:k(kbend), 20, 1, kmul,
giTR_808_Cosine_TableNumber)
aenv = transeg:a(1, iNoteDuration - 0.004, -6, 0)
aatt = linseg:a(0, 0.004, 1)
asig = asig * aenv * aatt
aenv = linseg:a(1, 0.07, 0)
acps = expsega(400, 0.07, 0.001, 1, 0.001)
aimp = oscili(aenv, acps * octave(giTR_808_BassDrum_Tune * 0.25), giTR_808_Sine_TableNumber)
aOut = ((asig * 0.5) + (aimp * 0.35)) * giTR_808_BassDrum_Level
aOut = atone(aOut, k(giTR_808_BassDrum_HighPassCutoffFrequencyHz))
aOut = tone(aOut, k(giTR_808_BassDrum_LowPassCutoffFrequencyHz))
elseif (iNoteNumber == 39) then
ifrq = 342
iNseDur = iNoteDuration
iPchDur = 0.1 * giTR_808_SnareDrum_Decay
aenv1 = expseg(1, iPchDur, 0.0001, iNoteDuration - iPchDur, 0.0001)
apitch1 = oscili(1, ifrq * octave(giTR_808_SnareDrum_Tune), giTR_808_Sine_TableNumber)
apitch2 = oscili(0.25, ifrq * 0.5 * octave(giTR_808_SnareDrum_Tune), giTR_808_Sine_TableNumber)
apitch = (apitch1 + apitch2) * 0.75
aenv2 = expon(1, iNoteDuration, 0.0005)
anoise = noise(0.75, 0)
anoise = butbp(anoise, 10000 * octave(giTR_808_SnareDrum_Tune), 10000)
anoise = buthp(anoise, 1000)
kcf = expseg(5000, 0.1, 3000, iNoteDuration - 0.2, 3000)
anoise = butlp(anoise, kcf)
aOut = ((apitch * aenv1) + (anoise * aenv2)) * giTR_808_SnareDrum_Level
elseif (iNoteNumber == 51) then
kFrq1 = 296 * octave(giTR_808_OpenHighHat_Tune)
kFrq2 = 285 * octave(giTR_808_OpenHighHat_Tune)
kFrq3 = 365 * octave(giTR_808_OpenHighHat_Tune)
kFrq4 = 348 * octave(giTR_808_OpenHighHat_Tune)
kFrq5 = 420 * octave(giTR_808_OpenHighHat_Tune)
kFrq6 = 835 * octave(giTR_808_OpenHighHat_Tune)
aenv = linseg(1, iNoteDuration - 0.05, 0.1, 0.05, 0)
ipw = 0.25
a1 = vco2(0.5, kFrq1, 2, ipw)
a2 = vco2(0.5, kFrq2, 2, ipw)
a3 = vco2(0.5, kFrq3, 2, ipw)
a4 = vco2(0.5, kFrq4, 2, ipw)
a5 = vco2(0.5, kFrq5, 2, ipw)
a6 = vco2(0.5, kFrq6, 2, ipw)
amix = sum(a1, a2, a3, a4, a5, a6)
amix = reson(amix, 5000 * octave(giTR_808_OpenHighHat_Tune), 5000, 1)
amix = buthp(amix, 5000)
amix = buthp(amix, 5000)
amix = (amix * aenv)
aenv = linseg(1, iNoteDuration - 0.05, 0.1, 0.05, 0)
anoise = noise(0.8, 0)
kcf = expseg(20000, 0.7, 9000, iNoteDuration - 0.1, 9000)
anoise = butlp(anoise, kcf)
anoise = buthp(anoise, 8000)
anoise = anoise * aenv
aOut = (amix + anoise) * giTR_808_OpenHighHat_Level * 0.55
aOut = atone(aOut, k(giTR_808_HighHat_HighPassCutoffFrequencyHz))
elseif (iNoteNumber == 49) then
kFrq1 = 296 * octave(giTR_808_ClosedHighHat_Tune)
kFrq2 = 285 * octave(giTR_808_ClosedHighHat_Tune)
kFrq3 = 365 * octave(giTR_808_ClosedHighHat_Tune)
kFrq4 = 348 * octave(giTR_808_ClosedHighHat_Tune)
kFrq5 = 420 * octave(giTR_808_ClosedHighHat_Tune)
kFrq6 = 835 * octave(giTR_808_ClosedHighHat_Tune)
ipw = 0.25
a1 = vco2(0.5, kFrq1, 2, ipw)
a2 = vco2(0.5, kFrq2, 2, ipw)
a3 = vco2(0.5, kFrq3, 2, ipw)
a4 = vco2(0.5, kFrq4, 2, ipw)
a5 = vco2(0.5, kFrq5, 2, ipw)
a6 = vco2(0.5, kFrq6, 2, ipw)
amix = sum(a1, a2, a3, a4, a5, a6)
amix = reson(amix, 5000 * octave(giTR_808_ClosedHighHat_Tune), 5000, 1)
amix = buthp(amix, 5000)
amix = buthp(amix, 5000)
anoise = noise(0.8, 0)
kcf = expseg(20000, 0.7, 9000, iNoteDuration - 0.1, 9000)
anoise = butlp(anoise, kcf)
anoise = buthp(anoise, 8000)
aOut = (amix + anoise) * giTR_808_ClosedHighHat_Level * 0.55
aOut = atone(aOut, k(giTR_808_HighHat_HighPassCutoffFrequencyHz))
endif
kPass init 0
kUnused = tablewa(giTR_808_SampleCacheTableNumbers[iSampleCacheIndex], aOut, kPass * ksmps)
kPass += 1
elseif (iEventType == 1) then
iVelocity = p6
iAmp = ampdbfs(((iVelocity / 127) - 1) * 30)
kPass init 0
aOut = tab:a(a(kPass * ksmps), giTR_808_SampleCacheTableNumbers[iSampleCacheIndex]) * aAmpEnvelope * iAmp
kPass += 1
if (giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionEnabled] == 1) then
iPositionMaxAmpWhenClose = giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionMaxAmpWhenClose]
iPositionReferenceDistance = giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionReferenceDistance]
iPositionRolloffFactor = giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionRolloffFactor]
iX, iY, iZ dEd_position giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionOpcodeComboBoxIndex]
iX *= giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionXScale]
iY *= giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionYScale]
iZ *= giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionZScale]
iX += giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionXOffset]
iY += giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionYOffset]
iZ += giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionZOffset]
kX init iX
kY init iY
kZ init iZ
kPositionMaxAmpWhenClose init iPositionMaxAmpWhenClose
kPositionReferenceDistance init iPositionReferenceDistance
kPositionRolloffFactor init iPositionRolloffFactor
aDistance = AF_3D_Audio_SourceDistance_a(kX, kY, kZ)
aDistanceAmp = AF_3D_Audio_DistanceAttenuation:a(aDistance, kPositionReferenceDistance, kPositionRolloffFactor)
aDistanceAmp = min(aDistanceAmp, a(kPositionMaxAmpWhenClose))
aDistancedOut = aOut * aDistanceAmp
aAuxOut = aOut * min((aDistanceAmp * 3), a(0.5))
AF_3D_Audio_ChannelGains_XYZ(iX, iY, iZ)
a1 = a(gkAmbisonicChannelGains[0]) * aDistancedOut
a2 = a(gkAmbisonicChannelGains[1]) * aDistancedOut
a3 = a(gkAmbisonicChannelGains[2]) * aDistancedOut
a4 = a(gkAmbisonicChannelGains[3]) * aDistancedOut
else
a1 = aDistancedOut
a2 = 0
a3 = 0
a4 = 0
endif
chnset(a1, "5/0")
chnset(a2, "5/1")
chnset(a3, "5/2")
chnset(a4, "5/3")
chnset(aAuxOut, "5/4")
chnset(aAuxOut, "5/5")
#ifdef IS_GENERATING_JSON
if (giTR_808_NoteIndex[5] == 0) then
scoreline_i(sprintf("i \\"%s\\" 0 0", "Json_9"))
endif
giTR_808_NoteIndex[5] = giTR_808_NoteIndex[5] + 1
SJsonFile = sprintf("json/%s.%d.json", "02c103e8fcef483292ebc49d3898ef96", giTR_808_NoteIndex[5])
fprints(SJsonFile, "{\\"note\\":{\\"onTime\\":%.3f", times())
if (giCcValues_TR_808[iOrcInstanceIndex][giCc_TR_808_positionEnabled] == 1) then
fprints(SJsonFile, ",\\"xyz\\":[%.3f,%.3f,%.3f]", iX, iY, iZ)
endif
fprints(SJsonFile, "}}")
ficlose(SJsonFile)
#end
endif
endif
end:
endin
instr Preallocate_9
ii = 0
while (ii < giPresetUuidPreallocationCount[5]) do
scoreline_i(sprintf("i %d.%.3d 0 .1 %d 63 63", 9, ii, 3))
ii += 1
od
turnoff
endin
scoreline_i(sprintf("i \\"Preallocate_%d\\" 0 -1", 9))
#ifndef MIX_CHANNEL_COUNT
#ifdef INTERNAL_CHANNEL_COUNT
#define MIX_CHANNEL_COUNT # $INTERNAL_CHANNEL_COUNT #
#else
#define MIX_CHANNEL_COUNT # 6 #
#endif
#endif
ii = 0
while (ii < $MIX_CHANNEL_COUNT) do
chn_a(sprintf("%s/%d", "6", ii), 2)
ii += 1
od
#ifndef ADSR_LINSEGR_UDO_ORC
#define ADSR_LINSEGR_UDO_ORC ##
opcode adsr_linsegr, a, iiii
iA, iD, iS, iR xin
iA = max(0.000001, iA)
iD = max(0.000001, iD)
iR = max(0.000001, iR)
aOut = linsegr(0, iA, 1, iD, iS, 1, iS, iR, 0)
xout aOut
endop
opcode adsr_linsegr, k, kkkk
iA, iD, iS, iR xin
iA = max(0.000001, iA)
iD = max(0.000001, iD)
iR = max(0.000001, iR)
kOut = linsegr(0, iA, 1, iD, iS, 1, iS, iR, 0)
xout kOut
endop
#end
gSCcInfo_Triangle2Synth[] = fillarray( \\
\\
"positionEnabled", "bool", "true", "synced", "positionMaxAmpWhenClose", "number", "1", "synced", "positionReferenceDistance", "number", "0.1", "synced", "positionRolloffFactor", "number", "0.01", "synced", "positionOpcodeComboBoxIndex", "number", "0", "synced", "positionOpcode", "string", "", "synced", "positionXScale", "number", "100", "synced", "positionYScale", "number", "100", "synced", "positionZScale", "number", "100", "synced", "positionXOffset", "number", "0", "synced", "positionYOffset", "number", "0", "synced", "positionZOffset", "number", "0", "synced",
\\
"", "", "", "")
#ifdef gSCcInfo_Triangle2Synth_Count
#undef gSCcInfo_Triangle2Synth_Count
#end
#define gSCcInfo_Triangle2Synth_Count #52#
#define CC_INFO_CHANNEL #0#
#define CC_INFO_TYPE #1#
#define CC_INFO_VALUE #2#
#define CC_INFO_SYNC_TYPE #3#
#define CC_NO_SYNC #0#
#define CC_SYNC_TO_CHANNEL #1#
#define CC_CHANNEL_NAME(channel) #gSCcInfo_Triangle2Synth[giCc_Triangle2Synth_$channel][$CC_INFO_CHANNEL]#
#ifdef gSCcInfo_Triangle2Synth_Count
if (lenarray(gSCcInfo_Triangle2Synth) != $gSCcInfo_Triangle2Synth_Count) igoto skipCcInfoReshapeArray_Triangle2Synth
giCcCount_Triangle2Synth = (lenarray(gSCcInfo_Triangle2Synth) / 4) - 1
reshapearray(gSCcInfo_Triangle2Synth, giCcCount_Triangle2Synth + 1, 4)
skipCcInfoReshapeArray_Triangle2Synth:
#else
giCcCount_Triangle2Synth = (lenarray(gSCcInfo_Triangle2Synth) / 4) - 1
reshapearray(gSCcInfo_Triangle2Synth, giCcCount_Triangle2Synth + 1, 4)
#end
opcode ccIndex_Triangle2Synth, i, S
SChannel xin
kgoto end
iI = 0
while (iI < giCcCount_Triangle2Synth) do
if (strcmp(gSCcInfo_Triangle2Synth[iI][$CC_INFO_CHANNEL], SChannel) == 0) igoto end
iI += 1
od
iI = -1
end:
xout iI
endop
gSCcValueDefaults_Triangle2Synth[] init giCcCount_Triangle2Synth
giCcValueDefaults_Triangle2Synth[] init giCcCount_Triangle2Synth
gSCcValues_Triangle2Synth[][] init 1, giCcCount_Triangle2Synth
giCcValues_Triangle2Synth[][] init 1, giCcCount_Triangle2Synth
gkCcValues_Triangle2Synth[][] init 1, giCcCount_Triangle2Synth
gkCcSyncTypes_Triangle2Synth[][] init 1, giCcCount_Triangle2Synth
instr Triangle2Synth_InitializeCcValues
iI = 0
while (iI < giCcCount_Triangle2Synth) do
SType = gSCcInfo_Triangle2Synth[iI][$CC_INFO_TYPE]
SValue = gSCcInfo_Triangle2Synth[iI][$CC_INFO_VALUE]
iJ = 0
while (iJ < 1) do
iValue = -1
if (strcmp(SType, "string") == 0) then
gSCcValueDefaults_Triangle2Synth[iI] = SValue
gSCcValues_Triangle2Synth[iJ][iI] = SValue
else
if (strcmp(SType, "bool") == 0) then
if (strcmp(SValue, "false") == 0) then
iValue = 0
else
iValue = 1
endif
elseif (strcmp(SType, "number") == 0 && strcmp(SValue, "") != 0) then
iValue = strtod(SValue)
endif
giCcValueDefaults_Triangle2Synth[iI] = iValue
giCcValues_Triangle2Synth[iJ][iI] = iValue
endif
iJ += 1
od
iI += 1
od
igoto end
kI = 0
while (kI < giCcCount_Triangle2Synth) do
SType = gSCcInfo_Triangle2Synth[kI][$CC_INFO_TYPE]
SValue = gSCcInfo_Triangle2Synth[kI][$CC_INFO_VALUE]
SSyncType = gSCcInfo_Triangle2Synth[kI][$CC_INFO_SYNC_TYPE]
kJ = 0
while (kJ < 1) do
kValue = -1
if (strcmpk(SType, "bool") == 0) then
if (strcmpk(SValue, "false") == 0) then
kValue = 0
else
kValue = 1
endif
elseif (strcmpk(SType, "number") == 0 && strcmpk(SValue, "") != 0) then
kValue = strtodk(SValue)
endif
gkCcValues_Triangle2Synth[kJ][kI] = kValue
gkCcSyncTypes_Triangle2Synth[kJ][kI] = $CC_NO_SYNC
if (strcmpk(SSyncType, "synced") == 0) then
gkCcSyncTypes_Triangle2Synth[kJ][kI] = $CC_SYNC_TO_CHANNEL
endif
kJ += 1
od
kI += 1
od
turnoff
end:
endin
event_i("i", "Triangle2Synth_InitializeCcValues", 0, -1)
instr Triangle2Synth_CreateCcIndexes
giCc_Triangle2Synth_positionEnabled init ccIndex_Triangle2Synth("positionEnabled")
giCc_Triangle2Synth_positionMaxAmpWhenClose init ccIndex_Triangle2Synth("positionMaxAmpWhenClose")
giCc_Triangle2Synth_positionReferenceDistance init ccIndex_Triangle2Synth("positionReferenceDistance")
giCc_Triangle2Synth_positionRolloffFactor init ccIndex_Triangle2Synth("positionRolloffFactor")
giCc_Triangle2Synth_positionOpcodeComboBoxIndex init ccIndex_Triangle2Synth("positionOpcodeComboBoxIndex")
giCc_Triangle2Synth_positionOpcode init ccIndex_Triangle2Synth("positionOpcode")
giCc_Triangle2Synth_positionXScale init ccIndex_Triangle2Synth("positionXScale")
giCc_Triangle2Synth_positionYScale init ccIndex_Triangle2Synth("positionYScale")
giCc_Triangle2Synth_positionZScale init ccIndex_Triangle2Synth("positionZScale")
giCc_Triangle2Synth_positionXOffset init ccIndex_Triangle2Synth("positionXOffset")
giCc_Triangle2Synth_positionYOffset init ccIndex_Triangle2Synth("positionYOffset")
giCc_Triangle2Synth_positionZOffset init ccIndex_Triangle2Synth("positionZOffset")
turnoff
endin
event_i("i", "Triangle2Synth_CreateCcIndexes", 0, -1)
opcode json_start_i, 0, 0
prints("{\\"csound\\":{")
endop
opcode json_start_k, 0, 0
printsk("{\\"csound\\":{")
endop
opcode json_end_i, 0, 0
prints("}}")
endop
opcode json_end_k, 0, 0
printsk("}}")
endop
instr Json_CloseFile
ficlose(strget(p4))
turnoff
endin
giTriangle2Synth_PlaybackVolumeAdjustment = 0.9
giTriangle2Synth_PlaybackReverbAdjustment = 1.5
giTriangle2Synth_NoteNumberLfoAmp = 0.333
giTriangle2Synth_NoteIndex[] init 1
giTriangle2Synth_LfoShapeTable = ftgen(0, 0, 60, 7, 0, 15, 1, 30, -1, 15, 0)
#ifdef IS_GENERATING_JSON
gSPluginUuids[6][0] = "fd575f03378047af835c19ef4f7d5991"
instr Json_10
SJsonFile = sprintf("json/%s.0.json", "fd575f03378047af835c19ef4f7d5991")
fprints(SJsonFile, "{")
fprints(SJsonFile, sprintf("\\"instanceName\\":\\"%s\\"", "-"))
fprints(SJsonFile, sprintf(",\\"pitchLfoAmp\\":%.3f", giTriangle2Synth_NoteNumberLfoAmp))
fprints(SJsonFile, ",\\"pitchLfoShape\\":[")
iLfoShapeTableIndex = 0
while (iLfoShapeTableIndex < 60) do
if (iLfoShapeTableIndex > 0) then
fprints(SJsonFile, ",")
endif
fprints(SJsonFile, sprintf("%.3f", tab_i(iLfoShapeTableIndex, giTriangle2Synth_LfoShapeTable)))
iLfoShapeTableIndex += 1
od
fprints(SJsonFile, "]}")
turnoff
endin
#end
gkNoteNumberLfo init 0
instr GlobalNoteNumberLfo_10
gkNoteNumberLfo = abs(lfo(33, .03, 1))
endin
event_i("i", "GlobalNoteNumberLfo_10", 0, -1)
instr 10
iEventType = p4
if (iEventType == 4) then
iCcIndex = p5
iCcValue = p6
if (strcmp(gSCcInfo_Triangle2Synth[iCcIndex][$CC_INFO_TYPE], "string") == 0) then
gSCcValues_Triangle2Synth[0][iCcIndex] = strget(iCcValue)
else
giCcValues_Triangle2Synth[0][iCcIndex] = iCcValue
gkCcValues_Triangle2Synth[0][iCcIndex] = iCcValue
endif
turnoff
elseif (iEventType == 1) then
iNoteNumber = p5
iVelocity = p6
iNoteNumberLfoTime = i(gkNoteNumberLfo)
iOrcInstanceIndex = 0
aOut = 0
a1 = 0
a2 = 0
a3 = 0
a4 = 0
kAmp init 0.333 * (iVelocity / 127)
kNoteNumber = iNoteNumber + lfo(giTriangle2Synth_NoteNumberLfoAmp, iNoteNumberLfoTime, 1)
aOut = vco2(kAmp, cpsmidinn(kNoteNumber), 12)
iEnvelopeA = 0.01
iEnvelopeD = 0.1
iEnvelopeS = 0.667
iEnvelopeR = 0.1
iEnvelopeS_decayTime = 0.333 + 33 * (1 - iNoteNumber / 127)
iEnvelopeS_decayAmountMinimum = 0.001 * (1 - iNoteNumber / 127)
aOut *= mxadsr:a(iEnvelopeA, iEnvelopeD, iEnvelopeS, iEnvelopeR)
iEnvelopeS_decayStartTime = p2 + iEnvelopeA + iEnvelopeD
iEnvelopeS_decayEndTime = iEnvelopeS_decayStartTime + iEnvelopeS_decayTime
aEnvelopeS_decayAmount init 1
kTime = time_k()
if (kTime >= iEnvelopeS_decayStartTime && kTime < iEnvelopeS_decayEndTime) then
aEnvelopeS_decayAmount = expon(1, iEnvelopeS_decayTime, iEnvelopeS_decayAmountMinimum)
endif
aOut *= aEnvelopeS_decayAmount
aOut = tone(aOut, 999 + 333)
if (gkCcValues_Triangle2Synth[iOrcInstanceIndex][giCc_Triangle2Synth_positionEnabled] == 1) then
iPositionLagTime = 2
kPositionMaxAmpWhenClose = lag:k(gkCcValues_Triangle2Synth[iOrcInstanceIndex][giCc_Triangle2Synth_positionMaxAmpWhenClose], iPositionLagTime)
kPositionReferenceDistance = lag:k(gkCcValues_Triangle2Synth[iOrcInstanceIndex][giCc_Triangle2Synth_positionReferenceDistance], iPositionLagTime)
kPositionRolloffFactor = lag:k(gkCcValues_Triangle2Synth[iOrcInstanceIndex][giCc_Triangle2Synth_positionRolloffFactor], iPositionLagTime)
kX, kY, kZ dEd_position gkCcValues_Triangle2Synth[iOrcInstanceIndex][giCc_Triangle2Synth_positionOpcodeComboBoxIndex]
kX *= lag:k(gkCcValues_Triangle2Synth[iOrcInstanceIndex][giCc_Triangle2Synth_positionXScale], iPositionLagTime)
kY *= lag:k(gkCcValues_Triangle2Synth[iOrcInstanceIndex][giCc_Triangle2Synth_positionYScale], iPositionLagTime)
kZ *= lag:k(gkCcValues_Triangle2Synth[iOrcInstanceIndex][giCc_Triangle2Synth_positionZScale], iPositionLagTime)
kX += lag:k(gkCcValues_Triangle2Synth[iOrcInstanceIndex][giCc_Triangle2Synth_positionXOffset], iPositionLagTime)
kY += lag:k(gkCcValues_Triangle2Synth[iOrcInstanceIndex][giCc_Triangle2Synth_positionYOffset], iPositionLagTime)
kZ += lag:k(gkCcValues_Triangle2Synth[iOrcInstanceIndex][giCc_Triangle2Synth_positionZOffset], iPositionLagTime)
aDistance = AF_3D_Audio_SourceDistance_a(kX, kY, kZ)
aDistanceAmp = AF_3D_Audio_DistanceAttenuation:a(aDistance, kPositionReferenceDistance, kPositionRolloffFactor)
aOut *= min(aDistanceAmp, a(kPositionMaxAmpWhenClose))
AF_3D_Audio_ChannelGains_XYZ(kX, kY, kZ)
a1 = a(gkAmbisonicChannelGains[0]) * aOut
a2 = a(gkAmbisonicChannelGains[1]) * aOut
a3 = a(gkAmbisonicChannelGains[2]) * aOut
a4 = a(gkAmbisonicChannelGains[3]) * aOut
else
a1 = aOut
a2 = 0
a3 = 0
a4 = 0
endif
chnmix(a1, "6/0")
chnmix(a2, "6/1")
chnmix(a3, "6/2")
chnmix(a4, "6/3")
chnmix(aOut, "6/4")
chnmix(aOut, "6/5")
#ifdef IS_GENERATING_JSON
if (giTriangle2Synth_NoteIndex[0] == 0) then
scoreline_i(sprintf("i \\"%s\\" 0 0", "Json_10"))
endif
giTriangle2Synth_NoteIndex[0] = giTriangle2Synth_NoteIndex[0] + 1
SJsonFile = sprintf("json/%s.%d.json",
"fd575f03378047af835c19ef4f7d5991",
giTriangle2Synth_NoteIndex[0])
iOnTime = times:i()
SJsonData = sprintf("{\\"note\\":{\\"onTime\\":%.3f,\\"pitch\\":%.3f,\\"pitchLfoTime\\":%.3f",
iOnTime, iNoteNumber, iNoteNumberLfoTime)
if (lastcycle() == 1) then
fprintks(SJsonFile, SJsonData)
if (gkCcValues_Triangle2Synth[iOrcInstanceIndex][giCc_Triangle2Synth_positionEnabled] == 1 && giTriangle2Synth_NoteIndex[0] == 1) then
fprintks(SJsonFile, ",\\"xyz\\":[%.3f,%.3f,%.3f]", kX, kY, kZ)
endif
fprintks(SJsonFile, ",\\"offTime\\":%.3f}}", timeinsts() + iOnTime)
endif
#end
endif
end:
endin
instr Preallocate_10
ii = 0
while (ii < giPresetUuidPreallocationCount[6]) do
scoreline_i(sprintf("i %d.%.3d 0 .1 %d 63 63", 10, ii, 3))
ii += 1
od
turnoff
endin
scoreline_i(sprintf("i \\"Preallocate_%d\\" 0 -1", 10))
#ifndef MIX_CHANNEL_COUNT
#ifdef INTERNAL_CHANNEL_COUNT
#define MIX_CHANNEL_COUNT # $INTERNAL_CHANNEL_COUNT #
#else
#define MIX_CHANNEL_COUNT # 6 #
#endif
#endif
ii = 0
while (ii < $MIX_CHANNEL_COUNT) do
chn_a(sprintf("%s/%d", "7", ii), 2)
ii += 1
od
#ifndef ADSR_LINSEGR_UDO_ORC
#define ADSR_LINSEGR_UDO_ORC ##
opcode adsr_linsegr, a, iiii
iA, iD, iS, iR xin
iA = max(0.000001, iA)
iD = max(0.000001, iD)
iR = max(0.000001, iR)
aOut = linsegr(0, iA, 1, iD, iS, 1, iS, iR, 0)
xout aOut
endop
opcode adsr_linsegr, k, kkkk
iA, iD, iS, iR xin
iA = max(0.000001, iA)
iD = max(0.000001, iD)
iR = max(0.000001, iR)
kOut = linsegr(0, iA, 1, iD, iS, 1, iS, iR, 0)
xout kOut
endop
#end
gSCcInfo_Triangle4BassMonoSynth[] = fillarray( \\
\\
"positionEnabled", "bool", "true", "synced", "positionMaxAmpWhenClose", "number", "1", "synced", "positionReferenceDistance", "number", "0.1", "synced", "positionRolloffFactor", "number", "0.01", "synced", "positionOpcodeComboBoxIndex", "number", "0", "synced", "positionOpcode", "string", "", "synced", "positionXScale", "number", "100", "synced", "positionYScale", "number", "100", "synced", "positionZScale", "number", "100", "synced", "positionXOffset", "number", "0", "synced", "positionYOffset", "number", "0", "synced", "positionZOffset", "number", "0", "synced",
\\
"", "", "", "")
#ifdef gSCcInfo_Triangle4BassMonoSynth_Count
#undef gSCcInfo_Triangle4BassMonoSynth_Count
#end
#define gSCcInfo_Triangle4BassMonoSynth_Count #52#
#define CC_INFO_CHANNEL #0#
#define CC_INFO_TYPE #1#
#define CC_INFO_VALUE #2#
#define CC_INFO_SYNC_TYPE #3#
#define CC_NO_SYNC #0#
#define CC_SYNC_TO_CHANNEL #1#
#define CC_CHANNEL_NAME(channel) #gSCcInfo_Triangle4BassMonoSynth[giCc_Triangle4BassMonoSynth_$channel][$CC_INFO_CHANNEL]#
#ifdef gSCcInfo_Triangle4BassMonoSynth_Count
if (lenarray(gSCcInfo_Triangle4BassMonoSynth) != $gSCcInfo_Triangle4BassMonoSynth_Count) igoto skipCcInfoReshapeArray_Triangle4BassMonoSynth
giCcCount_Triangle4BassMonoSynth = (lenarray(gSCcInfo_Triangle4BassMonoSynth) / 4) - 1
reshapearray(gSCcInfo_Triangle4BassMonoSynth, giCcCount_Triangle4BassMonoSynth + 1, 4)
skipCcInfoReshapeArray_Triangle4BassMonoSynth:
#else
giCcCount_Triangle4BassMonoSynth = (lenarray(gSCcInfo_Triangle4BassMonoSynth) / 4) - 1
reshapearray(gSCcInfo_Triangle4BassMonoSynth, giCcCount_Triangle4BassMonoSynth + 1, 4)
#end
opcode ccIndex_Triangle4BassMonoSynth, i, S
SChannel xin
kgoto end
iI = 0
while (iI < giCcCount_Triangle4BassMonoSynth) do
if (strcmp(gSCcInfo_Triangle4BassMonoSynth[iI][$CC_INFO_CHANNEL], SChannel) == 0) igoto end
iI += 1
od
iI = -1
end:
xout iI
endop
gSCcValueDefaults_Triangle4BassMonoSynth[] init giCcCount_Triangle4BassMonoSynth
giCcValueDefaults_Triangle4BassMonoSynth[] init giCcCount_Triangle4BassMonoSynth
gSCcValues_Triangle4BassMonoSynth[][] init 2, giCcCount_Triangle4BassMonoSynth
giCcValues_Triangle4BassMonoSynth[][] init 2, giCcCount_Triangle4BassMonoSynth
gkCcValues_Triangle4BassMonoSynth[][] init 2, giCcCount_Triangle4BassMonoSynth
gkCcSyncTypes_Triangle4BassMonoSynth[][] init 2, giCcCount_Triangle4BassMonoSynth
instr Triangle4BassMonoSynth_InitializeCcValues
iI = 0
while (iI < giCcCount_Triangle4BassMonoSynth) do
SType = gSCcInfo_Triangle4BassMonoSynth[iI][$CC_INFO_TYPE]
SValue = gSCcInfo_Triangle4BassMonoSynth[iI][$CC_INFO_VALUE]
iJ = 0
while (iJ < 2) do
iValue = -1
if (strcmp(SType, "string") == 0) then
gSCcValueDefaults_Triangle4BassMonoSynth[iI] = SValue
gSCcValues_Triangle4BassMonoSynth[iJ][iI] = SValue
else
if (strcmp(SType, "bool") == 0) then
if (strcmp(SValue, "false") == 0) then
iValue = 0
else
iValue = 1
endif
elseif (strcmp(SType, "number") == 0 && strcmp(SValue, "") != 0) then
iValue = strtod(SValue)
endif
giCcValueDefaults_Triangle4BassMonoSynth[iI] = iValue
giCcValues_Triangle4BassMonoSynth[iJ][iI] = iValue
endif
iJ += 1
od
iI += 1
od
igoto end
kI = 0
while (kI < giCcCount_Triangle4BassMonoSynth) do
SType = gSCcInfo_Triangle4BassMonoSynth[kI][$CC_INFO_TYPE]
SValue = gSCcInfo_Triangle4BassMonoSynth[kI][$CC_INFO_VALUE]
SSyncType = gSCcInfo_Triangle4BassMonoSynth[kI][$CC_INFO_SYNC_TYPE]
kJ = 0
while (kJ < 2) do
kValue = -1
if (strcmpk(SType, "bool") == 0) then
if (strcmpk(SValue, "false") == 0) then
kValue = 0
else
kValue = 1
endif
elseif (strcmpk(SType, "number") == 0 && strcmpk(SValue, "") != 0) then
kValue = strtodk(SValue)
endif
gkCcValues_Triangle4BassMonoSynth[kJ][kI] = kValue
gkCcSyncTypes_Triangle4BassMonoSynth[kJ][kI] = $CC_NO_SYNC
if (strcmpk(SSyncType, "synced") == 0) then
gkCcSyncTypes_Triangle4BassMonoSynth[kJ][kI] = $CC_SYNC_TO_CHANNEL
endif
kJ += 1
od
kI += 1
od
turnoff
end:
endin
event_i("i", "Triangle4BassMonoSynth_InitializeCcValues", 0, -1)
instr Triangle4BassMonoSynth_CreateCcIndexes
giCc_Triangle4BassMonoSynth_positionEnabled init ccIndex_Triangle4BassMonoSynth("positionEnabled")
giCc_Triangle4BassMonoSynth_positionMaxAmpWhenClose init ccIndex_Triangle4BassMonoSynth("positionMaxAmpWhenClose")
giCc_Triangle4BassMonoSynth_positionReferenceDistance init ccIndex_Triangle4BassMonoSynth("positionReferenceDistance")
giCc_Triangle4BassMonoSynth_positionRolloffFactor init ccIndex_Triangle4BassMonoSynth("positionRolloffFactor")
giCc_Triangle4BassMonoSynth_positionOpcodeComboBoxIndex init ccIndex_Triangle4BassMonoSynth("positionOpcodeComboBoxIndex")
giCc_Triangle4BassMonoSynth_positionOpcode init ccIndex_Triangle4BassMonoSynth("positionOpcode")
giCc_Triangle4BassMonoSynth_positionXScale init ccIndex_Triangle4BassMonoSynth("positionXScale")
giCc_Triangle4BassMonoSynth_positionYScale init ccIndex_Triangle4BassMonoSynth("positionYScale")
giCc_Triangle4BassMonoSynth_positionZScale init ccIndex_Triangle4BassMonoSynth("positionZScale")
giCc_Triangle4BassMonoSynth_positionXOffset init ccIndex_Triangle4BassMonoSynth("positionXOffset")
giCc_Triangle4BassMonoSynth_positionYOffset init ccIndex_Triangle4BassMonoSynth("positionYOffset")
giCc_Triangle4BassMonoSynth_positionZOffset init ccIndex_Triangle4BassMonoSynth("positionZOffset")
turnoff
endin
event_i("i", "Triangle4BassMonoSynth_CreateCcIndexes", 0, -1)
gkTriangle4BassMonoSynth_ActiveNoteCount[] init 2
giTriangle4BassMonoSynth_MonoHandlerIsActive[] init 2
giTriangle4BassMonoSynth_NoteIndex[] init 2
gkTriangle4BassMonoSynth_NoteNumber[] init 2
gSTriangle4BassMonoSynth_Json[] init 2
giTriangle4BassMonoSynth_PlaybackVolumeAdjustment = 0.9
giTriangle4BassMonoSynth_PlaybackReverbAdjustment = 1.5
giTriangle4BassMonoSynth_HighPassCutoffFrequencyHz = 150
giTriangle4BassMonoSynth_LowPassCutoffFrequencyHz = 1000
opcode Triangle4BassMonoSynth_EffectChain, a, a
a1 xin
a1 = atone(a1, k(giTriangle4BassMonoSynth_HighPassCutoffFrequencyHz))
a1 = tone(a1, k(giTriangle4BassMonoSynth_LowPassCutoffFrequencyHz))
xout a1
endop
#ifdef TriangleBassMonoSynth_VolumeEnvelopeAttackAndDecayTime
#undef TriangleBassMonoSynth_VolumeEnvelopeAttackAndDecayTime
#end
#ifdef TriangleBassMonoSynth_NoteNumberLagTime
#undef TriangleBassMonoSynth_NoteNumberLagTime
#end
#ifdef TriangleMonoSynth_VcoBandwith
#undef TriangleMonoSynth_VcoBandwith
#end
#ifdef TriangleMonoSynth_EffectChain
#undef TriangleMonoSynth_EffectChain
#end
#define TriangleMonoSynth_VolumeEnvelopeAttackTime # 0.05 #
#define TriangleMonoSynth_VolumeEnvelopeDecayTime # 0.25 #
#define TriangleMonoSynth_NoteNumberLagTime # 0.215 #
#define TriangleMonoSynth_VcoBandwith # 0.075 #
#define TriangleMonoSynth_EffectChain(aOut) # $aOut = Triangle4BassMonoSynth_EffectChain($aOut) #
#ifndef TriangleMonoSynth_VolumeEnvelopeAttackTime
#define TriangleMonoSynth_VolumeEnvelopeAttackTime #0.05#
#end
#ifndef TriangleMonoSynth_VolumeEnvelopeDecayTime
#define TriangleMonoSynth_VolumeEnvelopeDecayTime #0.25#
#end
#ifndef TriangleMonoSynth_NoteNumberLagTime
#define TriangleMonoSynth_NoteNumberLagTime #0.1#
#end
#ifndef TriangleMonoSynth_VcoBandwith
#define TriangleMonoSynth_VcoBandwith #0.5#
#end
#ifndef TriangleMonoSynth_EffectChain
#define TriangleMonoSynth_EffectChain(aOut) ##
#end
#ifdef IS_GENERATING_JSON
gSPluginUuids[7][0] = "ab018f191c70470f98ac3becb76e6d13"
instr Json_11
SJsonFile = sprintf("json/%s.0.json", "ab018f191c70470f98ac3becb76e6d13")
fprints(SJsonFile, "{")
fprints(SJsonFile, sprintf("\\"instanceName\\":\\"%s\\"", "-"))
fprints(SJsonFile, "}")
turnoff
endin
instr JsonAppend_11
gSTriangle4BassMonoSynth_Json[0] = strcat(gSTriangle4BassMonoSynth_Json[0], strget(p4))
turnoff
endin
instr JsonWrite_11
SJsonFile = sprintf("json/%s.%d.json",
"ab018f191c70470f98ac3becb76e6d13",
giTriangle4BassMonoSynth_NoteIndex[0])
iStringLength = strlen(gSTriangle4BassMonoSynth_Json[0])
ii = 0
while (ii < iStringLength / 100) do
fprints(SJsonFile, strsub(gSTriangle4BassMonoSynth_Json[0], 100 * ii, 100 * ii + 100))
ii += 1
od
if (100 * ii < iStringLength) then
fprints(SJsonFile, strsub(gSTriangle4BassMonoSynth_Json[0], 100 * ii, iStringLength))
endif
fprints(SJsonFile, "]}}")
ficlose(SJsonFile)
gSTriangle4BassMonoSynth_Json[0] = ""
turnoff
endin
#end
instr 11
iEventType = p4
if (iEventType == 4) then
iCcIndex = p5
iCcValue = p6
if (strcmp(gSCcInfo_Triangle4BassMonoSynth[iCcIndex][$CC_INFO_TYPE], "string") == 0) then
gSCcValues_Triangle4BassMonoSynth[0][iCcIndex] = strget(iCcValue)
else
giCcValues_Triangle4BassMonoSynth[0][iCcIndex] = iCcValue
gkCcValues_Triangle4BassMonoSynth[0][iCcIndex] = iCcValue
endif
turnoff
elseif (iEventType == 2) then
gkTriangle4BassMonoSynth_ActiveNoteCount[0] =
gkTriangle4BassMonoSynth_ActiveNoteCount[0] - 1
turnoff
elseif (iEventType == 1) then
iNoteNumber = p5
iVelocity = p6
kActiveNoteCountIncremented init 0
if (kActiveNoteCountIncremented == 0) then
gkTriangle4BassMonoSynth_ActiveNoteCount[0] =
gkTriangle4BassMonoSynth_ActiveNoteCount[0] + 1
kActiveNoteCountIncremented = 1
endif
xtratim(1 / kr)
kReleased = release()
if (kReleased == 1) then
event("i", int(p1), 0, 1, 2, 0, 0)
turnoff
endif
if (giTriangle4BassMonoSynth_MonoHandlerIsActive[0] == 0) then
event_i("i", int(p1) + .9999 , 0, -1, 6, 0, 0)
endif
gkTriangle4BassMonoSynth_NoteNumber[0] = iNoteNumber
elseif (iEventType == 7) then
giTriangle4BassMonoSynth_MonoHandlerIsActive[0] = 0
#ifdef IS_GENERATING_JSON
event_i("i", "JsonWrite_11", 0, -1)
#end
turnoff
elseif (iEventType == 6) then
giTriangle4BassMonoSynth_MonoHandlerIsActive[0] = 1
iOrcInstanceIndex = 0
iAmp = 0.4
aOut = 0
a1 = 0
a2 = 0
a3 = 0
a4 = 0
#ifdef IS_GENERATING_JSON
if (giTriangle4BassMonoSynth_NoteIndex[0] == 0) then
scoreline_i(sprintf("i \\"%s\\" 0 0", "Json_11"))
endif
giTriangle4BassMonoSynth_NoteIndex[0] = giTriangle4BassMonoSynth_NoteIndex[0] + 1
iStartTime = times:i()
kTime = (times:k() - 1 / kr) - iStartTime
SiJson = sprintf("{\\"note\\":{\\"onTime\\":%.3f", iStartTime)
SiJson = strcat(SiJson, ",\\"k\\":[")
scoreline_i(sprintf("i \\"%s\\" 0 -1 \\"%s\\"", "JsonAppend_11", string_escape_i(SiJson)))
#end
iVolumeEnvelopeAttackSlope = giSecondsPerSample / $TriangleMonoSynth_VolumeEnvelopeAttackTime
iVolumeEnvelopeDecaySlope = -giSecondsPerSample / $TriangleMonoSynth_VolumeEnvelopeDecayTime
kVolumeEnvelopeModifier init 0
kActiveNoteCount = gkTriangle4BassMonoSynth_ActiveNoteCount[0]
kActiveNoteCountPrevious init 0
kNoteNumberWhenActivated init 0
kActiveNoteCountChanged = 0
kNoteNumberNeedsLag init 0
if (changed2(kActiveNoteCount) == 1 || kActiveNoteCountPrevious == 0) then
if (kActiveNoteCount == 1 && kActiveNoteCountPrevious == 0) then
kNoteNumberWhenActivated = gkTriangle4BassMonoSynth_NoteNumber[0]
kActiveNoteCountChanged = 1
kNoteNumberNeedsLag = 0
kVolumeEnvelopeModifier = iVolumeEnvelopeAttackSlope
elseif (kActiveNoteCount == 0) then
kVolumeEnvelopeModifier = iVolumeEnvelopeDecaySlope
endif
kActiveNoteCountPrevious = kActiveNoteCount
endif
aVolumeEnvelope init 0
kVolumeEnvelope init 0
if (kVolumeEnvelopeModifier == 0) then
aVolumeEnvelope = kVolumeEnvelope
else
kI = 0
while (kI < ksmps) do
vaset(kVolumeEnvelope, kI, aVolumeEnvelope)
kVolumeEnvelope += kVolumeEnvelopeModifier
if (kVolumeEnvelope < 0) then
kVolumeEnvelope = 0
kVolumeEnvelopeModifier = 0
elseif (kVolumeEnvelope > 1) then
kVolumeEnvelope = 1
kVolumeEnvelopeModifier = 0
endif
kI += 1
od
endif
if (kVolumeEnvelope == 0) then
if (kActiveNoteCount == 0) then
event("i", int(p1), 0, 1, 7, 0, 0)
#ifdef IS_GENERATING_JSON
SkJson = sprintfk(",{\\"time\\":%.3f,\\"volume\\":0}", kTime)
scoreline(sprintfk("i \\"%s\\" 0 -1 \\"%s\\"", "JsonAppend_11", string_escape_k(SkJson)), k(1))
#end
turnoff
endif
kgoto end__mono_handler
endif
kNoteNumber init 0
kCurrentNoteNumber = gkTriangle4BassMonoSynth_NoteNumber[0]
if (changed2(kCurrentNoteNumber) == 1) then
if (kActiveNoteCountChanged == 0) then
kNoteNumberNeedsLag = 1
endif
endif
kNoteNumberLagTime init 0
if (kNoteNumberNeedsLag == 0) then
kNoteNumberLagTime = 0
else
kNoteNumberLagTime = $TriangleMonoSynth_NoteNumberLagTime
endif
kNoteNumber = lag:k(kCurrentNoteNumber, kNoteNumberLagTime)
kCps = cpsmidinn(kNoteNumber)
aOut = vco2(iAmp, kCps, 12, 0.5, 0, $TriangleMonoSynth_VcoBandwith)
aOut *= aVolumeEnvelope
$TriangleMonoSynth_EffectChain(aOut)
if (gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionEnabled] == 1) then
iPositionLagTime = 2
kPositionMaxAmpWhenClose = lag:k(gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionMaxAmpWhenClose], iPositionLagTime)
kPositionReferenceDistance = lag:k(gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionReferenceDistance], iPositionLagTime)
kPositionRolloffFactor = lag:k(gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionRolloffFactor], iPositionLagTime)
kX, kY, kZ dEd_position gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionOpcodeComboBoxIndex]
kX *= lag:k(gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionXScale], iPositionLagTime)
kY *= lag:k(gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionYScale], iPositionLagTime)
kZ *= lag:k(gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionZScale], iPositionLagTime)
kX += lag:k(gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionXOffset], iPositionLagTime)
kY += lag:k(gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionYOffset], iPositionLagTime)
kZ += lag:k(gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionZOffset], iPositionLagTime)
iScaleFactorX = random:i(-20, 20)
kX *= iScaleFactorX
aDistance = AF_3D_Audio_SourceDistance_a(kX, kY, kZ)
aDistanceAmp = AF_3D_Audio_DistanceAttenuation:a(aDistance, kPositionReferenceDistance, kPositionRolloffFactor)
aOut *= min(aDistanceAmp, a(kPositionMaxAmpWhenClose))
AF_3D_Audio_ChannelGains_XYZ(kX, kY, kZ)
a1 = a(gkAmbisonicChannelGains[0]) * aOut
a2 = a(gkAmbisonicChannelGains[1]) * aOut
a3 = a(gkAmbisonicChannelGains[2]) * aOut
a4 = a(gkAmbisonicChannelGains[3]) * aOut
else
a1 = aOut
a2 = 0
a3 = 0
a4 = 0
endif
#ifdef IS_GENERATING_JSON
kJsonChanged_Any init 1
kJsonChanged_NoteNumber init 1
kJsonChanged_Volume init 1
kJsonChanged_X init 1
kJsonChanged_Y init 1
kJsonChanged_Z init 1
kJsonPrevious_NoteNumber init 0
kJsonPrevious_Volume init 0
kJsonPrevious_X init 0
kJsonPrevious_Y init 0
kJsonPrevious_Z init 0
kNoteNumber_Rounded = round:k(kNoteNumber * 1000) / 1000
kVolume_Rounded = round:k(kVolumeEnvelope * 1000) / 1000
kX_Rounded = round:k(kX * 1000) / 1000
kY_Rounded = round:k(kY * 1000) / 1000
kZ_Rounded = round:k(kZ * 1000) / 1000
kJsonFirstPass init 1
if (kJsonFirstPass == 0) then
kJsonChanged_Any = 0
kJsonChanged_NoteNumber = 0
kJsonChanged_Volume = 0
kJsonChanged_X = 0
kJsonChanged_Y = 0
kJsonChanged_Z = 0
if (kJsonPrevious_NoteNumber != kNoteNumber_Rounded) then
kJsonPrevious_NoteNumber = kNoteNumber_Rounded
kJsonChanged_Any = 1
kJsonChanged_NoteNumber = 1
endif
if (kJsonPrevious_Volume != kVolume_Rounded) then
kJsonPrevious_Volume = kVolume_Rounded
kJsonChanged_Any = 1
kJsonChanged_Volume = 1
endif
if (kJsonPrevious_X != kX_Rounded) then
kJsonPrevious_X = kX_Rounded
kJsonChanged_Any = 1
kJsonChanged_X = 1
endif
if (kJsonPrevious_Y != kY_Rounded) then
kJsonPrevious_Y = kY_Rounded
kJsonChanged_Any = 1
kJsonChanged_Y = 1
endif
if (kJsonPrevious_Z != kZ_Rounded) then
kJsonPrevious_Z = kZ_Rounded
kJsonChanged_Any = 1
kJsonChanged_Z = 1
endif
endif
if (kJsonChanged_Any == 1) then
SkJson = sprintfk("%s", "")
if (kJsonFirstPass == 0) then
SkJson = strcatk(SkJson, "\\n,")
endif
SkJson = strcatk(SkJson, "{")
SkJson = strcatk(SkJson, sprintfk("\\"time\\":%.3f", kTime))
if (kJsonChanged_NoteNumber == 1) then
SkJson = strcatk(SkJson, sprintfk(",\\"pitch\\":%.3f", kNoteNumber_Rounded))
endif
if (kJsonChanged_Volume == 1) then
SkJson = strcatk(SkJson, sprintfk(",\\"volume\\":%.3f", kVolume_Rounded))
endif
if (gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionEnabled] == 1) then
if (kJsonChanged_X == 1) then
SkJson = strcatk(SkJson, sprintfk(",\\"x\\":%.3f", kX_Rounded))
endif
if (kJsonChanged_Y == 1) then
SkJson = strcatk(SkJson, sprintfk(",\\"y\\":%.3f", kY_Rounded))
endif
if (kJsonChanged_Z == 1) then
SkJson = strcatk(SkJson, sprintfk(",\\"z\\":%.3f", kZ_Rounded))
endif
endif
SkJson = strcatk(SkJson, "}")
scoreline(sprintfk("i \\"%s\\" 0 -1 \\"%s\\"", "JsonAppend_11", string_escape_k(SkJson)), k(1))
endif
kJsonFirstPass = 0
#end
end__mono_handler:
chnset(a1, "7/0")
chnset(a2, "7/1")
chnset(a3, "7/2")
chnset(a4, "7/3")
chnset(aOut, "7/4")
chnset(aOut, "7/5")
endif
end:
endin
instr Preallocate_11
ii = 0
while (ii < giPresetUuidPreallocationCount[7]) do
scoreline_i(sprintf("i %d.%.3d 0 .1 %d 63 63", 11, ii, 3))
ii += 1
od
turnoff
endin
scoreline_i(sprintf("i \\"Preallocate_%d\\" 0 -1", 11))
#ifndef MIX_CHANNEL_COUNT
#ifdef INTERNAL_CHANNEL_COUNT
#define MIX_CHANNEL_COUNT # $INTERNAL_CHANNEL_COUNT #
#else
#define MIX_CHANNEL_COUNT # 6 #
#endif
#endif
ii = 0
while (ii < $MIX_CHANNEL_COUNT) do
chn_a(sprintf("%s/%d", "8", ii), 2)
ii += 1
od
#ifdef TriangleBassMonoSynth_VolumeEnvelopeAttackAndDecayTime
#undef TriangleBassMonoSynth_VolumeEnvelopeAttackAndDecayTime
#end
#ifdef TriangleBassMonoSynth_NoteNumberLagTime
#undef TriangleBassMonoSynth_NoteNumberLagTime
#end
#ifdef TriangleMonoSynth_VcoBandwith
#undef TriangleMonoSynth_VcoBandwith
#end
#ifdef TriangleMonoSynth_EffectChain
#undef TriangleMonoSynth_EffectChain
#end
#define TriangleMonoSynth_VolumeEnvelopeAttackTime # 0.05 #
#define TriangleMonoSynth_VolumeEnvelopeDecayTime # 0.25 #
#define TriangleMonoSynth_NoteNumberLagTime # 0.215 #
#define TriangleMonoSynth_VcoBandwith # 0.075 #
#define TriangleMonoSynth_EffectChain(aOut) # $aOut = Triangle4BassMonoSynth_EffectChain($aOut) #
#ifndef TriangleMonoSynth_VolumeEnvelopeAttackTime
#define TriangleMonoSynth_VolumeEnvelopeAttackTime #0.05#
#end
#ifndef TriangleMonoSynth_VolumeEnvelopeDecayTime
#define TriangleMonoSynth_VolumeEnvelopeDecayTime #0.25#
#end
#ifndef TriangleMonoSynth_NoteNumberLagTime
#define TriangleMonoSynth_NoteNumberLagTime #0.1#
#end
#ifndef TriangleMonoSynth_VcoBandwith
#define TriangleMonoSynth_VcoBandwith #0.5#
#end
#ifndef TriangleMonoSynth_EffectChain
#define TriangleMonoSynth_EffectChain(aOut) ##
#end
#ifdef IS_GENERATING_JSON
gSPluginUuids[8][0] = "b0ba6f144fac4f668ba6981c691277d6"
instr Json_12
SJsonFile = sprintf("json/%s.0.json", "b0ba6f144fac4f668ba6981c691277d6")
fprints(SJsonFile, "{")
fprints(SJsonFile, sprintf("\\"instanceName\\":\\"%s\\"", "-"))
fprints(SJsonFile, "}")
turnoff
endin
instr JsonAppend_12
gSTriangle4BassMonoSynth_Json[1] = strcat(gSTriangle4BassMonoSynth_Json[1], strget(p4))
turnoff
endin
instr JsonWrite_12
SJsonFile = sprintf("json/%s.%d.json",
"b0ba6f144fac4f668ba6981c691277d6",
giTriangle4BassMonoSynth_NoteIndex[1])
iStringLength = strlen(gSTriangle4BassMonoSynth_Json[1])
ii = 0
while (ii < iStringLength / 100) do
fprints(SJsonFile, strsub(gSTriangle4BassMonoSynth_Json[1], 100 * ii, 100 * ii + 100))
ii += 1
od
if (100 * ii < iStringLength) then
fprints(SJsonFile, strsub(gSTriangle4BassMonoSynth_Json[1], 100 * ii, iStringLength))
endif
fprints(SJsonFile, "]}}")
ficlose(SJsonFile)
gSTriangle4BassMonoSynth_Json[1] = ""
turnoff
endin
#end
instr 12
iEventType = p4
if (iEventType == 4) then
iCcIndex = p5
iCcValue = p6
if (strcmp(gSCcInfo_Triangle4BassMonoSynth[iCcIndex][$CC_INFO_TYPE], "string") == 0) then
gSCcValues_Triangle4BassMonoSynth[1][iCcIndex] = strget(iCcValue)
else
giCcValues_Triangle4BassMonoSynth[1][iCcIndex] = iCcValue
gkCcValues_Triangle4BassMonoSynth[1][iCcIndex] = iCcValue
endif
turnoff
elseif (iEventType == 2) then
gkTriangle4BassMonoSynth_ActiveNoteCount[1] =
gkTriangle4BassMonoSynth_ActiveNoteCount[1] - 1
turnoff
elseif (iEventType == 1) then
iNoteNumber = p5
iVelocity = p6
kActiveNoteCountIncremented init 0
if (kActiveNoteCountIncremented == 0) then
gkTriangle4BassMonoSynth_ActiveNoteCount[1] =
gkTriangle4BassMonoSynth_ActiveNoteCount[1] + 1
kActiveNoteCountIncremented = 1
endif
xtratim(1 / kr)
kReleased = release()
if (kReleased == 1) then
event("i", int(p1), 0, 1, 2, 0, 0)
turnoff
endif
if (giTriangle4BassMonoSynth_MonoHandlerIsActive[1] == 0) then
event_i("i", int(p1) + .9999 , 0, -1, 6, 0, 0)
endif
gkTriangle4BassMonoSynth_NoteNumber[1] = iNoteNumber
elseif (iEventType == 7) then
giTriangle4BassMonoSynth_MonoHandlerIsActive[1] = 0
#ifdef IS_GENERATING_JSON
event_i("i", "JsonWrite_12", 0, -1)
#end
turnoff
elseif (iEventType == 6) then
giTriangle4BassMonoSynth_MonoHandlerIsActive[1] = 1
iOrcInstanceIndex = 1
iAmp = 0.4
aOut = 0
a1 = 0
a2 = 0
a3 = 0
a4 = 0
#ifdef IS_GENERATING_JSON
if (giTriangle4BassMonoSynth_NoteIndex[1] == 0) then
scoreline_i(sprintf("i \\"%s\\" 0 0", "Json_12"))
endif
giTriangle4BassMonoSynth_NoteIndex[1] = giTriangle4BassMonoSynth_NoteIndex[1] + 1
iStartTime = times:i()
kTime = (times:k() - 1 / kr) - iStartTime
SiJson = sprintf("{\\"note\\":{\\"onTime\\":%.3f", iStartTime)
SiJson = strcat(SiJson, ",\\"k\\":[")
scoreline_i(sprintf("i \\"%s\\" 0 -1 \\"%s\\"", "JsonAppend_12", string_escape_i(SiJson)))
#end
iVolumeEnvelopeAttackSlope = giSecondsPerSample / $TriangleMonoSynth_VolumeEnvelopeAttackTime
iVolumeEnvelopeDecaySlope = -giSecondsPerSample / $TriangleMonoSynth_VolumeEnvelopeDecayTime
kVolumeEnvelopeModifier init 0
kActiveNoteCount = gkTriangle4BassMonoSynth_ActiveNoteCount[1]
kActiveNoteCountPrevious init 0
kNoteNumberWhenActivated init 0
kActiveNoteCountChanged = 0
kNoteNumberNeedsLag init 0
if (changed2(kActiveNoteCount) == 1 || kActiveNoteCountPrevious == 0) then
if (kActiveNoteCount == 1 && kActiveNoteCountPrevious == 0) then
kNoteNumberWhenActivated = gkTriangle4BassMonoSynth_NoteNumber[1]
kActiveNoteCountChanged = 1
kNoteNumberNeedsLag = 0
kVolumeEnvelopeModifier = iVolumeEnvelopeAttackSlope
elseif (kActiveNoteCount == 0) then
kVolumeEnvelopeModifier = iVolumeEnvelopeDecaySlope
endif
kActiveNoteCountPrevious = kActiveNoteCount
endif
aVolumeEnvelope init 0
kVolumeEnvelope init 0
if (kVolumeEnvelopeModifier == 0) then
aVolumeEnvelope = kVolumeEnvelope
else
kI = 0
while (kI < ksmps) do
vaset(kVolumeEnvelope, kI, aVolumeEnvelope)
kVolumeEnvelope += kVolumeEnvelopeModifier
if (kVolumeEnvelope < 0) then
kVolumeEnvelope = 0
kVolumeEnvelopeModifier = 0
elseif (kVolumeEnvelope > 1) then
kVolumeEnvelope = 1
kVolumeEnvelopeModifier = 0
endif
kI += 1
od
endif
if (kVolumeEnvelope == 0) then
if (kActiveNoteCount == 0) then
event("i", int(p1), 0, 1, 7, 0, 0)
#ifdef IS_GENERATING_JSON
SkJson = sprintfk(",{\\"time\\":%.3f,\\"volume\\":0}", kTime)
scoreline(sprintfk("i \\"%s\\" 0 -1 \\"%s\\"", "JsonAppend_12", string_escape_k(SkJson)), k(1))
#end
turnoff
endif
kgoto end__mono_handler
endif
kNoteNumber init 0
kCurrentNoteNumber = gkTriangle4BassMonoSynth_NoteNumber[1]
if (changed2(kCurrentNoteNumber) == 1) then
if (kActiveNoteCountChanged == 0) then
kNoteNumberNeedsLag = 1
endif
endif
kNoteNumberLagTime init 0
if (kNoteNumberNeedsLag == 0) then
kNoteNumberLagTime = 0
else
kNoteNumberLagTime = $TriangleMonoSynth_NoteNumberLagTime
endif
kNoteNumber = lag:k(kCurrentNoteNumber, kNoteNumberLagTime)
kCps = cpsmidinn(kNoteNumber)
aOut = vco2(iAmp, kCps, 12, 0.5, 0, $TriangleMonoSynth_VcoBandwith)
aOut *= aVolumeEnvelope
$TriangleMonoSynth_EffectChain(aOut)
if (gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionEnabled] == 1) then
iPositionLagTime = 2
kPositionMaxAmpWhenClose = lag:k(gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionMaxAmpWhenClose], iPositionLagTime)
kPositionReferenceDistance = lag:k(gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionReferenceDistance], iPositionLagTime)
kPositionRolloffFactor = lag:k(gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionRolloffFactor], iPositionLagTime)
kX, kY, kZ dEd_position gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionOpcodeComboBoxIndex]
kX *= lag:k(gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionXScale], iPositionLagTime)
kY *= lag:k(gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionYScale], iPositionLagTime)
kZ *= lag:k(gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionZScale], iPositionLagTime)
kX += lag:k(gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionXOffset], iPositionLagTime)
kY += lag:k(gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionYOffset], iPositionLagTime)
kZ += lag:k(gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionZOffset], iPositionLagTime)
iScaleFactorX = random:i(-20, 20)
kX *= iScaleFactorX
aDistance = AF_3D_Audio_SourceDistance_a(kX, kY, kZ)
aDistanceAmp = AF_3D_Audio_DistanceAttenuation:a(aDistance, kPositionReferenceDistance, kPositionRolloffFactor)
aOut *= min(aDistanceAmp, a(kPositionMaxAmpWhenClose))
AF_3D_Audio_ChannelGains_XYZ(kX, kY, kZ)
a1 = a(gkAmbisonicChannelGains[0]) * aOut
a2 = a(gkAmbisonicChannelGains[1]) * aOut
a3 = a(gkAmbisonicChannelGains[2]) * aOut
a4 = a(gkAmbisonicChannelGains[3]) * aOut
else
a1 = aOut
a2 = 0
a3 = 0
a4 = 0
endif
#ifdef IS_GENERATING_JSON
kJsonChanged_Any init 1
kJsonChanged_NoteNumber init 1
kJsonChanged_Volume init 1
kJsonChanged_X init 1
kJsonChanged_Y init 1
kJsonChanged_Z init 1
kJsonPrevious_NoteNumber init 0
kJsonPrevious_Volume init 0
kJsonPrevious_X init 0
kJsonPrevious_Y init 0
kJsonPrevious_Z init 0
kNoteNumber_Rounded = round:k(kNoteNumber * 1000) / 1000
kVolume_Rounded = round:k(kVolumeEnvelope * 1000) / 1000
kX_Rounded = round:k(kX * 1000) / 1000
kY_Rounded = round:k(kY * 1000) / 1000
kZ_Rounded = round:k(kZ * 1000) / 1000
kJsonFirstPass init 1
if (kJsonFirstPass == 0) then
kJsonChanged_Any = 0
kJsonChanged_NoteNumber = 0
kJsonChanged_Volume = 0
kJsonChanged_X = 0
kJsonChanged_Y = 0
kJsonChanged_Z = 0
if (kJsonPrevious_NoteNumber != kNoteNumber_Rounded) then
kJsonPrevious_NoteNumber = kNoteNumber_Rounded
kJsonChanged_Any = 1
kJsonChanged_NoteNumber = 1
endif
if (kJsonPrevious_Volume != kVolume_Rounded) then
kJsonPrevious_Volume = kVolume_Rounded
kJsonChanged_Any = 1
kJsonChanged_Volume = 1
endif
if (kJsonPrevious_X != kX_Rounded) then
kJsonPrevious_X = kX_Rounded
kJsonChanged_Any = 1
kJsonChanged_X = 1
endif
if (kJsonPrevious_Y != kY_Rounded) then
kJsonPrevious_Y = kY_Rounded
kJsonChanged_Any = 1
kJsonChanged_Y = 1
endif
if (kJsonPrevious_Z != kZ_Rounded) then
kJsonPrevious_Z = kZ_Rounded
kJsonChanged_Any = 1
kJsonChanged_Z = 1
endif
endif
if (kJsonChanged_Any == 1) then
SkJson = sprintfk("%s", "")
if (kJsonFirstPass == 0) then
SkJson = strcatk(SkJson, "\\n,")
endif
SkJson = strcatk(SkJson, "{")
SkJson = strcatk(SkJson, sprintfk("\\"time\\":%.3f", kTime))
if (kJsonChanged_NoteNumber == 1) then
SkJson = strcatk(SkJson, sprintfk(",\\"pitch\\":%.3f", kNoteNumber_Rounded))
endif
if (kJsonChanged_Volume == 1) then
SkJson = strcatk(SkJson, sprintfk(",\\"volume\\":%.3f", kVolume_Rounded))
endif
if (gkCcValues_Triangle4BassMonoSynth[iOrcInstanceIndex][giCc_Triangle4BassMonoSynth_positionEnabled] == 1) then
if (kJsonChanged_X == 1) then
SkJson = strcatk(SkJson, sprintfk(",\\"x\\":%.3f", kX_Rounded))
endif
if (kJsonChanged_Y == 1) then
SkJson = strcatk(SkJson, sprintfk(",\\"y\\":%.3f", kY_Rounded))
endif
if (kJsonChanged_Z == 1) then
SkJson = strcatk(SkJson, sprintfk(",\\"z\\":%.3f", kZ_Rounded))
endif
endif
SkJson = strcatk(SkJson, "}")
scoreline(sprintfk("i \\"%s\\" 0 -1 \\"%s\\"", "JsonAppend_12", string_escape_k(SkJson)), k(1))
endif
kJsonFirstPass = 0
#end
end__mono_handler:
chnset(a1, "8/0")
chnset(a2, "8/1")
chnset(a3, "8/2")
chnset(a4, "8/3")
chnset(aOut, "8/4")
chnset(aOut, "8/5")
endif
end:
endin
instr Preallocate_12
ii = 0
while (ii < giPresetUuidPreallocationCount[8]) do
scoreline_i(sprintf("i %d.%.3d 0 .1 %d 63 63", 12, ii, 3))
ii += 1
od
turnoff
endin
scoreline_i(sprintf("i \\"Preallocate_%d\\" 0 -1", 12))
#ifndef MIX_CHANNEL_COUNT
#ifdef INTERNAL_CHANNEL_COUNT
#define MIX_CHANNEL_COUNT # $INTERNAL_CHANNEL_COUNT #
#else
#define MIX_CHANNEL_COUNT # 6 #
#endif
#endif
ii = 0
while (ii < $MIX_CHANNEL_COUNT) do
chn_a(sprintf("%s/%d", "9", ii), 2)
ii += 1
od
#ifndef ADSR_LINSEGR_UDO_ORC
#define ADSR_LINSEGR_UDO_ORC ##
opcode adsr_linsegr, a, iiii
iA, iD, iS, iR xin
iA = max(0.000001, iA)
iD = max(0.000001, iD)
iR = max(0.000001, iR)
aOut = linsegr(0, iA, 1, iD, iS, 1, iS, iR, 0)
xout aOut
endop
opcode adsr_linsegr, k, kkkk
iA, iD, iS, iR xin
iA = max(0.000001, iA)
iD = max(0.000001, iD)
iR = max(0.000001, iR)
kOut = linsegr(0, iA, 1, iD, iS, 1, iS, iR, 0)
xout kOut
endop
#end
gSCcInfo_Saw1RimSynth[] = fillarray( \\
\\
"positionEnabled", "bool", "true", "synced", "positionMaxAmpWhenClose", "number", "1", "synced", "positionReferenceDistance", "number", "0.1", "synced", "positionRolloffFactor", "number", "0.01", "synced", "positionOpcodeComboBoxIndex", "number", "0", "synced", "positionOpcode", "string", "", "synced", "positionXScale", "number", "100", "synced", "positionYScale", "number", "100", "synced", "positionZScale", "number", "100", "synced", "positionXOffset", "number", "0", "synced", "positionYOffset", "number", "0", "synced", "positionZOffset", "number", "0", "synced",
\\
"", "", "", "")
#ifdef gSCcInfo_Saw1RimSynth_Count
#undef gSCcInfo_Saw1RimSynth_Count
#end
#define gSCcInfo_Saw1RimSynth_Count #52#
#define CC_INFO_CHANNEL #0#
#define CC_INFO_TYPE #1#
#define CC_INFO_VALUE #2#
#define CC_INFO_SYNC_TYPE #3#
#define CC_NO_SYNC #0#
#define CC_SYNC_TO_CHANNEL #1#
#define CC_CHANNEL_NAME(channel) #gSCcInfo_Saw1RimSynth[giCc_Saw1RimSynth_$channel][$CC_INFO_CHANNEL]#
#ifdef gSCcInfo_Saw1RimSynth_Count
if (lenarray(gSCcInfo_Saw1RimSynth) != $gSCcInfo_Saw1RimSynth_Count) igoto skipCcInfoReshapeArray_Saw1RimSynth
giCcCount_Saw1RimSynth = (lenarray(gSCcInfo_Saw1RimSynth) / 4) - 1
reshapearray(gSCcInfo_Saw1RimSynth, giCcCount_Saw1RimSynth + 1, 4)
skipCcInfoReshapeArray_Saw1RimSynth:
#else
giCcCount_Saw1RimSynth = (lenarray(gSCcInfo_Saw1RimSynth) / 4) - 1
reshapearray(gSCcInfo_Saw1RimSynth, giCcCount_Saw1RimSynth + 1, 4)
#end
opcode ccIndex_Saw1RimSynth, i, S
SChannel xin
kgoto end
iI = 0
while (iI < giCcCount_Saw1RimSynth) do
if (strcmp(gSCcInfo_Saw1RimSynth[iI][$CC_INFO_CHANNEL], SChannel) == 0) igoto end
iI += 1
od
iI = -1
end:
xout iI
endop
gSCcValueDefaults_Saw1RimSynth[] init giCcCount_Saw1RimSynth
giCcValueDefaults_Saw1RimSynth[] init giCcCount_Saw1RimSynth
gSCcValues_Saw1RimSynth[][] init 3, giCcCount_Saw1RimSynth
giCcValues_Saw1RimSynth[][] init 3, giCcCount_Saw1RimSynth
gkCcValues_Saw1RimSynth[][] init 3, giCcCount_Saw1RimSynth
gkCcSyncTypes_Saw1RimSynth[][] init 3, giCcCount_Saw1RimSynth
instr Saw1RimSynth_InitializeCcValues
iI = 0
while (iI < giCcCount_Saw1RimSynth) do
SType = gSCcInfo_Saw1RimSynth[iI][$CC_INFO_TYPE]
SValue = gSCcInfo_Saw1RimSynth[iI][$CC_INFO_VALUE]
iJ = 0
while (iJ < 3) do
iValue = -1
if (strcmp(SType, "string") == 0) then
gSCcValueDefaults_Saw1RimSynth[iI] = SValue
gSCcValues_Saw1RimSynth[iJ][iI] = SValue
else
if (strcmp(SType, "bool") == 0) then
if (strcmp(SValue, "false") == 0) then
iValue = 0
else
iValue = 1
endif
elseif (strcmp(SType, "number") == 0 && strcmp(SValue, "") != 0) then
iValue = strtod(SValue)
endif
giCcValueDefaults_Saw1RimSynth[iI] = iValue
giCcValues_Saw1RimSynth[iJ][iI] = iValue
endif
iJ += 1
od
iI += 1
od
igoto end
kI = 0
while (kI < giCcCount_Saw1RimSynth) do
SType = gSCcInfo_Saw1RimSynth[kI][$CC_INFO_TYPE]
SValue = gSCcInfo_Saw1RimSynth[kI][$CC_INFO_VALUE]
SSyncType = gSCcInfo_Saw1RimSynth[kI][$CC_INFO_SYNC_TYPE]
kJ = 0
while (kJ < 3) do
kValue = -1
if (strcmpk(SType, "bool") == 0) then
if (strcmpk(SValue, "false") == 0) then
kValue = 0
else
kValue = 1
endif
elseif (strcmpk(SType, "number") == 0 && strcmpk(SValue, "") != 0) then
kValue = strtodk(SValue)
endif
gkCcValues_Saw1RimSynth[kJ][kI] = kValue
gkCcSyncTypes_Saw1RimSynth[kJ][kI] = $CC_NO_SYNC
if (strcmpk(SSyncType, "synced") == 0) then
gkCcSyncTypes_Saw1RimSynth[kJ][kI] = $CC_SYNC_TO_CHANNEL
endif
kJ += 1
od
kI += 1
od
turnoff
end:
endin
event_i("i", "Saw1RimSynth_InitializeCcValues", 0, -1)
instr Saw1RimSynth_CreateCcIndexes
giCc_Saw1RimSynth_positionEnabled init ccIndex_Saw1RimSynth("positionEnabled")
giCc_Saw1RimSynth_positionMaxAmpWhenClose init ccIndex_Saw1RimSynth("positionMaxAmpWhenClose")
giCc_Saw1RimSynth_positionReferenceDistance init ccIndex_Saw1RimSynth("positionReferenceDistance")
giCc_Saw1RimSynth_positionRolloffFactor init ccIndex_Saw1RimSynth("positionRolloffFactor")
giCc_Saw1RimSynth_positionOpcodeComboBoxIndex init ccIndex_Saw1RimSynth("positionOpcodeComboBoxIndex")
giCc_Saw1RimSynth_positionOpcode init ccIndex_Saw1RimSynth("positionOpcode")
giCc_Saw1RimSynth_positionXScale init ccIndex_Saw1RimSynth("positionXScale")
giCc_Saw1RimSynth_positionYScale init ccIndex_Saw1RimSynth("positionYScale")
giCc_Saw1RimSynth_positionZScale init ccIndex_Saw1RimSynth("positionZScale")
giCc_Saw1RimSynth_positionXOffset init ccIndex_Saw1RimSynth("positionXOffset")
giCc_Saw1RimSynth_positionYOffset init ccIndex_Saw1RimSynth("positionYOffset")
giCc_Saw1RimSynth_positionZOffset init ccIndex_Saw1RimSynth("positionZOffset")
turnoff
endin
event_i("i", "Saw1RimSynth_CreateCcIndexes", 0, -1)
giSaw1RimSynth_PlaybackVolumeAdjustment = 0.9
giSaw1RimSynth_PlaybackReverbAdjustment = 1.5
giSaw1RimSynth_NoteNumber1 = 89
giSaw1RimSynth_NoteNumber2 = 91
giSaw1RimSynth_NoteNumber3 = 93
giSaw1RimSynth_RimPositionCount = 20
giSaw1RimSynth_RimPositionOffset = 0
giSaw1RimSynth_NoteIndex[] init 3
giSaw1RimSynth_MeshSegmentCount init ${SHARED.Rim1HiArpMesh.segments}
giSaw1RimSynth_MeshRowCount init ${SHARED.Rim1HiArpMesh.rows}
giSaw1RimSynth_MeshAudioPositions[] init ${SHARED.Rim1HiArpMesh.audioPositionsString}
#ifdef IS_GENERATING_JSON
gSPluginUuids[9][0] = "d51fb1d5a0104857a7f61b218692743c"
instr Json_13
SJsonFile = sprintf("json/%s.0.json", "d51fb1d5a0104857a7f61b218692743c")
iPositionIndexOffset = (giSaw1RimSynth_MeshSegmentCount / 2) / giSaw1RimSynth_RimPositionCount
fprints(SJsonFile, "{")
fprints(SJsonFile, sprintf("\\"instanceName\\":\\"%s\\"", "-"))
fprints(SJsonFile, sprintf(",\\"positionCount\\":%d", giSaw1RimSynth_RimPositionCount))
fprints(SJsonFile, sprintf(",\\"positionIndexOffset\\":%d", iPositionIndexOffset))
fprints(SJsonFile, "}")
turnoff
endin
#end
instr 13
iEventType = p4
if (iEventType == 4) then
iCcIndex = p5
iCcValue = p6
if (strcmp(gSCcInfo_Saw1RimSynth[iCcIndex][$CC_INFO_TYPE], "string") == 0) then
gSCcValues_Saw1RimSynth[0][iCcIndex] = strget(iCcValue)
else
giCcValues_Saw1RimSynth[0][iCcIndex] = iCcValue
gkCcValues_Saw1RimSynth[0][iCcIndex] = iCcValue
endif
turnoff
elseif (iEventType == 1) then
iNoteNumber = p5
iVelocity = p6
iOrcInstanceIndex = 0
aOut = 0
a1 = 0
a2 = 0
a3 = 0
a4 = 0
#ifdef IS_GENERATING_JSON
if (giSaw1RimSynth_NoteIndex[0] == 0) then
scoreline_i(sprintf("i \\"%s\\" 0 0", "Json_13"))
endif
giSaw1RimSynth_NoteIndex[0] = giSaw1RimSynth_NoteIndex[0] + 1
SJsonFile = sprintf("json/%s.%d.json",
"d51fb1d5a0104857a7f61b218692743c",
giSaw1RimSynth_NoteIndex[0])
iOnTime = times:i()
fprints(SJsonFile, "{\\"note\\":{\\"onTime\\":%.3f,\\"pitch\\":%.3f", iOnTime, iNoteNumber)
#end
kAmp init 0.333 * (iVelocity / 127)
aOut = vco2(kAmp, cpsmidinn(iNoteNumber), 8)
iEnvelopeA = 0.01
iEnvelopeD = 0.1
iEnvelopeS = 0.667
iEnvelopeR = 0.1
iEnvelopeS_decayTime = 0.333 + 66 * (1 - iNoteNumber / 127)
iEnvelopeS_decayAmountMinimum = 0.001 * (1 - iNoteNumber / 127)
aOut *= mxadsr:a(iEnvelopeA, iEnvelopeD, iEnvelopeS, iEnvelopeR)
iEnvelopeS_decayStartTime = iEnvelopeA + iEnvelopeD
iEnvelopeS_decayEndTime = iEnvelopeS_decayStartTime + iEnvelopeS_decayTime
aEnvelopeS_decayAmount init 1
kTime = time_NoteTime:k()
if (kTime >= iEnvelopeS_decayStartTime && kTime < iEnvelopeS_decayEndTime) then
aEnvelopeS_decayAmount = expon(1, iEnvelopeS_decayTime, iEnvelopeS_decayAmountMinimum)
endif
aOut *= aEnvelopeS_decayAmount
if (gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionEnabled] == 1) then
iPositionLagTime = 2
kPositionMaxAmpWhenClose = lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionMaxAmpWhenClose], iPositionLagTime)
kPositionReferenceDistance = lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionReferenceDistance], iPositionLagTime)
kPositionRolloffFactor = lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionRolloffFactor], iPositionLagTime)
kX, kY, kZ dEd_position gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionOpcodeComboBoxIndex]
kX *= lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionXScale], iPositionLagTime)
kY *= lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionYScale], iPositionLagTime)
kZ *= lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionZScale], iPositionLagTime)
kX += lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionXOffset], iPositionLagTime)
kY += lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionYOffset], iPositionLagTime)
kZ += lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionZOffset], iPositionLagTime)
a1 = 0
a2 = 0
a3 = 0
a4 = 0
iMeshRow = 0
if (iNoteNumber == giSaw1RimSynth_NoteNumber2) then
iMeshRow = 1
elseif (iNoteNumber == giSaw1RimSynth_NoteNumber3) then
iMeshRow = 2
endif
iMeshSegmentCountD2 = giSaw1RimSynth_MeshSegmentCount / 2
iRimIndexCount = lenarray(giSaw1RimSynth_MeshAudioPositions) / 3
iIndex = (((iMeshRow * iMeshSegmentCountD2) % iRimIndexCount) * 3) + 1
iY = giSaw1RimSynth_MeshAudioPositions[iIndex]
kY = iY
iRimPositionIndexOffset = iMeshSegmentCountD2 / giSaw1RimSynth_RimPositionCount
kRimPositionIndex = 0
kRimPositionIndexWithOffset = 0
kPrinted init 0
kX = 0
kZ = 0
aDistance = AF_3D_Audio_SourceDistance_a(kX, kY, kZ)
aDistanceAmp = AF_3D_Audio_DistanceAttenuation:a(
aDistance,
kPositionReferenceDistance,
kPositionRolloffFactor)
aPositionOut = aOut * min(aDistanceAmp, a(kPositionMaxAmpWhenClose))
aReverbOut = aOut * (1 - (1 - aDistanceAmp) / 5)
AF_3D_Audio_ChannelGains_XYZ(kX, kY, kZ, 90)
a1 = a(gkAmbisonicChannelGains[0]) * aPositionOut
a2 = a(gkAmbisonicChannelGains[1]) * aPositionOut
a3 = a(gkAmbisonicChannelGains[2]) * aPositionOut
a4 = a(gkAmbisonicChannelGains[3]) * aPositionOut
kRimPositionIndex += 1
kRimPositionIndexWithOffset += iRimPositionIndexOffset
#ifdef IS_GENERATING_JSON
iPositionIndex = giSaw1RimSynth_RimPositionOffset + (iMeshRow * iMeshSegmentCountD2)
iPositionIndex = iPositionIndex % iRimIndexCount
fprints(SJsonFile, ",\\"positionIndex\\":%d", iPositionIndex)
#end
if (iNoteNumber == giSaw1RimSynth_NoteNumber3) then
giSaw1RimSynth_RimPositionOffset += 1
endif
else
a1 = aOut
a2 = 0
a3 = 0
a4 = 0
endif
chnmix(a1, "9/0")
chnmix(a2, "9/1")
chnmix(a3, "9/2")
chnmix(a4, "9/3")
chnmix(aReverbOut, "9/4")
chnmix(aReverbOut, "9/5")
#ifdef IS_GENERATING_JSON
if (lastcycle() == 1) then
fprintks(SJsonFile, ",\\"offTime\\":%.3f}}", timeinsts() + iOnTime)
endif
#end
endif
end:
endin
instr Preallocate_13
ii = 0
while (ii < giPresetUuidPreallocationCount[9]) do
scoreline_i(sprintf("i %d.%.3d 0 .1 %d 63 63", 13, ii, 3))
ii += 1
od
turnoff
endin
scoreline_i(sprintf("i \\"Preallocate_%d\\" 0 -1", 13))
#ifndef MIX_CHANNEL_COUNT
#ifdef INTERNAL_CHANNEL_COUNT
#define MIX_CHANNEL_COUNT # $INTERNAL_CHANNEL_COUNT #
#else
#define MIX_CHANNEL_COUNT # 6 #
#endif
#endif
ii = 0
while (ii < $MIX_CHANNEL_COUNT) do
chn_a(sprintf("%s/%d", "10", ii), 2)
ii += 1
od
#ifdef IS_GENERATING_JSON
gSPluginUuids[10][0] = "14afc0dff693459fb6fc521bcf3db0bc"
instr Json_14
SJsonFile = sprintf("json/%s.0.json", "14afc0dff693459fb6fc521bcf3db0bc")
iPositionIndexOffset = (giSaw1RimSynth_MeshSegmentCount / 2) / giSaw1RimSynth_RimPositionCount
fprints(SJsonFile, "{")
fprints(SJsonFile, sprintf("\\"instanceName\\":\\"%s\\"", "-"))
fprints(SJsonFile, sprintf(",\\"positionCount\\":%d", giSaw1RimSynth_RimPositionCount))
fprints(SJsonFile, sprintf(",\\"positionIndexOffset\\":%d", iPositionIndexOffset))
fprints(SJsonFile, "}")
turnoff
endin
#end
instr 14
iEventType = p4
if (iEventType == 4) then
iCcIndex = p5
iCcValue = p6
if (strcmp(gSCcInfo_Saw1RimSynth[iCcIndex][$CC_INFO_TYPE], "string") == 0) then
gSCcValues_Saw1RimSynth[1][iCcIndex] = strget(iCcValue)
else
giCcValues_Saw1RimSynth[1][iCcIndex] = iCcValue
gkCcValues_Saw1RimSynth[1][iCcIndex] = iCcValue
endif
turnoff
elseif (iEventType == 1) then
iNoteNumber = p5
iVelocity = p6
iOrcInstanceIndex = 1
aOut = 0
a1 = 0
a2 = 0
a3 = 0
a4 = 0
#ifdef IS_GENERATING_JSON
if (giSaw1RimSynth_NoteIndex[1] == 0) then
scoreline_i(sprintf("i \\"%s\\" 0 0", "Json_14"))
endif
giSaw1RimSynth_NoteIndex[1] = giSaw1RimSynth_NoteIndex[1] + 1
SJsonFile = sprintf("json/%s.%d.json",
"14afc0dff693459fb6fc521bcf3db0bc",
giSaw1RimSynth_NoteIndex[1])
iOnTime = times:i()
fprints(SJsonFile, "{\\"note\\":{\\"onTime\\":%.3f,\\"pitch\\":%.3f", iOnTime, iNoteNumber)
#end
kAmp init 0.333 * (iVelocity / 127)
aOut = vco2(kAmp, cpsmidinn(iNoteNumber), 8)
iEnvelopeA = 0.01
iEnvelopeD = 0.1
iEnvelopeS = 0.667
iEnvelopeR = 0.1
iEnvelopeS_decayTime = 0.333 + 66 * (1 - iNoteNumber / 127)
iEnvelopeS_decayAmountMinimum = 0.001 * (1 - iNoteNumber / 127)
aOut *= mxadsr:a(iEnvelopeA, iEnvelopeD, iEnvelopeS, iEnvelopeR)
iEnvelopeS_decayStartTime = iEnvelopeA + iEnvelopeD
iEnvelopeS_decayEndTime = iEnvelopeS_decayStartTime + iEnvelopeS_decayTime
aEnvelopeS_decayAmount init 1
kTime = time_NoteTime:k()
if (kTime >= iEnvelopeS_decayStartTime && kTime < iEnvelopeS_decayEndTime) then
aEnvelopeS_decayAmount = expon(1, iEnvelopeS_decayTime, iEnvelopeS_decayAmountMinimum)
endif
aOut *= aEnvelopeS_decayAmount
if (gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionEnabled] == 1) then
iPositionLagTime = 2
kPositionMaxAmpWhenClose = lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionMaxAmpWhenClose], iPositionLagTime)
kPositionReferenceDistance = lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionReferenceDistance], iPositionLagTime)
kPositionRolloffFactor = lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionRolloffFactor], iPositionLagTime)
kX, kY, kZ dEd_position gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionOpcodeComboBoxIndex]
kX *= lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionXScale], iPositionLagTime)
kY *= lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionYScale], iPositionLagTime)
kZ *= lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionZScale], iPositionLagTime)
kX += lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionXOffset], iPositionLagTime)
kY += lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionYOffset], iPositionLagTime)
kZ += lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionZOffset], iPositionLagTime)
a1 = 0
a2 = 0
a3 = 0
a4 = 0
iMeshRow = 0
if (iNoteNumber == giSaw1RimSynth_NoteNumber2) then
iMeshRow = 1
elseif (iNoteNumber == giSaw1RimSynth_NoteNumber3) then
iMeshRow = 2
endif
iMeshSegmentCountD2 = giSaw1RimSynth_MeshSegmentCount / 2
iRimIndexCount = lenarray(giSaw1RimSynth_MeshAudioPositions) / 3
iIndex = (((iMeshRow * iMeshSegmentCountD2) % iRimIndexCount) * 3) + 1
iY = giSaw1RimSynth_MeshAudioPositions[iIndex]
kY = iY
iRimPositionIndexOffset = iMeshSegmentCountD2 / giSaw1RimSynth_RimPositionCount
kRimPositionIndex = 0
kRimPositionIndexWithOffset = 0
kPrinted init 0
kX = 0
kZ = 0
aDistance = AF_3D_Audio_SourceDistance_a(kX, kY, kZ)
aDistanceAmp = AF_3D_Audio_DistanceAttenuation:a(
aDistance,
kPositionReferenceDistance,
kPositionRolloffFactor)
aPositionOut = aOut * min(aDistanceAmp, a(kPositionMaxAmpWhenClose))
aReverbOut = aOut * (1 - (1 - aDistanceAmp) / 5)
AF_3D_Audio_ChannelGains_XYZ(kX, kY, kZ, 90)
a1 = a(gkAmbisonicChannelGains[0]) * aPositionOut
a2 = a(gkAmbisonicChannelGains[1]) * aPositionOut
a3 = a(gkAmbisonicChannelGains[2]) * aPositionOut
a4 = a(gkAmbisonicChannelGains[3]) * aPositionOut
kRimPositionIndex += 1
kRimPositionIndexWithOffset += iRimPositionIndexOffset
#ifdef IS_GENERATING_JSON
iPositionIndex = giSaw1RimSynth_RimPositionOffset + (iMeshRow * iMeshSegmentCountD2)
iPositionIndex = iPositionIndex % iRimIndexCount
fprints(SJsonFile, ",\\"positionIndex\\":%d", iPositionIndex)
#end
if (iNoteNumber == giSaw1RimSynth_NoteNumber3) then
giSaw1RimSynth_RimPositionOffset += 1
endif
else
a1 = aOut
a2 = 0
a3 = 0
a4 = 0
endif
chnmix(a1, "10/0")
chnmix(a2, "10/1")
chnmix(a3, "10/2")
chnmix(a4, "10/3")
chnmix(aReverbOut, "10/4")
chnmix(aReverbOut, "10/5")
#ifdef IS_GENERATING_JSON
if (lastcycle() == 1) then
fprintks(SJsonFile, ",\\"offTime\\":%.3f}}", timeinsts() + iOnTime)
endif
#end
endif
end:
endin
instr Preallocate_14
ii = 0
while (ii < giPresetUuidPreallocationCount[10]) do
scoreline_i(sprintf("i %d.%.3d 0 .1 %d 63 63", 14, ii, 3))
ii += 1
od
turnoff
endin
scoreline_i(sprintf("i \\"Preallocate_%d\\" 0 -1", 14))
#ifndef MIX_CHANNEL_COUNT
#ifdef INTERNAL_CHANNEL_COUNT
#define MIX_CHANNEL_COUNT # $INTERNAL_CHANNEL_COUNT #
#else
#define MIX_CHANNEL_COUNT # 6 #
#endif
#endif
ii = 0
while (ii < $MIX_CHANNEL_COUNT) do
chn_a(sprintf("%s/%d", "11", ii), 2)
ii += 1
od
#ifdef IS_GENERATING_JSON
gSPluginUuids[11][0] = "5006b8ea266f4bf9aba92ff5badfea3e"
instr Json_15
SJsonFile = sprintf("json/%s.0.json", "5006b8ea266f4bf9aba92ff5badfea3e")
iPositionIndexOffset = (giSaw1RimSynth_MeshSegmentCount / 2) / giSaw1RimSynth_RimPositionCount
fprints(SJsonFile, "{")
fprints(SJsonFile, sprintf("\\"instanceName\\":\\"%s\\"", "-"))
fprints(SJsonFile, sprintf(",\\"positionCount\\":%d", giSaw1RimSynth_RimPositionCount))
fprints(SJsonFile, sprintf(",\\"positionIndexOffset\\":%d", iPositionIndexOffset))
fprints(SJsonFile, "}")
turnoff
endin
#end
instr 15
iEventType = p4
if (iEventType == 4) then
iCcIndex = p5
iCcValue = p6
if (strcmp(gSCcInfo_Saw1RimSynth[iCcIndex][$CC_INFO_TYPE], "string") == 0) then
gSCcValues_Saw1RimSynth[2][iCcIndex] = strget(iCcValue)
else
giCcValues_Saw1RimSynth[2][iCcIndex] = iCcValue
gkCcValues_Saw1RimSynth[2][iCcIndex] = iCcValue
endif
turnoff
elseif (iEventType == 1) then
iNoteNumber = p5
iVelocity = p6
iOrcInstanceIndex = 2
aOut = 0
a1 = 0
a2 = 0
a3 = 0
a4 = 0
#ifdef IS_GENERATING_JSON
if (giSaw1RimSynth_NoteIndex[2] == 0) then
scoreline_i(sprintf("i \\"%s\\" 0 0", "Json_15"))
endif
giSaw1RimSynth_NoteIndex[2] = giSaw1RimSynth_NoteIndex[2] + 1
SJsonFile = sprintf("json/%s.%d.json",
"5006b8ea266f4bf9aba92ff5badfea3e",
giSaw1RimSynth_NoteIndex[2])
iOnTime = times:i()
fprints(SJsonFile, "{\\"note\\":{\\"onTime\\":%.3f,\\"pitch\\":%.3f", iOnTime, iNoteNumber)
#end
kAmp init 0.333 * (iVelocity / 127)
aOut = vco2(kAmp, cpsmidinn(iNoteNumber), 8)
iEnvelopeA = 0.01
iEnvelopeD = 0.1
iEnvelopeS = 0.667
iEnvelopeR = 0.1
iEnvelopeS_decayTime = 0.333 + 66 * (1 - iNoteNumber / 127)
iEnvelopeS_decayAmountMinimum = 0.001 * (1 - iNoteNumber / 127)
aOut *= mxadsr:a(iEnvelopeA, iEnvelopeD, iEnvelopeS, iEnvelopeR)
iEnvelopeS_decayStartTime = iEnvelopeA + iEnvelopeD
iEnvelopeS_decayEndTime = iEnvelopeS_decayStartTime + iEnvelopeS_decayTime
aEnvelopeS_decayAmount init 1
kTime = time_NoteTime:k()
if (kTime >= iEnvelopeS_decayStartTime && kTime < iEnvelopeS_decayEndTime) then
aEnvelopeS_decayAmount = expon(1, iEnvelopeS_decayTime, iEnvelopeS_decayAmountMinimum)
endif
aOut *= aEnvelopeS_decayAmount
if (gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionEnabled] == 1) then
iPositionLagTime = 2
kPositionMaxAmpWhenClose = lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionMaxAmpWhenClose], iPositionLagTime)
kPositionReferenceDistance = lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionReferenceDistance], iPositionLagTime)
kPositionRolloffFactor = lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionRolloffFactor], iPositionLagTime)
kX, kY, kZ dEd_position gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionOpcodeComboBoxIndex]
kX *= lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionXScale], iPositionLagTime)
kY *= lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionYScale], iPositionLagTime)
kZ *= lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionZScale], iPositionLagTime)
kX += lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionXOffset], iPositionLagTime)
kY += lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionYOffset], iPositionLagTime)
kZ += lag:k(gkCcValues_Saw1RimSynth[iOrcInstanceIndex][giCc_Saw1RimSynth_positionZOffset], iPositionLagTime)
a1 = 0
a2 = 0
a3 = 0
a4 = 0
iMeshRow = 0
if (iNoteNumber == giSaw1RimSynth_NoteNumber2) then
iMeshRow = 1
elseif (iNoteNumber == giSaw1RimSynth_NoteNumber3) then
iMeshRow = 2
endif
iMeshSegmentCountD2 = giSaw1RimSynth_MeshSegmentCount / 2
iRimIndexCount = lenarray(giSaw1RimSynth_MeshAudioPositions) / 3
iIndex = (((iMeshRow * iMeshSegmentCountD2) % iRimIndexCount) * 3) + 1
iY = giSaw1RimSynth_MeshAudioPositions[iIndex]
kY = iY
iRimPositionIndexOffset = iMeshSegmentCountD2 / giSaw1RimSynth_RimPositionCount
kRimPositionIndex = 0
kRimPositionIndexWithOffset = 0
kPrinted init 0
kX = 0
kZ = 0
aDistance = AF_3D_Audio_SourceDistance_a(kX, kY, kZ)
aDistanceAmp = AF_3D_Audio_DistanceAttenuation:a(
aDistance,
kPositionReferenceDistance,
kPositionRolloffFactor)
aPositionOut = aOut * min(aDistanceAmp, a(kPositionMaxAmpWhenClose))
aReverbOut = aOut * (1 - (1 - aDistanceAmp) / 5)
AF_3D_Audio_ChannelGains_XYZ(kX, kY, kZ, 90)
a1 = a(gkAmbisonicChannelGains[0]) * aPositionOut
a2 = a(gkAmbisonicChannelGains[1]) * aPositionOut
a3 = a(gkAmbisonicChannelGains[2]) * aPositionOut
a4 = a(gkAmbisonicChannelGains[3]) * aPositionOut
kRimPositionIndex += 1
kRimPositionIndexWithOffset += iRimPositionIndexOffset
#ifdef IS_GENERATING_JSON
iPositionIndex = giSaw1RimSynth_RimPositionOffset + (iMeshRow * iMeshSegmentCountD2)
iPositionIndex = iPositionIndex % iRimIndexCount
fprints(SJsonFile, ",\\"positionIndex\\":%d", iPositionIndex)
#end
if (iNoteNumber == giSaw1RimSynth_NoteNumber3) then
giSaw1RimSynth_RimPositionOffset += 1
endif
else
a1 = aOut
a2 = 0
a3 = 0
a4 = 0
endif
chnmix(a1, "11/0")
chnmix(a2, "11/1")
chnmix(a3, "11/2")
chnmix(a4, "11/3")
chnmix(aReverbOut, "11/4")
chnmix(aReverbOut, "11/5")
#ifdef IS_GENERATING_JSON
if (lastcycle() == 1) then
fprintks(SJsonFile, ",\\"offTime\\":%.3f}}", timeinsts() + iOnTime)
endif
#end
endif
end:
endin
instr Preallocate_15
ii = 0
while (ii < giPresetUuidPreallocationCount[11]) do
scoreline_i(sprintf("i %d.%.3d 0 .1 %d 63 63", 15, ii, 3))
ii += 1
od
turnoff
endin
scoreline_i(sprintf("i \\"Preallocate_%d\\" 0 -1", 15))
#ifndef MIX_CHANNEL_COUNT
#ifdef INTERNAL_CHANNEL_COUNT
#define MIX_CHANNEL_COUNT # $INTERNAL_CHANNEL_COUNT #
#else
#define MIX_CHANNEL_COUNT # 6 #
#endif
#endif
ii = 0
while (ii < $MIX_CHANNEL_COUNT) do
chn_a(sprintf("%s/%d", "12", ii), 2)
ii += 1
od
#ifndef ADSR_LINSEGR_UDO_ORC
#define ADSR_LINSEGR_UDO_ORC ##
opcode adsr_linsegr, a, iiii
iA, iD, iS, iR xin
iA = max(0.000001, iA)
iD = max(0.000001, iD)
iR = max(0.000001, iR)
aOut = linsegr(0, iA, 1, iD, iS, 1, iS, iR, 0)
xout aOut
endop
opcode adsr_linsegr, k, kkkk
iA, iD, iS, iR xin
iA = max(0.000001, iA)
iD = max(0.000001, iD)
iR = max(0.000001, iR)
kOut = linsegr(0, iA, 1, iD, iS, 1, iS, iR, 0)
xout kOut
endop
#end
gSCcInfo_Saw2FlyerSynth[] = fillarray( \\
\\
"positionEnabled", "bool", "true", "synced", "positionMaxAmpWhenClose", "number", "1", "synced", "positionReferenceDistance", "number", "0.1", "synced", "positionRolloffFactor", "number", "0.01", "synced", "positionOpcodeComboBoxIndex", "number", "0", "synced", "positionOpcode", "string", "", "synced", "positionXScale", "number", "100", "synced", "positionYScale", "number", "100", "synced", "positionZScale", "number", "100", "synced", "positionXOffset", "number", "0", "synced", "positionYOffset", "number", "0", "synced", "positionZOffset", "number", "0", "synced", "flyerDirectionComboBoxIndex", "number", "0", "synced", "flyerDirection", "string", "", "synced",
\\
"", "", "", "")
#ifdef gSCcInfo_Saw2FlyerSynth_Count
#undef gSCcInfo_Saw2FlyerSynth_Count
#end
#define gSCcInfo_Saw2FlyerSynth_Count #52 + 8#
#define CC_INFO_CHANNEL #0#
#define CC_INFO_TYPE #1#
#define CC_INFO_VALUE #2#
#define CC_INFO_SYNC_TYPE #3#
#define CC_NO_SYNC #0#
#define CC_SYNC_TO_CHANNEL #1#
#define CC_CHANNEL_NAME(channel) #gSCcInfo_Saw2FlyerSynth[giCc_Saw2FlyerSynth_$channel][$CC_INFO_CHANNEL]#
#ifdef gSCcInfo_Saw2FlyerSynth_Count
if (lenarray(gSCcInfo_Saw2FlyerSynth) != $gSCcInfo_Saw2FlyerSynth_Count) igoto skipCcInfoReshapeArray_Saw2FlyerSynth
giCcCount_Saw2FlyerSynth = (lenarray(gSCcInfo_Saw2FlyerSynth) / 4) - 1
reshapearray(gSCcInfo_Saw2FlyerSynth, giCcCount_Saw2FlyerSynth + 1, 4)
skipCcInfoReshapeArray_Saw2FlyerSynth:
#else
giCcCount_Saw2FlyerSynth = (lenarray(gSCcInfo_Saw2FlyerSynth) / 4) - 1
reshapearray(gSCcInfo_Saw2FlyerSynth, giCcCount_Saw2FlyerSynth + 1, 4)
#end
opcode ccIndex_Saw2FlyerSynth, i, S
SChannel xin
kgoto end
iI = 0
while (iI < giCcCount_Saw2FlyerSynth) do
if (strcmp(gSCcInfo_Saw2FlyerSynth[iI][$CC_INFO_CHANNEL], SChannel) == 0) igoto end
iI += 1
od
iI = -1
end:
xout iI
endop
gSCcValueDefaults_Saw2FlyerSynth[] init giCcCount_Saw2FlyerSynth
giCcValueDefaults_Saw2FlyerSynth[] init giCcCount_Saw2FlyerSynth
gSCcValues_Saw2FlyerSynth[][] init 1, giCcCount_Saw2FlyerSynth
giCcValues_Saw2FlyerSynth[][] init 1, giCcCount_Saw2FlyerSynth
gkCcValues_Saw2FlyerSynth[][] init 1, giCcCount_Saw2FlyerSynth
gkCcSyncTypes_Saw2FlyerSynth[][] init 1, giCcCount_Saw2FlyerSynth
instr Saw2FlyerSynth_InitializeCcValues
iI = 0
while (iI < giCcCount_Saw2FlyerSynth) do
SType = gSCcInfo_Saw2FlyerSynth[iI][$CC_INFO_TYPE]
SValue = gSCcInfo_Saw2FlyerSynth[iI][$CC_INFO_VALUE]
iJ = 0
while (iJ < 1) do
iValue = -1
if (strcmp(SType, "string") == 0) then
gSCcValueDefaults_Saw2FlyerSynth[iI] = SValue
gSCcValues_Saw2FlyerSynth[iJ][iI] = SValue
else
if (strcmp(SType, "bool") == 0) then
if (strcmp(SValue, "false") == 0) then
iValue = 0
else
iValue = 1
endif
elseif (strcmp(SType, "number") == 0 && strcmp(SValue, "") != 0) then
iValue = strtod(SValue)
endif
giCcValueDefaults_Saw2FlyerSynth[iI] = iValue
giCcValues_Saw2FlyerSynth[iJ][iI] = iValue
endif
iJ += 1
od
iI += 1
od
igoto end
kI = 0
while (kI < giCcCount_Saw2FlyerSynth) do
SType = gSCcInfo_Saw2FlyerSynth[kI][$CC_INFO_TYPE]
SValue = gSCcInfo_Saw2FlyerSynth[kI][$CC_INFO_VALUE]
SSyncType = gSCcInfo_Saw2FlyerSynth[kI][$CC_INFO_SYNC_TYPE]
kJ = 0
while (kJ < 1) do
kValue = -1
if (strcmpk(SType, "bool") == 0) then
if (strcmpk(SValue, "false") == 0) then
kValue = 0
else
kValue = 1
endif
elseif (strcmpk(SType, "number") == 0 && strcmpk(SValue, "") != 0) then
kValue = strtodk(SValue)
endif
gkCcValues_Saw2FlyerSynth[kJ][kI] = kValue
gkCcSyncTypes_Saw2FlyerSynth[kJ][kI] = $CC_NO_SYNC
if (strcmpk(SSyncType, "synced") == 0) then
gkCcSyncTypes_Saw2FlyerSynth[kJ][kI] = $CC_SYNC_TO_CHANNEL
endif
kJ += 1
od
kI += 1
od
turnoff
end:
endin
event_i("i", "Saw2FlyerSynth_InitializeCcValues", 0, -1)
instr Saw2FlyerSynth_CreateCcIndexes
giCc_Saw2FlyerSynth_positionEnabled init ccIndex_Saw2FlyerSynth("positionEnabled")
giCc_Saw2FlyerSynth_positionMaxAmpWhenClose init ccIndex_Saw2FlyerSynth("positionMaxAmpWhenClose")
giCc_Saw2FlyerSynth_positionReferenceDistance init ccIndex_Saw2FlyerSynth("positionReferenceDistance")
giCc_Saw2FlyerSynth_positionRolloffFactor init ccIndex_Saw2FlyerSynth("positionRolloffFactor")
giCc_Saw2FlyerSynth_positionOpcodeComboBoxIndex init ccIndex_Saw2FlyerSynth("positionOpcodeComboBoxIndex")
giCc_Saw2FlyerSynth_positionOpcode init ccIndex_Saw2FlyerSynth("positionOpcode")
giCc_Saw2FlyerSynth_positionXScale init ccIndex_Saw2FlyerSynth("positionXScale")
giCc_Saw2FlyerSynth_positionYScale init ccIndex_Saw2FlyerSynth("positionYScale")
giCc_Saw2FlyerSynth_positionZScale init ccIndex_Saw2FlyerSynth("positionZScale")
giCc_Saw2FlyerSynth_positionXOffset init ccIndex_Saw2FlyerSynth("positionXOffset")
giCc_Saw2FlyerSynth_positionYOffset init ccIndex_Saw2FlyerSynth("positionYOffset")
giCc_Saw2FlyerSynth_positionZOffset init ccIndex_Saw2FlyerSynth("positionZOffset")
giCc_Saw2FlyerSynth_flyerDirectionComboBoxIndex init ccIndex_Saw2FlyerSynth("flyerDirectionComboBoxIndex")
giCc_Saw2FlyerSynth_flyerDirection init ccIndex_Saw2FlyerSynth("flyerDirection")
turnoff
endin
event_i("i", "Saw2FlyerSynth_CreateCcIndexes", 0, -1)
giSaw2FlyerSynth_PlaybackVolumeAdjustment = 0.9
giSaw2FlyerSynth_PlaybackReverbAdjustment = 1.5
giSaw2FlyerSynth_NoteIndex[] init 1
giSaw2FlyerSynth_Flyer1PathAudioPoints[] init ${SHARED.Flyer1Path.audioPointsString}
giSaw2FlyerSynth_Flyer1PathSpeedMultipler init ${SHARED.Flyer1Path.speedMultiplier}
giSaw2FlyerSynth_Flyer2PathAudioPoints[] init ${SHARED.Flyer2Path.audioPointsString}
giSaw2FlyerSynth_Flyer2PathSpeedMultipler init ${SHARED.Flyer2Path.speedMultiplier}
giSaw2FlyerSynth_Flyer3PathAudioPoints[] init ${SHARED.Flyer3Path.audioPointsString}
giSaw2FlyerSynth_Flyer3PathSpeedMultipler init ${SHARED.Flyer3Path.speedMultiplier}
giSaw2FlyerSynth_PathCoordinateCount init lenarray(giSaw2FlyerSynth_Flyer1PathAudioPoints)
giSaw2FlyerSynth_PathPointCount init giSaw2FlyerSynth_PathCoordinateCount / 3
giSaw2FlyerSynth_PathPointLastIndex init giSaw2FlyerSynth_PathPointCount - 1
giSaw2FlyerSynth_PathAudioPoints[][] init 3, giSaw2FlyerSynth_PathCoordinateCount
giSaw2FlyerSynth_PathSpeedMultipler[] init 3
ii = 0
while (ii < giSaw2FlyerSynth_PathCoordinateCount) do
giSaw2FlyerSynth_PathAudioPoints[0][ii] = giSaw2FlyerSynth_Flyer1PathAudioPoints[ii]
giSaw2FlyerSynth_PathAudioPoints[1][ii] = giSaw2FlyerSynth_Flyer2PathAudioPoints[ii]
giSaw2FlyerSynth_PathAudioPoints[2][ii] = giSaw2FlyerSynth_Flyer3PathAudioPoints[ii]
ii += 1
od
giSaw2FlyerSynth_PathSpeedMultipler[0] = giSaw2FlyerSynth_Flyer1PathSpeedMultipler
giSaw2FlyerSynth_PathSpeedMultipler[1] = giSaw2FlyerSynth_Flyer2PathSpeedMultipler
giSaw2FlyerSynth_PathSpeedMultipler[2] = giSaw2FlyerSynth_Flyer3PathSpeedMultipler
#ifdef IS_GENERATING_JSON
gSPluginUuids[12][0] = "89fb9657327e406b80a253b6c9d69b8a"
instr Json_16
SJsonFile = sprintf("json/%s.0.json", "89fb9657327e406b80a253b6c9d69b8a")
fprints(SJsonFile, "{")
fprints(SJsonFile, sprintf("\\"instanceName\\":\\"%s\\"", "-"))
fprints(SJsonFile, "}")
turnoff
endin
#end
instr 16
iEventType = p4
if (iEventType == 4) then
iCcIndex = p5
iCcValue = p6
if (strcmp(gSCcInfo_Saw2FlyerSynth[iCcIndex][$CC_INFO_TYPE], "string") == 0) then
gSCcValues_Saw2FlyerSynth[0][iCcIndex] = strget(iCcValue)
else
giCcValues_Saw2FlyerSynth[0][iCcIndex] = iCcValue
gkCcValues_Saw2FlyerSynth[0][iCcIndex] = iCcValue
endif
turnoff
elseif (iEventType == 1) then
iNoteNumber = p5
iVelocity = p6
iOrcInstanceIndex = 0
iFlyerDirection = giCcValues_Saw2FlyerSynth[iOrcInstanceIndex][giCc_Saw2FlyerSynth_flyerDirectionComboBoxIndex]
aOut = 0
a1 = 0
a2 = 0
a3 = 0
a4 = 0
#ifdef IS_GENERATING_JSON
if (giSaw2FlyerSynth_NoteIndex[0] == 0) then
scoreline_i(sprintf("i \\"%s\\" 0 0", "Json_16"))
endif
giSaw2FlyerSynth_NoteIndex[0] = giSaw2FlyerSynth_NoteIndex[0] + 1
SJsonFile = sprintf("json/%s.%d.json",
"89fb9657327e406b80a253b6c9d69b8a",
giSaw2FlyerSynth_NoteIndex[0])
iOnTime = times:i()
fprints(SJsonFile, "{\\"note\\":{\\"onTime\\":%.3f,\\"pitch\\":%.3f,\\"flyerDirection\\":%d", iOnTime, iNoteNumber, iFlyerDirection)
#end
if (gkCcValues_Saw2FlyerSynth[iOrcInstanceIndex][giCc_Saw2FlyerSynth_positionEnabled] == 1) then
iPositionLagTime = 2
kPositionMaxAmpWhenClose = lag:k(gkCcValues_Saw2FlyerSynth[iOrcInstanceIndex][giCc_Saw2FlyerSynth_positionMaxAmpWhenClose], iPositionLagTime)
kPositionReferenceDistance = lag:k(gkCcValues_Saw2FlyerSynth[iOrcInstanceIndex][giCc_Saw2FlyerSynth_positionReferenceDistance], iPositionLagTime)
kPositionRolloffFactor = lag:k(gkCcValues_Saw2FlyerSynth[iOrcInstanceIndex][giCc_Saw2FlyerSynth_positionRolloffFactor], iPositionLagTime)
kX, kY, kZ dEd_position gkCcValues_Saw2FlyerSynth[iOrcInstanceIndex][giCc_Saw2FlyerSynth_positionOpcodeComboBoxIndex]
kX *= lag:k(gkCcValues_Saw2FlyerSynth[iOrcInstanceIndex][giCc_Saw2FlyerSynth_positionXScale], iPositionLagTime)
kY *= lag:k(gkCcValues_Saw2FlyerSynth[iOrcInstanceIndex][giCc_Saw2FlyerSynth_positionYScale], iPositionLagTime)
kZ *= lag:k(gkCcValues_Saw2FlyerSynth[iOrcInstanceIndex][giCc_Saw2FlyerSynth_positionZScale], iPositionLagTime)
kX += lag:k(gkCcValues_Saw2FlyerSynth[iOrcInstanceIndex][giCc_Saw2FlyerSynth_positionXOffset], iPositionLagTime)
kY += lag:k(gkCcValues_Saw2FlyerSynth[iOrcInstanceIndex][giCc_Saw2FlyerSynth_positionYOffset], iPositionLagTime)
kZ += lag:k(gkCcValues_Saw2FlyerSynth[iOrcInstanceIndex][giCc_Saw2FlyerSynth_positionZOffset], iPositionLagTime)
a1 = 0
a2 = 0
a3 = 0
a4 = 0
iFlyerIndex init -1
if (iNoteNumber == 98) then
iFlyerIndex = 0
elseif (iNoteNumber == 101) then
iFlyerIndex = 1
elseif (iNoteNumber == 105) then
iFlyerIndex = 2
endif
kNoteTime = time_NoteTime:k()
kPointIndexAndFraction = kNoteTime * giSaw2FlyerSynth_PathSpeedMultipler[iFlyerIndex]
kPointIndex = min(giSaw2FlyerSynth_PathPointLastIndex - 1, floor:k(kPointIndexAndFraction))
kPoint1[] init 3
kPoint2[] init 3
kCoordinateIndex = kPointIndex * 3
kPoint1[$X] = giSaw2FlyerSynth_PathAudioPoints[iFlyerIndex][kCoordinateIndex]
kPoint1[$Y] = giSaw2FlyerSynth_PathAudioPoints[iFlyerIndex][kCoordinateIndex + 1]
kPoint1[$Z] = giSaw2FlyerSynth_PathAudioPoints[iFlyerIndex][kCoordinateIndex + 2]
kPoint2[$X] = giSaw2FlyerSynth_PathAudioPoints[iFlyerIndex][kCoordinateIndex + 3]
kPoint2[$Y] = giSaw2FlyerSynth_PathAudioPoints[iFlyerIndex][kCoordinateIndex + 4]
kPoint2[$Z] = giSaw2FlyerSynth_PathAudioPoints[iFlyerIndex][kCoordinateIndex + 5]
kPointFraction = frac(kPointIndexAndFraction)
kX = kPoint1[$X] + (kPoint2[$X] - kPoint1[$X]) * kPointFraction
kY = kPoint1[$Y] + (kPoint2[$Y] - kPoint1[$Y]) * kPointFraction
kZ = kPoint1[$Z] + (kPoint2[$Z] - kPoint1[$Z]) * kPointFraction
if (iFlyerDirection == 2) then
kZ = -kZ
endif
kDoppler_currentDistance init -1
kDoppler_currentTime init 0
kDoppler_previousTime init 0
kDoppler_deltaTime_x100 init 0
kDoppler_previousDistance = kDoppler_currentDistance
kDoppler_currentDistance = AF_3D_Audio_SourceDistance(kX, kY, kZ)
kDoppler_currentTime = kNoteTime
kDoppler_deltaTime_x100 = (kDoppler_currentTime - kDoppler_previousTime) * 100
if (kDoppler_previousDistance == -1) then
kDoppler_previousDistance = kDoppler_currentDistance
endif
kDoppler_factor = AF_3D_Audio_DopplerShift(
kDoppler_previousDistance,
kDoppler_currentDistance,
kDoppler_deltaTime_x100)
kAmp init 0.333 * (iVelocity / 127)
aOut = vco2(kAmp, kDoppler_factor * cpsmidinn(iNoteNumber), 8)
iEnvelopeA = 0.01
iEnvelopeD = 0.1
iEnvelopeS = 0.667
iEnvelopeR = 1 / giSaw2FlyerSynth_PathSpeedMultipler[iFlyerIndex]
aVolumeEnvelope = mxadsr:a(iEnvelopeA, iEnvelopeD, iEnvelopeS, iEnvelopeR)
aOut *= aVolumeEnvelope
aDistance = AF_3D_Audio_SourceDistance_a(kX, kY, kZ)
aDistanceAmp = AF_3D_Audio_DistanceAttenuation:a(
aDistance,
kPositionReferenceDistance,
kPositionRolloffFactor)
aPositionOut = aOut * min(aDistanceAmp, a(kPositionMaxAmpWhenClose))
aReverbOut = aOut * aDistanceAmp
AF_3D_Audio_ChannelGains_XYZ(kX, kY, kZ)
a1 = a(gkAmbisonicChannelGains[0]) * aPositionOut
a2 = a(gkAmbisonicChannelGains[1]) * aPositionOut
a3 = a(gkAmbisonicChannelGains[2]) * aPositionOut
a4 = a(gkAmbisonicChannelGains[3]) * aPositionOut
if (iFlyerDirection == 3) then
kZ = -kZ
kDoppler_currentDistance2 init -1
kDoppler_previousDistance2 = kDoppler_currentDistance2
kDoppler_currentDistance2 = AF_3D_Audio_SourceDistance(kX, kY, kZ)
if (kDoppler_previousDistance2 == -1) then
kDoppler_previousDistance2 = kDoppler_currentDistance2
endif
kDoppler_factor2 = AF_3D_Audio_DopplerShift(
kDoppler_previousDistance2,
kDoppler_currentDistance2,
kDoppler_deltaTime_x100)
kAmp init 0.333 * (iVelocity / 127)
aOut = vco2(kAmp, kDoppler_factor2 * cpsmidinn(iNoteNumber), 8)
aOut *= aVolumeEnvelope
aDistance = AF_3D_Audio_SourceDistance_a(kX, kY, kZ)
aDistanceAmp = AF_3D_Audio_DistanceAttenuation:a(
aDistance,
kPositionReferenceDistance,
kPositionRolloffFactor)
aPositionOut = aOut * min(aDistanceAmp, a(kPositionMaxAmpWhenClose))
aReverbOut += aOut * aDistanceAmp
AF_3D_Audio_ChannelGains_XYZ(kX, kY, kZ)
a1 += a(gkAmbisonicChannelGains[0]) * aPositionOut
a2 += a(gkAmbisonicChannelGains[1]) * aPositionOut
a3 += a(gkAmbisonicChannelGains[2]) * aPositionOut
a4 += a(gkAmbisonicChannelGains[3]) * aPositionOut
endif
kDoppler_previousTime = kDoppler_currentTime
else
a1 = aOut
a2 = 0
a3 = 0
a4 = 0
endif
chnmix(a1, "12/0")
chnmix(a2, "12/1")
chnmix(a3, "12/2")
chnmix(a4, "12/3")
chnmix(aReverbOut, "12/4")
chnmix(aReverbOut, "12/5")
#ifdef IS_GENERATING_JSON
if (lastcycle() == 1) then
fprintks(SJsonFile, ",\\"offTime\\":%.3f}}", timeinsts() + iOnTime)
endif
#end
endif
end:
endin
instr Preallocate_16
ii = 0
while (ii < giPresetUuidPreallocationCount[12]) do
scoreline_i(sprintf("i %d.%.3d 0 .1 %d 63 63", 16, ii, 3))
ii += 1
od
turnoff
endin
scoreline_i(sprintf("i \\"Preallocate_%d\\" 0 -1", 16))
#ifndef MIX_CHANNEL_COUNT
#ifdef INTERNAL_CHANNEL_COUNT
#define MIX_CHANNEL_COUNT # $INTERNAL_CHANNEL_COUNT #
#else
#define MIX_CHANNEL_COUNT # 6 #
#endif
#endif
ii = 0
while (ii < $MIX_CHANNEL_COUNT) do
chn_a(sprintf("%s/%d", "13", ii), 2)
ii += 1
od
gSCcInfo_Reverb[] = fillarray( \\
\\
"enabled", "bool", "false", "synced", \\
"size", "number", "0.5", "synced", \\
"cutoffFrequency", "number", "20000", "synced", \\
"variationDepth", "number", "0.1", "synced", \\
"dryWet", "number", "1", "synced", \\
"volume", "number", "0.5", "synced", \\
\\
"", "", "", "")
#define gSCcInfo_Reverb_Count #28#
#define CC_INFO_CHANNEL #0#
#define CC_INFO_TYPE #1#
#define CC_INFO_VALUE #2#
#define CC_INFO_SYNC_TYPE #3#
#define CC_NO_SYNC #0#
#define CC_SYNC_TO_CHANNEL #1#
#define CC_CHANNEL_NAME(channel) #gSCcInfo_Reverb[giCc_Reverb_$channel][$CC_INFO_CHANNEL]#
#ifdef gSCcInfo_Reverb_Count
if (lenarray(gSCcInfo_Reverb) != $gSCcInfo_Reverb_Count) igoto skipCcInfoReshapeArray_Reverb
giCcCount_Reverb = (lenarray(gSCcInfo_Reverb) / 4) - 1
reshapearray(gSCcInfo_Reverb, giCcCount_Reverb + 1, 4)
skipCcInfoReshapeArray_Reverb:
#else
giCcCount_Reverb = (lenarray(gSCcInfo_Reverb) / 4) - 1
reshapearray(gSCcInfo_Reverb, giCcCount_Reverb + 1, 4)
#end
opcode ccIndex_Reverb, i, S
SChannel xin
kgoto end
iI = 0
while (iI < giCcCount_Reverb) do
if (strcmp(gSCcInfo_Reverb[iI][$CC_INFO_CHANNEL], SChannel) == 0) igoto end
iI += 1
od
iI = -1
end:
xout iI
endop
gSCcValueDefaults_Reverb[] init giCcCount_Reverb
giCcValueDefaults_Reverb[] init giCcCount_Reverb
gSCcValues_Reverb[][] init 1, giCcCount_Reverb
giCcValues_Reverb[][] init 1, giCcCount_Reverb
gkCcValues_Reverb[][] init 1, giCcCount_Reverb
gkCcSyncTypes_Reverb[][] init 1, giCcCount_Reverb
instr Reverb_InitializeCcValues
iI = 0
while (iI < giCcCount_Reverb) do
SType = gSCcInfo_Reverb[iI][$CC_INFO_TYPE]
SValue = gSCcInfo_Reverb[iI][$CC_INFO_VALUE]
iJ = 0
while (iJ < 1) do
iValue = -1
if (strcmp(SType, "string") == 0) then
gSCcValueDefaults_Reverb[iI] = SValue
gSCcValues_Reverb[iJ][iI] = SValue
else
if (strcmp(SType, "bool") == 0) then
if (strcmp(SValue, "false") == 0) then
iValue = 0
else
iValue = 1
endif
elseif (strcmp(SType, "number") == 0 && strcmp(SValue, "") != 0) then
iValue = strtod(SValue)
endif
giCcValueDefaults_Reverb[iI] = iValue
giCcValues_Reverb[iJ][iI] = iValue
endif
iJ += 1
od
iI += 1
od
igoto end
kI = 0
while (kI < giCcCount_Reverb) do
SType = gSCcInfo_Reverb[kI][$CC_INFO_TYPE]
SValue = gSCcInfo_Reverb[kI][$CC_INFO_VALUE]
SSyncType = gSCcInfo_Reverb[kI][$CC_INFO_SYNC_TYPE]
kJ = 0
while (kJ < 1) do
kValue = -1
if (strcmpk(SType, "bool") == 0) then
if (strcmpk(SValue, "false") == 0) then
kValue = 0
else
kValue = 1
endif
elseif (strcmpk(SType, "number") == 0 && strcmpk(SValue, "") != 0) then
kValue = strtodk(SValue)
endif
gkCcValues_Reverb[kJ][kI] = kValue
gkCcSyncTypes_Reverb[kJ][kI] = $CC_NO_SYNC
if (strcmpk(SSyncType, "synced") == 0) then
gkCcSyncTypes_Reverb[kJ][kI] = $CC_SYNC_TO_CHANNEL
endif
kJ += 1
od
kI += 1
od
turnoff
end:
endin
event_i("i", "Reverb_InitializeCcValues", 0, -1)
instr Reverb_CreateCcIndexes
giCc_Reverb_enabled init ccIndex_Reverb("enabled")
giCc_Reverb_size init ccIndex_Reverb("size")
giCc_Reverb_cutoffFrequency init ccIndex_Reverb("cutoffFrequency")
giCc_Reverb_variationDepth init ccIndex_Reverb("variationDepth")
giCc_Reverb_dryWet init ccIndex_Reverb("dryWet")
giCc_Reverb_volume init ccIndex_Reverb("volume")
endin
event_i("i", "Reverb_CreateCcIndexes", 0, -1)
instr 19
#ifdef IS_GENERATING_JSON
goto end
#end
iOrcInstanceIndex = 0
iEventType = p4
if (iEventType == 4) then
iCcType = p5
iCcValue = p6
giCcValues_Reverb[0][iCcType] = iCcValue
gkCcValues_Reverb[0][iCcType] = iCcValue
turnoff
elseif (iEventType == 1) then
aIn1 init 0
aIn2 init 0
aOut1 init 0
aOut2 init 0
if (13 < gi_instrumentCount) then
aIn1 = chnget:a("13/4")
aIn2 = chnget:a("13/5")
else
iAuxTrackIndex = 13 - gi_instrumentCount
aIn1 = ga_auxSignals[iAuxTrackIndex][4]
aIn1 = ga_auxSignals[iAuxTrackIndex][5]
endif
if (gkCcValues_Reverb[iOrcInstanceIndex][giCc_Reverb_enabled] == 1) then
aOut1, aOut2 reverbsc aIn1, aIn2, gkCcValues_Reverb[iOrcInstanceIndex][giCc_Reverb_size], gkCcValues_Reverb[iOrcInstanceIndex][giCc_Reverb_cutoffFrequency], sr, 0.1
kDryWet = gkCcValues_Reverb[iOrcInstanceIndex][giCc_Reverb_dryWet]
aOut1 *= kDryWet
aOut2 *= kDryWet
kWetDry = 1 - kDryWet
aOut1 += aIn1 * kWetDry
aOut2 += aIn2 * kWetDry
kVolume = gkCcValues_Reverb[iOrcInstanceIndex][giCc_Reverb_volume]
aOut1 *= kVolume
aOut2 *= kVolume
else
aOut1 = aIn1
aOut2 = aIn2
endif
iAuxTrackIndex = 13
if (iAuxTrackIndex >= gi_instrumentCount) then
iAuxTrackIndex -= gi_instrumentCount
endif
ga_auxSignals[iAuxTrackIndex][4] = aOut1
ga_auxSignals[iAuxTrackIndex][5] = aOut2
endif
end:
endin
instr Preallocate_19
ii = 0
while (ii < 4) do
scoreline_i(sprintf("i %d.%.3d 0 .1 0 0 0", 19, ii))
ii += 1
od
turnoff
endin
scoreline_i(sprintf("i \\"Preallocate_%d\\" 0 -1", 19))
instr 17
kAux = 0
while (kAux < gi_auxCount) do
kInstrument = 0
while (kInstrument < gi_instrumentCount) do
kChannel = giAuxChannelIndexRanges[kAux][kInstrument][0]
kMaxChannel = giAuxChannelIndexRanges[kAux][kInstrument][1]
while (kChannel <= kMaxChannel) do
ga_auxSignals[kAux][kChannel] = ga_auxSignals[kAux][kChannel] +
ga_auxVolumes[kAux][kInstrument][kChannel] * chnget:a(gSInstrumentSignalIds[kInstrument][kChannel])
kChannel += 1
od
kInstrument += 1
od
kAux += 1
od
endin
instr 18
k_aux = p4 - gi_auxIndexOffset
k_track = p5 - gi_instrumentIndexOffset
k_channel = p6
k_volume = p7
ga_auxVolumes[k_aux][k_track][k_channel] = k_volume
turnoff
endin
instr 20
k_track = p4 - gi_instrumentIndexOffset
k_channel = p5
k_volume = p6
ga_masterVolumes[k_track][k_channel] = k_volume
turnoff
endin
instr 21
kChannel = 0
while (kChannel < $INTERNAL_CHANNEL_COUNT) do
ga_masterSignals[kChannel] = 0
kChannel += 1
od
kTrack = 0
while (kTrack < gi_instrumentCount) do
kChannel = giMasterChannelIndexRanges[kTrack][0]
kChannelHigh = giMasterChannelIndexRanges[kTrack][1]
while (kChannel <= kChannelHigh) do
ga_masterSignals[kChannel] = ga_masterSignals[kChannel] + chnget:a(gSInstrumentSignalIds[kTrack][kChannel]) *
ga_masterVolumes[kTrack][kChannel]
kChannel += 1
od
kTrack += 1
od
kAux = 0
while (kAux < gi_auxCount) do
kChannel = giMasterChannelIndexRanges[kTrack][0]
kChannelHigh = giMasterChannelIndexRanges[kTrack][1]
while (kChannel <= kChannelHigh) do
ga_masterSignals[kChannel] = ga_masterSignals[kChannel] + ga_auxSignals[kAux][kChannel] *
ga_masterVolumes[kTrack][kChannel]
kChannel += 1
od
kTrack += 1
kAux += 1
od
aw = ga_masterSignals[0]
ay = ga_masterSignals[1]
az = ga_masterSignals[2]
ax = ga_masterSignals[3]
#ifdef IS_MIXDOWN
am0 init 0
am1 init 0
am2 init -1
am3 init 0
am4 init 1
am5 init 0
am6 init 1
am7 init 0
am8 init 0
#else
am0 = a(gk_AF_3D_ListenerRotationMatrix[0])
am1 = a(gk_AF_3D_ListenerRotationMatrix[1])
am2 = a(gk_AF_3D_ListenerRotationMatrix[2])
am3 = a(gk_AF_3D_ListenerRotationMatrix[3])
am4 = a(gk_AF_3D_ListenerRotationMatrix[4])
am5 = a(gk_AF_3D_ListenerRotationMatrix[5])
am6 = a(gk_AF_3D_ListenerRotationMatrix[6])
am7 = a(gk_AF_3D_ListenerRotationMatrix[7])
am8 = a(gk_AF_3D_ListenerRotationMatrix[8])
#end
ayr = -(ay * am0 + az * am3 + ax * am6)
azr = ay * am1 + az * am4 + ax * am7
axr = -(ay * am2 + az * am5 + ax * am8)
iHrirLength = ftlen(gi_AF_3D_HrirChannel1TableNumber)
aw ftconv aw, gi_AF_3D_HrirChannel1TableNumber, iHrirLength
ay ftconv ayr, gi_AF_3D_HrirChannel2TableNumber, iHrirLength
az ftconv azr, gi_AF_3D_HrirChannel3TableNumber, iHrirLength
ax ftconv axr, gi_AF_3D_HrirChannel4TableNumber, iHrirLength
aL = aw + ay + az + ax
aR = aw - ay + az + ax
aL += ga_masterSignals[4]
aR += ga_masterSignals[5]
kMainVolume init 1
kPaused init 0
kPause = chnget:k("pause")
if (kPause == 1 && kPaused == 0) then
kMainVolume = 0
kPaused = 1
printsk("csd:paused at %.3f\\n", timeinsts())
elseif (kPause == 0 && kPaused == 1) then
kMainVolume = 1
kPaused = 0
printsk("csd:resumed at %.3f\\n", timeinsts())
endif
aMainVolume = a(kMainVolume)
outs(aL * aMainVolume, aR * aMainVolume)
#ifdef IS_MIXDOWN
aw += ga_masterSignals[4]
fout("mixdown-wyzx.aif", 9, aw, ay, az, ax)
#end
endin
instr ClearTrackChannelSignal
SChannel init sprintf("%d/%d", p4, p5)
chnclear(SChannel)
endin
instr EndOfInstrumentAllocations
prints("-------------------------------------------------------------------------------------------------------\\n")
prints("Add preallocation score lines for all instruments allocated after this message.\\n")
prints("-------------------------------------------------------------------------------------------------------\\n")
turnoff
endin
instr SendStartupMessage
if (p3 == -1) then
prints("csd:started at %.3f\\n", times())
endif
turnoff
endin
instr SendEndedMessage
if (p3 == -1) then
prints("csd:ended\\n")
endif
turnoff
endin
#ifdef IS_MIXDOWN
instr SetMixdownListenerPosition
iTableNumber init 1
ii = 0
while (ii < 16) do
tablew(giMainCameraArrayMatrixes[ii], ii, iTableNumber)
ii += 1
od
turnoff
endin
#end
</CsInstruments>
<CsScore>
#ifndef SCORE_START_DELAY
#define SCORE_START_DELAY #3.5#
#end
i 1 0 -1
i "SendEndedMessage" 0 1
#ifdef IS_MIXDOWN
i "SetMixdownListenerPosition" 1 -1
#end
i 2 0 -1 13 0 1 13
i 19.1 0 -1 1 0 0
i 18 0.004 1 13 0 0 0.40
i 18 0.004 1 13 0 1 0.40
i 18 0.004 1 13 0 2 0.40
i 18 0.004 1 13 0 3 0.40
i 18 0.004 1 13 0 4 0.14
i 18 0.004 1 13 0 5 0.14
i 18 0.004 1 13 1 0 0.25
i 18 0.004 1 13 1 1 0.25
i 18 0.004 1 13 1 2 0.25
i 18 0.004 1 13 1 3 0.25
i 18 0.004 1 13 1 4 0.09
i 18 0.004 1 13 1 5 0.09
i 18 0.004 1 13 2 0 0.25
i 18 0.004 1 13 2 1 0.25
i 18 0.004 1 13 2 2 0.25
i 18 0.004 1 13 2 3 0.25
i 18 0.004 1 13 2 4 0.09
i 18 0.004 1 13 2 5 0.09
i 18 0.004 1 13 3 0 0.08
i 18 0.004 1 13 3 1 0.08
i 18 0.004 1 13 3 2 0.08
i 18 0.004 1 13 3 3 0.08
i 18 0.004 1 13 3 4 0.07
i 18 0.004 1 13 3 5 0.07
i 18 0.004 1 13 4 0 0.33
i 18 0.004 1 13 4 1 0.33
i 18 0.004 1 13 4 2 0.33
i 18 0.004 1 13 4 3 0.33
i 18 0.004 1 13 4 4 0.35
i 18 0.004 1 13 4 5 0.35
i 18 0.004 1 13 5 0 0.09
i 18 0.004 1 13 5 1 0.09
i 18 0.004 1 13 5 2 0.09
i 18 0.004 1 13 5 3 0.09
i 18 0.004 1 13 5 4 0.10
i 18 0.004 1 13 5 5 0.10
i 18 0.004 1 13 6 0 0.10
i 18 0.004 1 13 6 1 0.10
i 18 0.004 1 13 6 2 0.10
i 18 0.004 1 13 6 3 0.10
i 18 0.004 1 13 6 4 0.02
i 18 0.004 1 13 6 5 0.02
i 18 0.004 1 13 7 0 0.39
i 18 0.004 1 13 7 1 0.39
i 18 0.004 1 13 7 2 0.39
i 18 0.004 1 13 7 3 0.39
i 18 0.004 1 13 8 0 0.52
i 18 0.004 1 13 8 1 0.52
i 18 0.004 1 13 8 2 0.52
i 18 0.004 1 13 8 3 0.52
i 18 0.004 1 13 8 4 0.50
i 18 0.004 1 13 8 5 0.50
i 18 0.004 1 13 9 0 0.01
i 18 0.004 1 13 9 1 0.01
i 18 0.004 1 13 9 2 0.01
i 18 0.004 1 13 9 3 0.01
i 18 0.004 1 13 9 4 0.03
i 18 0.004 1 13 9 5 0.03
i 18 0.004 1 13 10 0 0.06
i 18 0.004 1 13 10 1 0.06
i 18 0.004 1 13 10 2 0.06
i 18 0.004 1 13 10 3 0.06
i 18 0.004 1 13 10 4 0.15
i 18 0.004 1 13 10 5 0.15
i 18 0.004 1 13 11 0 0.08
i 18 0.004 1 13 11 1 0.08
i 18 0.004 1 13 11 2 0.08
i 18 0.004 1 13 11 3 0.08
i 18 0.004 1 13 11 4 0.22
i 18 0.004 1 13 11 5 0.22
i 18 0.004 1 13 12 0 0.02
i 18 0.004 1 13 12 1 0.02
i 18 0.004 1 13 12 2 0.02
i 18 0.004 1 13 12 3 0.02
i 18 0.004 1 13 12 4 0.08
i 18 0.004 1 13 12 5 0.08
i 20 0.004 1 13 0 0.71
i 20 0.004 1 13 1 0.71
i 20 0.004 1 13 2 0.71
i 20 0.004 1 13 3 0.71
i 20 0.004 1 13 4 0.71
i 20 0.004 1 13 5 0.71
i "EndOfInstrumentAllocations" 3 -1
i "SendStartupMessage" 0 1
b $SCORE_START_DELAY
i "SendStartupMessage" 0 -1
i 15 0.01 1 4 2 25.00
i 14 0.01 1 4 2 25.00
i 13 0.01 1 4 2 25.00
i 7 0.01 1 4 2 100.00
i 6 0.01 1 4 2 50.00
i 15 0.01 1 4 4 1.00
i 8 0.01 1 4 2 100.00
i 16 0.01 1 4 2 10.00
i 14 0.01 1 4 4 1.00
i 15 0.01 1 4 5 ""
i 13 0.01 1 4 3 0.10
i 4 0.01 1 4 2 100.00
i 6 0.01 1 4 3 1.00
i 8 0.01 1 4 3 1.00
i 14 0.01 1 4 5 ""
i 13 0.01 1 4 4 1.00
i 16 0.01 1 4 3 0.20
i 6 0.01 1 4 4 1.00
i 13 0.01 1 4 5 ""
i 7 0.01 1 4 3 1.00
i 4 0.01 1 4 3 1.00
i 8 0.01 1 4 4 3.00
i 16 0.01 1 4 4 1.00
i 5 0.01 1 4 2 50.00
i 6 0.01 1 4 5 "<none>"
i 4 0.01 1 4 4 1.00
i 8 0.01 1 4 5 "random_XZ"
i 6 0.01 1 4 9 92.72
i 8 0.01 1 4 10 20.00
i 7 0.01 1 4 4 1.00
i 5 0.01 1 4 3 1.00
i 16 0.01 1 4 5 ""
i 4 0.01 1 4 5 "<none>"
i 16 0.01 1 4 12 1.00
i 6 0.01 1 4 11 53.54
i 16 0.01 1 4 13 "counter clockwise"
i 7 0.01 1 4 5 "<none>"
i 4 0.01 1 4 11 -107.09
i 5 0.01 1 4 4 1.00
i 5 0.01 1 4 5 "<none>"
i 5 0.01 1 4 9 -92.72
i 5 0.01 1 4 11 53.54
i 10 0.01 1 4 2 50.00
i 10 0.01 1 4 3 1.00
i 10 0.01 1 4 4 1.00
i 10 0.01 1 4 5 "<none>"
i 10 0.01 1 4 11 300.00
i 9 0.01 1 4 2 100.00
i 9 0.01 1 4 3 1.00
i 9 0.01 1 4 4 3.00
i 11 0.01 1 4 2 100.00
i 9 0.01 1 4 5 "random_XZ"
i 11 0.01 1 4 3 0.25
i 9 0.01 1 4 6 50.00
i 12 0.01 1 4 0 0.00
i 11 0.01 1 4 4 1.00
i 9 0.01 1 4 8 50.00
i 11 0.01 1 4 5 ""
i 9 0.01 1 4 10 60.00
i 12 0.01 1 4 2 100.00
i 12 0.01 1 4 4 1.00
i 12 0.01 1 4 5 ""
i 19 0.01 1 4 0 1.00
i 19 0.01 1 4 1 0.95
i 19 0.01 1 4 2 14160.00
i 19 0.01 1 4 5 1.00
i 8.021 2.000 0.001 1 49 127
i 8.022 2.124 0.001 1 49 127
i 8.023 2.249 0.001 1 49 127
i 8.024 2.375 0.001 1 49 127
i 8.025 2.500 0.001 1 49 127
i 8.026 2.624 0.001 1 49 127
i 8.027 2.749 0.001 1 49 127
i 8.028 2.875 0.001 1 49 127
i 8.029 3.000 0.001 1 49 127
i 10.003 3.000 -1.000 1 72 127
i 10.004 3.000 -1.000 1 76 127
i 8.030 3.124 0.001 1 49 127
i 8.031 3.249 0.001 1 49 127
i 8.032 3.375 0.001 1 49 127
i 8.033 3.500 0.001 1 49 127
i 8.034 3.624 0.001 1 49 127
i 8.035 3.749 0.001 1 49 127
i 8.036 3.875 0.001 1 49 113
i 8.037 4.000 0.001 1 49 127
i -10.003 3.999 0
i -10.004 3.999 0
i 13.001 4.000 -1.000 1 91 127
i 8.038 4.124 0.001 1 49 127
i -13.001 4.124 0
i 13.002 4.124 -1.000 1 93 127
i -13.002 4.249 0
i 13.003 4.249 -1.000 1 89 127
i 8.039 4.249 0.001 1 49 127
i 8.040 4.375 0.001 1 49 127
i -13.003 4.375 0
i 13.004 4.375 -1.000 1 91 127
i 8.041 4.500 0.001 1 49 127
i -13.004 4.500 0
i 13.005 4.500 -1.000 1 93 127
i 8.042 4.624 0.001 1 49 127
i -13.005 4.624 0
i 13.006 4.624 -1.000 1 89 127
i 8.043 4.749 0.001 1 49 127
i -13.006 4.749 0
i 13.007 4.749 -1.000 1 91 127
i 8.044 4.875 0.001 1 49 127
i -13.007 4.875 0
i 13.008 4.875 -1.000 1 93 127
i 8.045 5.000 0.001 1 49 127
i 10.005 5.000 -1.000 1 72 127
i -13.008 5.000 0
i 10.006 5.000 -1.000 1 76 127
i 13.009 5.000 -1.000 1 89 127
i 8.046 5.124 0.001 1 49 127
i -13.009 5.124 0
i 13.010 5.124 -1.000 1 91 127
i 8.047 5.249 0.001 1 49 127
i -13.010 5.249 0
i 13.011 5.249 -1.000 1 93 127
i -13.011 5.375 0
i 13.012 5.375 -1.000 1 89 127
i 8.048 5.375 0.001 1 49 127
i 8.049 5.500 0.001 1 49 127
i -13.012 5.500 0
i 13.013 5.500 -1.000 1 91 127
i 8.050 5.624 0.001 1 49 127
i -13.013 5.624 0
i 13.014 5.624 -1.000 1 93 127
i 8.051 5.749 0.001 1 49 127
i -13.014 5.749 0
i 13.015 5.749 -1.000 1 89 127
i -13.015 5.875 0
i 13.016 5.875 -1.000 1 91 127
i 8.052 5.875 0.001 1 49 113
i 4.001 6.000 0.001 1 37 127
i -13.016 6.000 0
i 13.017 6.000 -1.000 1 93 127
i 8.053 6.000 0.001 1 49 127
i -10.005 6.000 0
i -10.006 6.000 0
i -13.017 6.124 0
i 8.054 6.124 0.001 1 49 127
i 8.055 6.249 0.001 1 49 127
i 8.056 6.375 0.001 1 49 127
i 8.057 6.500 0.001 1 49 127
i 7.001 6.500 0.001 1 39 127
i 8.058 6.624 0.001 1 49 127
i 8.059 6.749 0.001 1 49 127
i 8.060 6.875 0.001 1 49 127
i 4.002 7.000 0.001 1 37 127
i 8.061 7.000 0.001 1 49 127
i 10.007 7.000 -1.000 1 72 127
i 10.008 7.000 -1.000 1 76 127
i 8.062 7.124 0.001 1 49 127
i 8.063 7.249 0.001 1 49 127
i 8.064 7.375 0.001 1 49 127
i 7.002 7.500 0.001 1 39 127
i 8.065 7.500 0.001 1 49 127
i 8.066 7.624 0.001 1 49 127
i 8.067 7.749 0.001 1 49 127
i 8.068 7.875 0.001 1 49 113
i 4.003 8.000 0.001 1 37 127
i 8.069 8.000 0.001 1 49 127
i -10.007 7.999 0
i -10.008 7.999 0
i 8.070 8.124 0.001 1 49 127
i 8.071 8.249 0.001 1 49 127
i 8.072 8.375 0.001 1 49 127
i 7.003 8.500 0.001 1 39 127
i 8.073 8.500 0.001 1 49 127
i 8.074 8.624 0.001 1 49 127
i 8.075 8.749 0.001 1 49 127
i 8.076 8.875 0.001 1 49 127
i 4.004 9.000 0.001 1 37 127
i 8.077 9.000 0.001 1 49 127
i 10.009 9.000 -1.000 1 72 127
i 10.010 9.000 -1.000 1 76 127
i 8.078 9.124 0.001 1 49 127
i 8.079 9.249 0.001 1 49 127
i 8.080 9.375 0.001 1 49 127
i 7.004 9.500 0.001 1 39 127
i 8.081 9.500 0.001 1 49 127
i 8.082 9.624 0.001 1 49 127
i 8.083 9.749 0.001 1 49 127
i 8.084 9.875 0.001 1 49 113
i 4.005 10.000 0.001 1 37 127
i 8.085 10.000 0.001 1 49 127
i -10.009 10.000 0
i -10.010 10.000 0
i 8.086 10.124 0.001 1 49 127
i 8.087 10.249 0.001 1 49 127
i 8.088 10.375 0.001 1 49 127
i 7.005 10.500 0.001 1 39 127
i 8.089 10.500 0.001 1 49 127
i 8.090 10.624 0.001 1 49 127
i 8.091 10.749 0.001 1 49 127
i 8.092 10.875 0.001 1 49 127
i 4.006 11.000 0.001 1 37 127
i 8.093 11.000 0.001 1 49 127
i 10.011 11.000 -1.000 1 72 127
i 10.012 11.000 -1.000 1 76 127
i 8.094 11.124 0.001 1 49 127
i 8.095 11.249 0.001 1 49 127
i 8.096 11.375 0.001 1 49 127
i 7.006 11.500 0.001 1 39 127
i 8.097 11.500 0.001 1 49 127
i 8.098 11.624 0.001 1 49 127
i 8.099 11.749 0.001 1 49 127
i 8.100 11.875 0.001 1 49 113
i 4.007 12.000 0.001 1 37 127
i 8.101 12.000 0.001 1 49 127
i -10.011 11.999 0
i -10.012 11.999 0
i 8.102 12.124 0.001 1 49 127
i 8.103 12.249 0.001 1 49 127
i 8.104 12.375 0.001 1 49 127
i 7.007 12.500 0.001 1 39 127
i 8.105 12.500 0.001 1 49 127
i 8.106 12.624 0.001 1 49 127
i 8.107 12.749 0.001 1 49 127
i 8.108 12.875 0.001 1 49 127
i 10.013 13.000 -1.000 1 72 127
i 8.109 13.000 0.001 1 49 127
i 10.014 13.000 -1.000 1 76 127
i 4.008 13.000 0.001 1 37 127
i 8.110 13.124 0.001 1 49 127
i 8.111 13.249 0.001 1 49 127
i 8.112 13.375 0.001 1 49 127
i 8.113 13.500 0.001 1 49 127
i 7.008 13.500 0.001 1 39 127
i 8.114 13.624 0.001 1 49 127
i 8.115 13.749 0.001 1 49 127
i 8.116 13.875 0.001 1 49 113
i 4.009 14.000 0.001 1 37 127
i -10.013 14.000 0
i 8.117 14.000 0.001 1 49 127
i -10.014 14.000 0
i 11.001 14.000 -1.000 1 38 81
i 8.118 14.124 0.001 1 49 127
i 8.119 14.249 0.001 1 49 127
i 8.120 14.375 0.001 1 49 127
i 7.009 14.500 0.001 1 39 127
i 8.121 14.500 0.001 1 49 127
i 8.122 14.624 0.001 1 49 127
i 11.002 14.737 -1.000 1 41 89
i -11.001 14.744 0
i 8.123 14.749 0.001 1 49 127
i 8.124 14.875 0.001 1 49 127
i 4.010 15.000 0.001 1 37 127
i 8.125 15.000 0.001 1 49 127
i 10.015 15.000 -1.000 1 72 127
i 10.016 15.000 -1.000 1 76 127
i 8.126 15.124 0.001 1 49 127
i 8.127 15.249 0.001 1 49 127
i 11.003 15.255 -1.000 1 38 68
i -11.002 15.260 0
i 8.128 15.375 0.001 1 49 127
i 11.004 15.501 -1.000 1 41 78
i 8.129 15.500 0.001 1 49 127
i 7.010 15.500 0.001 1 39 127
i -11.003 15.509 0
i 8.130 15.624 0.001 1 49 127
i 8.131 15.749 0.001 1 49 127
i 8.132 15.875 0.001 1 49 113
i 4.011 16.000 0.001 1 37 127
i 8.133 16.000 0.001 1 49 127
i -10.015 15.999 0
i -10.016 15.999 0
i 11.005 16.012 -1.000 1 38 78
i -11.004 16.031 0
i 8.134 16.124 0.001 1 49 127
i 8.135 16.249 0.001 1 49 127
i 8.136 16.375 0.001 1 49 127
i 8.137 16.500 0.001 1 49 127
i 7.011 16.500 0.001 1 39 127
i 8.138 16.624 0.001 1 49 127
i 8.139 16.749 0.001 1 49 127
i 11.006 16.760 -1.000 1 36 86
i -11.005 16.768 0
i 8.140 16.875 0.001 1 49 127
i 4.012 17.000 0.001 1 37 127
i 10.017 17.000 -1.000 1 72 127
i 8.141 17.000 0.001 1 49 127
i 10.018 17.000 -1.000 1 76 127
i 8.142 17.124 0.001 1 49 127
i 8.143 17.249 0.001 1 49 127
i -11.006 17.257 0
i 11.007 17.259 -1.000 1 33 74
i 8.144 17.375 0.001 1 49 127
i 7.012 17.500 0.001 1 39 127
i 8.145 17.500 0.001 1 49 127
i 11.008 17.508 -1.000 1 36 91
i -11.007 17.517 0
i 8.146 17.624 0.001 1 49 127
i 8.147 17.749 0.001 1 49 127
i 8.148 17.875 0.001 1 49 113
i 8.149 18.000 0.001 1 49 127
i 4.013 18.000 0.001 1 37 127
i -10.017 18.000 0
i -10.018 18.000 0
i -11.008 18.000 0
i 11.009 18.000 -1.000 1 38 81
i 8.150 18.124 0.001 1 49 127
i 8.151 18.249 0.001 1 49 127
i 8.152 18.375 0.001 1 49 127
i 8.153 18.500 0.001 1 49 127
i 7.013 18.500 0.001 1 39 127
i 8.154 18.624 0.001 1 49 127
i 11.010 18.737 -1.000 1 41 89
i -11.009 18.744 0
i 8.155 18.749 0.001 1 49 127
i 8.156 18.875 0.001 1 49 127
i 8.157 19.000 0.001 1 49 127
i 10.019 19.000 -1.000 1 72 127
i 10.020 19.000 -1.000 1 76 127
i 4.014 19.000 0.001 1 37 127
i 8.158 19.124 0.001 1 49 127
i 8.159 19.249 0.001 1 49 127
i 11.011 19.255 -1.000 1 38 68
i -11.010 19.260 0
i 8.160 19.375 0.001 1 49 127
i 8.161 19.500 0.001 1 49 127
i 11.012 19.501 -1.000 1 41 78
i 7.014 19.500 0.001 1 39 127
i -11.011 19.509 0
i 8.162 19.624 0.001 1 49 127
i 8.163 19.749 0.001 1 49 127
i 8.164 19.875 0.001 1 49 113
i 8.165 20.000 0.001 1 49 127
i -10.019 19.999 0
i 13.018 20.000 -1.000 1 91 127
i -10.020 19.999 0
i 4.015 20.000 0.001 1 37 127
i 11.013 20.012 -1.000 1 38 78
i -11.012 20.031 0
i 8.166 20.124 0.001 1 49 127
i -13.018 20.124 0
i 13.019 20.124 -1.000 1 93 127
i 8.167 20.249 0.001 1 49 127
i -13.019 20.249 0
i 13.020 20.249 -1.000 1 89 127
i 8.168 20.375 0.001 1 49 127
i -13.020 20.375 0
i 13.021 20.375 -1.000 1 91 127
i -13.021 20.500 0
i 13.022 20.500 -1.000 1 93 127
i 7.015 20.500 0.001 1 39 127
i 8.169 20.500 0.001 1 49 127
i -13.022 20.624 0
i 13.023 20.624 -1.000 1 89 127
i 8.170 20.624 0.001 1 49 127
i 8.171 20.749 0.001 1 49 127
i -13.023 20.749 0
i 13.024 20.749 -1.000 1 91 127
i 11.014 20.760 -1.000 1 36 86
i -11.013 20.768 0
i -13.024 20.875 0
i 13.025 20.875 -1.000 1 93 127
i 8.172 20.875 0.001 1 49 127
i 4.016 21.000 0.001 1 37 127
i 10.021 21.000 -1.000 1 72 127
i 10.022 21.000 -1.000 1 76 127
i 8.173 21.000 0.001 1 49 127
i -13.025 21.000 0
i 13.026 21.000 -1.000 1 89 127
i -13.026 21.124 0
i 13.027 21.124 -1.000 1 91 127
i 8.174 21.124 0.001 1 49 127
i 8.175 21.249 0.001 1 49 127
i -13.027 21.249 0
i 13.028 21.249 -1.000 1 93 127
i -11.014 21.257 0
i 11.015 21.259 -1.000 1 33 74
i 8.176 21.375 0.001 1 49 127
i -13.028 21.375 0
i 13.029 21.375 -1.000 1 89 127
i 8.177 21.500 0.001 1 49 127
i 7.016 21.500 0.001 1 39 127
i -13.029 21.500 0
i 13.030 21.500 -1.000 1 91 127
i 11.016 21.508 -1.000 1 36 91
i -11.015 21.517 0
i -13.030 21.624 0
i 13.031 21.624 -1.000 1 93 127
i 8.178 21.624 0.001 1 49 127
i 8.179 21.749 0.001 1 49 127
i -13.031 21.749 0
i 13.032 21.749 -1.000 1 89 127
i 8.180 21.875 0.001 1 49 113
i -13.032 21.875 0
i 13.033 21.875 -1.000 1 91 127
i 4.017 22.000 0.001 1 37 127
i 8.181 22.000 0.001 1 49 127
i -10.021 22.000 0
i -10.022 22.000 0
i -11.016 22.000 0
i 11.017 22.000 -1.000 1 38 81
i -13.033 22.000 0
i 13.034 22.000 -1.000 1 93 127
i -13.034 22.124 0
i 8.182 22.124 0.001 1 49 127
i 8.183 22.249 0.001 1 49 127
i 8.184 22.375 0.001 1 49 127
i 8.185 22.500 0.001 1 49 127
i 7.017 22.500 0.001 1 39 127
i 8.186 22.624 0.001 1 49 127
i 11.018 22.737 -1.000 1 41 89
i -11.017 22.744 0
i 8.187 22.749 0.001 1 49 127
i 8.188 22.875 0.001 1 49 127
i 8.189 23.000 0.001 1 49 127
i 10.023 23.000 -1.000 1 72 127
i 10.024 23.000 -1.000 1 76 127
i 4.018 23.000 0.001 1 37 127
i 8.190 23.124 0.001 1 49 127
i 8.191 23.249 0.001 1 49 127
i 11.019 23.255 -1.000 1 38 68
i -11.018 23.260 0
i 8.192 23.375 0.001 1 49 127
i 11.020 23.501 -1.000 1 41 78
i 8.193 23.500 0.001 1 49 127
i 7.018 23.500 0.001 1 39 127
i -11.019 23.509 0
i 8.194 23.624 0.001 1 49 127
i 8.195 23.749 0.001 1 49 127
i 8.196 23.875 0.001 1 49 113
i 4.019 24.000 0.001 1 37 127
i 8.197 24.000 0.001 1 49 127
i -10.023 23.999 0
i -10.024 23.999 0
i 11.021 24.012 -1.000 1 38 78
i -11.020 24.031 0
i 8.198 24.124 0.001 1 49 127
i 8.199 24.249 0.001 1 49 127
i 8.200 24.375 0.001 1 49 127
i 7.019 24.500 0.001 1 39 127
i 8.201 24.500 0.001 1 49 127
i 8.202 24.624 0.001 1 49 127
i 8.203 24.749 0.001 1 49 127
i 11.022 24.760 -1.000 1 36 86
i -11.021 24.768 0
i 8.204 24.875 0.001 1 49 127
i 4.020 25.000 0.001 1 37 127
i 8.205 25.000 0.001 1 49 127
i 10.025 25.000 -1.000 1 72 127
i 10.026 25.000 -1.000 1 76 127
i 8.206 25.124 0.001 1 49 127
i 8.207 25.249 0.001 1 49 127
i -11.022 25.257 0
i 11.023 25.259 -1.000 1 33 74
i 8.208 25.375 0.001 1 49 127
i 8.209 25.500 0.001 1 49 127
i 7.020 25.500 0.001 1 39 127
i 11.024 25.508 -1.000 1 36 91
i -11.023 25.517 0
i 8.210 25.624 0.001 1 49 127
i 8.211 25.749 0.001 1 49 127
i 8.212 25.875 0.001 1 49 113
i 4.021 26.000 0.001 1 37 127
i -11.024 26.000 0
i 8.213 26.000 0.001 1 49 127
i 11.025 26.000 -1.000 1 38 81
i -10.025 26.000 0
i -10.026 26.000 0
i 8.214 26.124 0.001 1 49 127
i 8.215 26.249 0.001 1 49 127
i 8.216 26.375 0.001 1 49 127
i 7.021 26.500 0.001 1 39 127
i 8.217 26.500 0.001 1 49 127
i 8.218 26.624 0.001 1 49 127
i 11.026 26.737 -1.000 1 41 89
i -11.025 26.744 0
i 8.219 26.749 0.001 1 49 127
i 8.220 26.875 0.001 1 49 127
i 8.221 27.000 0.001 1 49 127
i 4.022 27.000 0.001 1 37 127
i 10.027 27.000 -1.000 1 72 127
i 10.028 27.000 -1.000 1 76 127
i 8.222 27.124 0.001 1 49 127
i 8.223 27.249 0.001 1 49 127
i 11.027 27.255 -1.000 1 38 68
i -11.026 27.260 0
i 8.224 27.375 0.001 1 49 127
i 11.028 27.501 -1.000 1 41 78
i 7.022 27.500 0.001 1 39 127
i 8.225 27.500 0.001 1 49 127
i -11.027 27.509 0
i 8.226 27.624 0.001 1 49 127
i 8.227 27.749 0.001 1 49 127
i 8.228 27.875 0.001 1 49 113
i 4.023 28.000 0.001 1 37 127
i 8.229 28.000 0.001 1 49 127
i -10.027 27.999 0
i -10.028 27.999 0
i 11.029 28.012 -1.000 1 38 78
i -11.028 28.031 0
i 8.230 28.124 0.001 1 49 127
i 8.231 28.249 0.001 1 49 127
i 8.232 28.375 0.001 1 49 127
i 8.233 28.500 0.001 1 49 127
i 7.023 28.500 0.001 1 39 127
i 8.234 28.624 0.001 1 49 127
i 8.235 28.749 0.001 1 49 127
i 11.030 28.760 -1.000 1 36 86
i -11.029 28.768 0
i 8.236 28.875 0.001 1 49 127
i 4.024 29.000 0.001 1 37 127
i 8.237 29.000 0.001 1 49 127
i 10.029 29.000 -1.000 1 72 127
i 10.030 29.000 -1.000 1 76 127
i 8.238 29.124 0.001 1 49 127
i 8.239 29.249 0.001 1 49 127
i -11.030 29.257 0
i 11.031 29.259 -1.000 1 33 74
i 8.240 29.375 0.001 1 49 127
i 8.241 29.500 0.001 1 49 127
i 7.024 29.500 0.001 1 39 127
i 11.032 29.508 -1.000 1 36 91
i -11.031 29.517 0
i 8.242 29.624 0.001 1 49 127
i 8.243 29.749 0.001 1 49 127
i 8.244 29.875 0.001 1 49 113
i 8.245 30.000 0.001 1 49 127
i -10.029 30.000 0
i 4.025 30.000 0.001 1 37 127
i -11.032 30.000 0
i -10.030 30.000 0
i 11.033 30.000 -1.000 1 38 81
i 15.001 29.993 -1.000 1 53 74
i 8.246 30.124 0.001 1 49 127
i 8.247 30.249 0.001 1 49 127
i 8.248 30.375 0.001 1 49 127
i 7.025 30.500 0.001 1 39 127
i 8.249 30.500 0.001 1 49 127
i 8.250 30.624 0.001 1 49 127
i 11.034 30.737 -1.000 1 41 89
i -11.033 30.744 0
i 8.251 30.749 0.001 1 49 127
i 8.252 30.875 0.001 1 49 127
i 8.253 31.000 0.001 1 49 127
i 4.026 31.000 0.001 1 37 127
i 10.031 31.000 -1.000 1 72 127
i 10.032 31.000 -1.000 1 76 127
i 8.254 31.124 0.001 1 49 127
i 8.255 31.249 0.001 1 49 127
i 11.035 31.255 -1.000 1 38 68
i -11.034 31.260 0
i 8.256 31.375 0.001 1 49 127
i 7.026 31.500 0.001 1 39 127
i 8.257 31.500 0.001 1 49 127
i 11.036 31.501 -1.000 1 41 78
i -11.035 31.509 0
i 8.258 31.624 0.001 1 49 127
i 8.259 31.749 0.001 1 49 127
i 8.260 31.875 0.001 1 49 113
i 15.002 31.983 -1.000 1 55 91
i 8.261 32.000 0.001 1 49 127
i -10.031 31.999 0
i -10.032 31.999 0
i 4.027 32.000 0.001 1 37 127
i -15.001 32.012 0
i 11.037 32.012 -1.000 1 38 78
i -11.036 32.031 0
i 8.262 32.124 0.001 1 49 127
i 8.263 32.249 0.001 1 49 127
i 8.264 32.375 0.001 1 49 127
i 8.265 32.500 0.001 1 49 127
i 7.027 32.500 0.001 1 39 127
i 8.266 32.624 0.001 1 49 127
i 8.267 32.749 0.001 1 49 127
i 11.038 32.760 -1.000 1 36 86
i -11.037 32.768 0
i 8.268 32.875 0.001 1 49 127
i 4.028 33.000 0.001 1 37 127
i 8.269 33.000 0.001 1 49 127
i 10.033 33.000 -1.000 1 72 127
i 10.034 33.000 -1.000 1 76 127
i 8.270 33.124 0.001 1 49 127
i 8.271 33.249 0.001 1 49 127
i -11.038 33.257 0
i 11.039 33.259 -1.000 1 33 74
i 8.272 33.375 0.001 1 49 127
i 8.273 33.500 0.001 1 49 127
i 7.028 33.500 0.001 1 39 127
i 11.040 33.508 -1.000 1 36 91
i -11.039 33.517 0
i 8.274 33.624 0.001 1 49 127
i 8.275 33.749 0.001 1 49 127
i 8.276 33.875 0.001 1 49 113
i 8.277 34.000 0.001 1 49 127
i -10.033 34.000 0
i -10.034 34.000 0
i -11.040 34.000 0
i 11.041 34.000 -1.000 1 38 81
i 4.029 34.000 0.001 1 37 127
i 15.003 34.008 -1.000 1 57 101
i -15.002 34.013 0
i 8.278 34.124 0.001 1 49 127
i 8.279 34.249 0.001 1 49 127
i 8.280 34.375 0.001 1 49 127
i 7.029 34.500 0.001 1 39 127
i 8.281 34.500 0.001 1 49 127
i 8.282 34.624 0.001 1 49 127
i 11.042 34.737 -1.000 1 41 89
i -11.041 34.744 0
i 8.283 34.749 0.001 1 49 127
i 8.284 34.875 0.001 1 49 127
i 4.030 35.000 0.001 1 37 127
i 8.285 35.000 0.001 1 49 127
i 10.035 35.000 -1.000 1 72 127
i 10.036 35.000 -1.000 1 76 127
i 8.286 35.124 0.001 1 49 127
i 8.287 35.249 0.001 1 49 127
i 11.043 35.255 -1.000 1 38 68
i -11.042 35.260 0
i 8.288 35.375 0.001 1 49 127
i 7.030 35.500 0.001 1 39 127
i 8.289 35.500 0.001 1 49 127
i 11.044 35.501 -1.000 1 41 78
i -11.043 35.509 0
i 8.290 35.624 0.001 1 49 127
i 8.291 35.749 0.001 1 49 127
i 8.292 35.875 0.001 1 49 113
i 15.004 35.984 -1.000 1 55 75
i -10.035 35.999 0
i 8.293 36.000 0.001 1 49 127
i -10.036 35.999 0
i 4.031 36.000 0.001 1 37 127
i 11.045 36.012 -1.000 1 38 78
i -15.003 36.024 0
i -11.044 36.031 0
i 8.294 36.124 0.001 1 49 127
i 8.295 36.249 0.001 1 49 127
i 8.296 36.375 0.001 1 49 127
i 8.297 36.500 0.001 1 49 127
i 7.031 36.500 0.001 1 39 127
i 8.298 36.624 0.001 1 49 127
i 8.299 36.749 0.001 1 49 127
i 11.046 36.760 -1.000 1 36 86
i -11.045 36.768 0
i 8.300 36.875 0.001 1 49 127
i 4.032 37.000 0.001 1 37 127
i 15.005 37.004 -1.000 1 52 91
i 8.301 37.000 0.001 1 49 127
i 10.037 37.000 -1.000 1 72 127
i 10.038 37.000 -1.000 1 76 127
i -15.004 37.024 0
i 8.302 37.124 0.001 1 49 127
i 8.303 37.249 0.001 1 49 127
i -11.046 37.257 0
i 11.047 37.259 -1.000 1 33 74
i 8.304 37.375 0.001 1 49 127
i 7.032 37.500 0.001 1 39 127
i 8.305 37.500 0.001 1 49 127
i 11.048 37.508 -1.000 1 36 91
i -11.047 37.517 0
i 8.306 37.624 0.001 1 49 127
i 8.307 37.749 0.001 1 49 127
i 8.308 37.875 0.001 1 49 113
i -15.005 37.945 0
i 15.006 37.980 -1.000 1 53 84
i 8.309 38.000 0.001 1 49 127
i 4.033 38.000 0.001 1 37 127
i -10.037 38.000 0
i -10.038 38.000 0
i -11.048 38.000 0
i 11.049 38.000 -1.000 1 38 81
i 16.001 38.000 -1.000 1 98 127
i 8.310 38.124 0.001 1 49 127
i 8.311 38.249 0.001 1 49 127
i 8.312 38.375 0.001 1 49 127
i 7.033 38.500 0.001 1 39 127
i 8.313 38.500 0.001 1 49 127
i 8.314 38.624 0.001 1 49 127
i 11.050 38.737 -1.000 1 41 89
i -11.049 38.744 0
i 8.315 38.749 0.001 1 49 127
i 8.316 38.875 0.001 1 49 127
i 8.317 39.000 0.001 1 49 127
i 4.034 39.000 0.001 1 37 127
i 10.039 39.000 -1.000 1 72 127
i 10.040 39.000 -1.000 1 76 127
i 8.318 39.124 0.001 1 49 127
i 8.319 39.249 0.001 1 49 127
i 11.051 39.255 -1.000 1 38 68
i -11.050 39.260 0
i 8.320 39.375 0.001 1 49 127
i 7.034 39.500 0.001 1 39 127
i 8.321 39.500 0.001 1 49 127
i 11.052 39.501 -1.000 1 41 78
i -11.051 39.509 0
i 8.322 39.624 0.001 1 49 127
i 8.323 39.749 0.001 1 49 127
i 8.324 39.875 0.001 1 49 113
i 4.035 40.000 0.001 1 37 127
i 8.325 40.000 0.001 1 49 127
i -10.039 39.999 0
i -10.040 39.999 0
i 13.035 40.000 -1.000 1 91 127
i 11.053 40.012 -1.000 1 38 78
i -11.052 40.031 0
i 8.326 40.124 0.001 1 49 127
i -13.035 40.124 0
i 13.036 40.124 -1.000 1 93 127
i -13.036 40.249 0
i 13.037 40.249 -1.000 1 89 127
i 8.327 40.249 0.001 1 49 127
i 8.328 40.375 0.001 1 49 127
i -13.037 40.375 0
i 13.038 40.375 -1.000 1 91 127
i 8.329 40.500 0.001 1 49 127
i 7.035 40.500 0.001 1 39 127
i -13.038 40.500 0
i 13.039 40.500 -1.000 1 93 127
i 8.330 40.624 0.001 1 49 127
i -13.039 40.624 0
i 13.040 40.624 -1.000 1 89 127
i -13.040 40.749 0
i 13.041 40.749 -1.000 1 91 127
i 8.331 40.749 0.001 1 49 127
i 11.054 40.760 -1.000 1 36 86
i -11.053 40.768 0
i 8.332 40.875 0.001 1 49 127
i -13.041 40.875 0
i 13.042 40.875 -1.000 1 93 127
i 4.036 41.000 0.001 1 37 127
i 8.333 41.000 0.001 1 49 127
i 10.041 41.000 -1.000 1 72 127
i 10.042 41.000 -1.000 1 76 127
i -13.042 41.000 0
i 13.043 41.000 -1.000 1 89 127
i 8.334 41.124 0.001 1 49 127
i -13.043 41.124 0
i 13.044 41.124 -1.000 1 91 127
i 8.335 41.249 0.001 1 49 127
i -13.044 41.249 0
i 13.045 41.249 -1.000 1 93 127
i -11.054 41.257 0
i 11.055 41.259 -1.000 1 33 74
i 8.336 41.375 0.001 1 49 127
i -13.045 41.375 0
i 13.046 41.375 -1.000 1 89 127
i 7.036 41.500 0.001 1 39 127
i 8.337 41.500 0.001 1 49 127
i -13.046 41.500 0
i 13.047 41.500 -1.000 1 91 127
i 11.056 41.508 -1.000 1 36 91
i -11.055 41.517 0
i 8.338 41.624 0.001 1 49 127
i -13.047 41.624 0
i 13.048 41.624 -1.000 1 93 127
i 8.339 41.749 0.001 1 49 127
i -13.048 41.749 0
i 13.049 41.749 -1.000 1 89 127
i -13.049 41.875 0
i 13.050 41.875 -1.000 1 91 127
i 8.340 41.875 0.001 1 49 113
i 8.341 42.000 0.001 1 49 127
i 4.037 42.000 0.001 1 37 127
i -10.041 42.000 0
i -10.042 42.000 0
i -13.050 42.000 0
i 13.051 42.000 -1.000 1 93 127
i -11.056 42.000 0
i 11.057 42.000 -1.000 1 38 81
i -13.051 42.124 0
i 8.342 42.124 0.001 1 49 127
i 8.343 42.249 0.001 1 49 127
i 8.344 42.375 0.001 1 49 127
i 7.037 42.500 0.001 1 39 127
i 8.345 42.500 0.001 1 49 127
i 8.346 42.624 0.001 1 49 127
i 11.058 42.737 -1.000 1 41 89
i -11.057 42.744 0
i 8.347 42.749 0.001 1 49 127
i 8.348 42.875 0.001 1 49 127
i 4.038 43.000 0.001 1 37 127
i 8.349 43.000 0.001 1 49 127
i 10.043 43.000 -1.000 1 72 127
i 10.044 43.000 -1.000 1 76 127
i 8.350 43.124 0.001 1 49 127
i 8.351 43.249 0.001 1 49 127
i 11.059 43.255 -1.000 1 38 68
i -11.058 43.260 0
i 8.352 43.375 0.001 1 49 127
i 7.038 43.500 0.001 1 39 127
i 8.353 43.500 0.001 1 49 127
i 11.060 43.501 -1.000 1 41 78
i -11.059 43.509 0
i 8.354 43.624 0.001 1 49 127
i 8.355 43.749 0.001 1 49 127
i 8.356 43.875 0.001 1 49 113
i -15.006 43.980 0
i -10.043 43.999 0
i -10.044 43.999 0
i 8.357 44.000 0.001 1 49 127
i 4.039 44.000 0.001 1 37 127
i 11.061 44.012 -1.000 1 38 78
i -11.060 44.031 0
i 8.358 44.124 0.001 1 49 127
i 8.359 44.249 0.001 1 49 127
i 8.360 44.375 0.001 1 49 127
i 8.361 44.500 0.001 1 49 127
i 7.039 44.500 0.001 1 39 127
i 8.362 44.624 0.001 1 49 127
i 8.363 44.749 0.001 1 49 127
i 11.062 44.760 -1.000 1 36 86
i -11.061 44.768 0
i 8.364 44.875 0.001 1 49 127
i 4.040 45.000 0.001 1 37 127
i 8.365 45.000 0.001 1 49 127
i 10.045 45.000 -1.000 1 72 127
i 10.046 45.000 -1.000 1 76 127
i 8.366 45.124 0.001 1 49 127
i 8.367 45.249 0.001 1 49 127
i -11.062 45.257 0
i 11.063 45.259 -1.000 1 33 74
i 8.368 45.375 0.001 1 49 127
i 8.369 45.500 0.001 1 49 127
i 7.040 45.500 0.001 1 39 127
i 11.064 45.508 -1.000 1 36 91
i -11.063 45.517 0
i 8.370 45.624 0.001 1 49 127
i 8.371 45.749 0.001 1 49 127
i 8.372 45.875 0.001 1 49 113
i -10.045 46.000 0
i -11.064 45.999 0
i -10.046 46.000 0
i 11.065 46.000 -1.000 1 38 83
i 14.001 45.997 -1.000 1 62 77
i 5.001 46.000 0.001 1 37 127
i 6.001 46.000 0.001 1 37 127
i -11.065 46.312 0
i 10.047 47.000 -1.000 1 72 127
i 10.048 47.000 -1.000 1 76 127
i 6.002 47.749 0.001 1 37 127
i 5.002 47.749 0.001 1 37 127
i -10.047 47.999 0
i 5.003 48.000 0.001 1 37 127
i 6.003 48.000 0.001 1 37 127
i -10.048 47.999 0
i 14.002 48.008 -1.000 1 64 85
i -14.001 48.032 0
i 10.049 49.000 -1.000 1 72 127
i 10.050 49.000 -1.000 1 76 127
i 14.003 49.971 -1.000 1 65 97
i -14.002 49.999 0
i 5.004 50.000 0.001 1 37 127
i 6.004 50.000 0.001 1 37 127
i -10.049 50.000 0
i -10.050 50.000 0
i 10.051 51.000 -1.000 1 72 127
i 10.052 51.000 -1.000 1 76 127
i 6.005 51.749 0.001 1 37 127
i 5.005 51.749 0.001 1 37 127
i 14.004 51.963 -1.000 1 64 85
i -14.003 51.988 0
i 5.006 52.000 0.001 1 37 127
i -10.051 51.999 0
i 6.006 52.000 0.001 1 37 127
i -10.052 51.999 0
i 14.005 52.960 -1.000 1 60 88
i -14.004 52.977 0
i 10.053 53.000 -1.000 1 72 127
i 10.054 53.000 -1.000 1 76 127
i 14.006 53.972 -1.000 1 62 92
i -14.005 53.987 0
i 5.007 54.000 0.001 1 37 127
i 6.007 54.000 0.001 1 37 127
i 12.001 54.000 -1.000 1 38 81
i 9.001 54.000 0.001 1 49 127
i -10.053 54.000 0
i -10.054 54.000 0
i 9.002 54.061 0.001 1 49 127
i 9.003 54.124 0.001 1 49 127
i 9.004 54.187 0.001 1 49 127
i 9.005 54.249 0.001 1 49 127
i 9.006 54.312 0.001 1 49 127
i 9.007 54.375 0.001 1 49 127
i 9.008 54.437 0.001 1 49 127
i 9.009 54.500 0.001 1 49 127
i 9.010 54.561 0.001 1 49 127
i 9.011 54.624 0.001 1 49 127
i 9.012 54.687 0.001 1 49 127
i 12.002 54.737 -1.000 1 41 89
i -12.001 54.744 0
i 9.013 54.749 0.001 1 49 127
i 9.014 54.812 0.001 1 49 127
i 9.015 54.875 0.001 1 49 127
i 9.016 54.937 0.001 1 49 127
i 9.017 55.000 0.001 1 49 127
i 10.055 55.000 -1.000 1 72 127
i 10.056 55.000 -1.000 1 76 127
i 9.018 55.061 0.001 1 49 127
i 9.019 55.124 0.001 1 49 127
i 9.020 55.187 0.001 1 49 127
i 9.021 55.249 0.001 1 49 127
i 12.003 55.255 -1.000 1 38 68
i -12.002 55.260 0
i 9.022 55.312 0.001 1 49 127
i 9.023 55.375 0.001 1 49 127
i 9.024 55.437 0.001 1 49 127
i 12.004 55.501 -1.000 1 41 78
i 9.025 55.500 0.001 1 49 127
i -12.003 55.509 0
i 9.026 55.561 0.001 1 49 127
i 9.027 55.624 0.001 1 49 127
i 9.028 55.687 0.001 1 49 127
i 9.029 55.749 0.001 1 49 127
i 5.008 55.749 0.001 1 37 127
i 6.008 55.749 0.001 1 37 127
i 9.030 55.812 0.001 1 49 127
i 9.031 55.875 0.001 1 49 127
i 9.032 55.937 0.001 1 49 127
i 9.033 56.000 0.001 1 49 127
i -10.055 55.999 0
i -10.056 55.999 0
i 5.009 56.000 0.001 1 37 127
i 6.009 56.000 0.001 1 37 127
i 12.005 56.012 -1.000 1 38 78
i -12.004 56.031 0
i 9.034 56.061 0.001 1 49 127
i 9.035 56.124 0.001 1 49 127
i 9.036 56.187 0.001 1 49 127
i 9.037 56.249 0.001 1 49 127
i 9.038 56.312 0.001 1 49 127
i 9.039 56.375 0.001 1 49 127
i 9.040 56.437 0.001 1 49 127
i -12.005 56.500 0
i 9.041 56.500 0.001 1 49 127
i 9.042 56.561 0.001 1 49 127
i 9.043 56.624 0.001 1 49 127
i 9.044 56.687 0.001 1 49 127
i 9.045 56.749 0.001 1 49 127
i 9.046 56.812 0.001 1 49 127
i 9.047 56.875 0.001 1 49 127
i 9.048 56.937 0.001 1 49 127
i 9.049 57.000 0.001 1 49 127
i 10.057 57.000 -1.000 1 72 127
i 10.058 57.000 -1.000 1 76 127
i 9.050 57.061 0.001 1 49 127
i 9.051 57.124 0.001 1 49 127
i 9.052 57.187 0.001 1 49 127
i 9.053 57.249 0.001 1 49 127
i 9.054 57.312 0.001 1 49 127
i 9.055 57.375 0.001 1 49 127
i 9.056 57.437 0.001 1 49 127
i 9.057 57.500 0.001 1 49 127
i 9.058 57.561 0.001 1 49 127
i 9.059 57.624 0.001 1 49 127
i 9.060 57.687 0.001 1 49 127
i 9.061 57.749 0.001 1 49 127
i 9.062 57.812 0.001 1 49 127
i 9.063 57.875 0.001 1 49 127
i 9.064 57.937 0.001 1 49 127
i 12.006 58.000 -1.000 1 38 81
i 5.010 58.000 0.001 1 37 127
i 6.010 58.000 0.001 1 37 127
i 9.065 58.000 0.001 1 49 127
i -10.057 58.000 0
i -10.058 58.000 0
i 9.066 58.061 0.001 1 49 127
i 9.067 58.124 0.001 1 49 127
i 9.068 58.187 0.001 1 49 127
i 9.069 58.249 0.001 1 49 127
i 9.070 58.312 0.001 1 49 127
i 9.071 58.375 0.001 1 49 127
i 9.072 58.437 0.001 1 49 127
i 9.073 58.500 0.001 1 49 127
i 9.074 58.561 0.001 1 49 127
i 9.075 58.624 0.001 1 49 127
i 9.076 58.687 0.001 1 49 127
i 12.007 58.737 -1.000 1 41 89
i -12.006 58.744 0
i 9.077 58.749 0.001 1 49 127
i 9.078 58.812 0.001 1 49 127
i 9.079 58.875 0.001 1 49 127
i 9.080 58.937 0.001 1 49 127
i 9.081 59.000 0.001 1 49 127
i 10.059 59.000 -1.000 1 72 127
i 10.060 59.000 -1.000 1 76 127
i 9.082 59.061 0.001 1 49 127
i 9.083 59.124 0.001 1 49 127
i 9.084 59.187 0.001 1 49 127
i 9.085 59.249 0.001 1 49 127
i 12.008 59.255 -1.000 1 38 68
i -12.007 59.260 0
i 9.086 59.312 0.001 1 49 127
i 9.087 59.375 0.001 1 49 127
i 9.088 59.437 0.001 1 49 127
i 12.009 59.501 -1.000 1 41 78
i 9.089 59.500 0.001 1 49 127
i -12.008 59.509 0
i 9.090 59.561 0.001 1 49 127
i 9.091 59.624 0.001 1 49 127
i 9.092 59.687 0.001 1 49 127
i 6.011 59.749 0.001 1 37 127
i 9.093 59.749 0.001 1 49 127
i 5.011 59.749 0.001 1 37 127
i 9.094 59.812 0.001 1 49 127
i 9.095 59.875 0.001 1 49 127
i 9.096 59.937 0.001 1 49 127
i -16.001 59.999 0
i 6.012 60.000 0.001 1 37 127
i 5.012 60.000 0.001 1 37 127
i 9.097 60.000 0.001 1 49 127
i -10.059 59.999 0
i -10.060 59.999 0
i 12.010 60.012 -1.000 1 38 78
i -12.009 60.031 0
i 9.098 60.061 0.001 1 49 127
i 9.099 60.124 0.001 1 49 127
i 9.100 60.187 0.001 1 49 127
i 9.101 60.249 0.001 1 49 127
i 9.102 60.312 0.001 1 49 127
i 9.103 60.375 0.001 1 49 127
i 9.104 60.437 0.001 1 49 127
i -12.010 60.500 0
i 9.105 60.500 0.001 1 49 127
i 9.106 60.561 0.001 1 49 127
i 9.107 60.624 0.001 1 49 127
i 9.108 60.687 0.001 1 49 127
i 9.109 60.749 0.001 1 49 127
i 9.110 60.812 0.001 1 49 127
i 9.111 60.875 0.001 1 49 127
i 9.112 60.937 0.001 1 49 127
i 10.061 61.000 -1.000 1 72 127
i 9.113 61.000 0.001 1 49 127
i 10.062 61.000 -1.000 1 76 127
i 9.114 61.061 0.001 1 49 127
i 9.115 61.124 0.001 1 49 127
i 9.116 61.187 0.001 1 49 127
i 9.117 61.249 0.001 1 49 127
i 9.118 61.312 0.001 1 49 127
i 9.119 61.375 0.001 1 49 127
i 9.120 61.437 0.001 1 49 127
i 9.121 61.500 0.001 1 49 127
i -14.006 61.499 0
i 9.122 61.561 0.001 1 49 127
i 9.123 61.624 0.001 1 49 127
i 9.124 61.687 0.001 1 49 127
i 9.125 61.749 0.001 1 49 127
i 9.126 61.812 0.001 1 49 127
i 9.127 61.875 0.001 1 49 127
i 9.128 61.937 0.001 1 49 127
i 6.013 62.000 0.001 1 37 127
i 8.373 62.000 0.001 1 49 127
i 9.129 62.000 0.001 1 49 127
i 11.066 62.000 -1.000 1 38 81
i -10.061 62.000 0
i -10.062 62.000 0
i 4.041 62.000 0.001 1 37 127
i 14.007 62.000 -1.000 1 62 80
i 5.013 62.000 0.001 1 37 127
i 15.007 62.004 -1.000 1 53 74
i 9.130 62.061 0.001 1 49 127
i 9.131 62.124 0.001 1 49 127
i 8.374 62.124 0.001 1 49 127
i 9.132 62.187 0.001 1 49 127
i 9.133 62.249 0.001 1 49 127
i 8.375 62.249 0.001 1 49 127
i 9.134 62.312 0.001 1 49 127
i 8.376 62.375 0.001 1 49 127
i 9.135 62.375 0.001 1 49 127
i 9.136 62.437 0.001 1 49 127
i 7.041 62.500 0.001 1 39 127
i 8.377 62.500 0.001 1 49 127
i 9.137 62.500 0.001 1 49 127
i 9.138 62.561 0.001 1 49 127
i 8.378 62.624 0.001 1 49 127
i 9.139 62.624 0.001 1 49 127
i 9.140 62.687 0.001 1 49 127
i 11.067 62.737 -1.000 1 41 89
i -11.066 62.744 0
i 8.379 62.749 0.001 1 49 127
i 9.141 62.749 0.001 1 49 127
i 9.142 62.812 0.001 1 49 127
i 8.380 62.875 0.001 1 49 127
i 9.143 62.875 0.001 1 49 127
i 9.144 62.937 0.001 1 49 127
i 8.381 63.000 0.001 1 49 127
i 4.042 63.000 0.001 1 37 127
i 9.145 63.000 0.001 1 49 127
i 10.063 63.000 -1.000 1 72 127
i 10.064 63.000 -1.000 1 76 127
i 9.146 63.061 0.001 1 49 127
i 8.382 63.124 0.001 1 49 127
i 9.147 63.124 0.001 1 49 127
i 9.148 63.187 0.001 1 49 127
i 8.383 63.249 0.001 1 49 127
i 9.149 63.249 0.001 1 49 127
i 11.068 63.255 -1.000 1 38 68
i -11.067 63.260 0
i 9.150 63.312 0.001 1 49 127
i 8.384 63.375 0.001 1 49 127
i 9.151 63.375 0.001 1 49 127
i 9.152 63.437 0.001 1 49 127
i 8.385 63.500 0.001 1 49 127
i 7.042 63.500 0.001 1 39 127
i 9.153 63.500 0.001 1 49 127
i 11.069 63.501 -1.000 1 41 78
i -11.068 63.509 0
i 9.154 63.561 0.001 1 49 127
i 8.386 63.624 0.001 1 49 127
i 9.155 63.624 0.001 1 49 127
i 9.156 63.687 0.001 1 49 127
i 6.014 63.749 0.001 1 37 127
i 5.014 63.749 0.001 1 37 127
i 8.387 63.749 0.001 1 49 127
i 9.157 63.749 0.001 1 49 127
i 9.158 63.812 0.001 1 49 127
i 8.388 63.875 0.001 1 49 113
i 9.159 63.875 0.001 1 49 127
i 9.160 63.937 0.001 1 49 127
i -14.007 63.971 0
i 14.008 63.975 -1.000 1 64 100
i 15.008 63.993 -1.000 1 55 91
i 4.043 64.000 0.001 1 37 127
i 8.389 64.000 0.001 1 49 127
i -10.063 63.999 0
i 9.161 64.000 0.001 1 49 127
i -10.064 63.999 0
i 6.015 64.000 0.001 1 37 127
i 5.015 64.000 0.001 1 37 127
i 11.070 64.012 -1.000 1 38 78
i -15.007 64.023 0
i -11.069 64.031 0
i 9.162 64.061 0.001 1 49 127
i 8.390 64.124 0.001 1 49 127
i 9.163 64.124 0.001 1 49 127
i 9.164 64.187 0.001 1 49 127
i 9.165 64.249 0.001 1 49 127
i 8.391 64.249 0.001 1 49 127
i 9.166 64.312 0.001 1 49 127
i 8.392 64.375 0.001 1 49 127
i 9.167 64.375 0.001 1 49 127
i 9.168 64.437 0.001 1 49 127
i 8.393 64.500 0.001 1 49 127
i 7.043 64.500 0.001 1 39 127
i 9.169 64.500 0.001 1 49 127
i 9.170 64.561 0.001 1 49 127
i 8.394 64.624 0.001 1 49 127
i 9.171 64.624 0.001 1 49 127
i 9.172 64.687 0.001 1 49 127
i 9.173 64.749 0.001 1 49 127
i 8.395 64.749 0.001 1 49 127
i 11.071 64.760 -1.000 1 36 86
i -11.070 64.768 0
i 9.174 64.812 0.001 1 49 127
i 8.396 64.875 0.001 1 49 127
i 9.175 64.875 0.001 1 49 127
i 9.176 64.937 0.001 1 49 127
i 4.044 65.000 0.001 1 37 127
i 8.397 65.000 0.001 1 49 127
i 9.177 65.000 0.001 1 49 127
i 10.065 65.000 -1.000 1 72 127
i 10.066 65.000 -1.000 1 76 127
i 9.178 65.061 0.001 1 49 127
i 8.398 65.124 0.001 1 49 127
i 9.179 65.124 0.001 1 49 127
i 9.180 65.187 0.001 1 49 127
i 8.399 65.249 0.001 1 49 127
i 9.181 65.249 0.001 1 49 127
i -11.071 65.257 0
i 11.072 65.259 -1.000 1 33 74
i 9.182 65.312 0.001 1 49 127
i 8.400 65.375 0.001 1 49 127
i 9.183 65.375 0.001 1 49 127
i 9.184 65.437 0.001 1 49 127
i 7.044 65.500 0.001 1 39 127
i 8.401 65.500 0.001 1 49 127
i 9.185 65.500 0.001 1 49 127
i 11.073 65.508 -1.000 1 36 91
i -11.072 65.517 0
i 9.186 65.561 0.001 1 49 127
i 9.187 65.624 0.001 1 49 127
i 8.402 65.624 0.001 1 49 127
i 9.188 65.687 0.001 1 49 127
i 9.189 65.749 0.001 1 49 127
i 8.403 65.749 0.001 1 49 127
i 9.190 65.812 0.001 1 49 127
i 8.404 65.875 0.001 1 49 113
i 9.191 65.875 0.001 1 49 127
i 9.192 65.937 0.001 1 49 127
i 14.009 65.955 -1.000 1 65 103
i 15.009 65.971 -1.000 1 57 101
i -14.008 65.981 0
i 4.045 66.000 0.001 1 37 127
i 6.016 66.000 0.001 1 37 127
i 8.405 66.000 0.001 1 49 127
i -11.073 66.000 0
i 11.074 66.000 -1.000 1 38 81
i 9.193 66.000 0.001 1 49 127
i 5.016 66.000 0.001 1 37 127
i -10.065 66.000 0
i -10.066 66.000 0
i -15.008 66.025 0
i 9.194 66.061 0.001 1 49 127
i 9.195 66.124 0.001 1 49 127
i 8.406 66.124 0.001 1 49 127
i 9.196 66.187 0.001 1 49 127
i 8.407 66.249 0.001 1 49 127
i 9.197 66.249 0.001 1 49 127
i 9.198 66.312 0.001 1 49 127
i 8.408 66.375 0.001 1 49 127
i 9.199 66.375 0.001 1 49 127
i 9.200 66.437 0.001 1 49 127
i 8.409 66.500 0.001 1 49 127
i 7.045 66.500 0.001 1 39 127
i 9.201 66.500 0.001 1 49 127
i 9.202 66.561 0.001 1 49 127
i 8.410 66.624 0.001 1 49 127
i 9.203 66.624 0.001 1 49 127
i 9.204 66.687 0.001 1 49 127
i 11.075 66.737 -1.000 1 41 89
i -11.074 66.744 0
i 8.411 66.749 0.001 1 49 127
i 9.205 66.749 0.001 1 49 127
i 9.206 66.812 0.001 1 49 127
i 8.412 66.875 0.001 1 49 127
i 9.207 66.875 0.001 1 49 127
i 9.208 66.937 0.001 1 49 127
i 4.046 67.000 0.001 1 37 127
i 9.209 67.000 0.001 1 49 127
i 8.413 67.000 0.001 1 49 127
i 10.067 67.000 -1.000 1 72 127
i 10.068 67.000 -1.000 1 76 127
i 9.210 67.061 0.001 1 49 127
i 8.414 67.124 0.001 1 49 127
i 9.211 67.124 0.001 1 49 127
i 9.212 67.187 0.001 1 49 127
i 9.213 67.249 0.001 1 49 127
i 8.415 67.249 0.001 1 49 127
i 11.076 67.255 -1.000 1 38 68
i -11.075 67.260 0
i 9.214 67.312 0.001 1 49 127
i 8.416 67.375 0.001 1 49 127
i 9.215 67.375 0.001 1 49 127
i 9.216 67.437 0.001 1 49 127
i 7.046 67.500 0.001 1 39 127
i 9.217 67.500 0.001 1 49 127
i 8.417 67.500 0.001 1 49 127
i 11.077 67.501 -1.000 1 41 78
i -11.076 67.509 0
i 9.218 67.561 0.001 1 49 127
i 9.219 67.624 0.001 1 49 127
i 8.418 67.624 0.001 1 49 127
i 9.220 67.687 0.001 1 49 127
i 6.017 67.749 0.001 1 37 127
i 5.017 67.749 0.001 1 37 127
i 8.419 67.749 0.001 1 49 127
i 9.221 67.749 0.001 1 49 127
i 9.222 67.812 0.001 1 49 127
i 9.223 67.875 0.001 1 49 127
i 8.420 67.875 0.001 1 49 113
i 9.224 67.937 0.001 1 49 127
i 14.010 67.955 -1.000 1 64 100
i -14.009 67.977 0
i 15.010 67.995 -1.000 1 55 75
i -10.067 67.999 0
i -10.068 67.999 0
i 8.421 68.000 0.001 1 49 127
i 9.225 68.000 0.001 1 49 127
i 6.018 68.000 0.001 1 37 127
i 4.047 68.000 0.001 1 37 127
i 5.018 68.000 0.001 1 37 127
i 11.078 68.012 -1.000 1 38 78
i -11.077 68.031 0
i -15.009 68.035 0
i 9.226 68.061 0.001 1 49 127
i 9.227 68.124 0.001 1 49 127
i 8.422 68.124 0.001 1 49 127
i 9.228 68.187 0.001 1 49 127
i 9.229 68.249 0.001 1 49 127
i 8.423 68.249 0.001 1 49 127
i 9.230 68.312 0.001 1 49 127
i 8.424 68.375 0.001 1 49 127
i 9.231 68.375 0.001 1 49 127
i 9.232 68.437 0.001 1 49 127
i 8.425 68.500 0.001 1 49 127
i 9.233 68.500 0.001 1 49 127
i 7.047 68.500 0.001 1 39 127
i 9.234 68.561 0.001 1 49 127
i 9.235 68.624 0.001 1 49 127
i 8.426 68.624 0.001 1 49 127
i 9.236 68.687 0.001 1 49 127
i 8.427 68.749 0.001 1 49 127
i 9.237 68.749 0.001 1 49 127
i 11.079 68.760 -1.000 1 36 86
i -11.078 68.768 0
i 9.238 68.812 0.001 1 49 127
i 8.428 68.875 0.001 1 49 127
i 9.239 68.875 0.001 1 49 127
i 9.240 68.937 0.001 1 49 127
i 14.011 68.984 -1.000 1 60 90
i 10.069 69.000 -1.000 1 72 127
i 4.048 69.000 0.001 1 37 127
i -14.010 69.000 0
i 10.070 69.000 -1.000 1 76 127
i 8.429 69.000 0.001 1 49 127
i 9.241 69.000 0.001 1 49 127
i 15.011 69.015 -1.000 1 52 91
i -15.010 69.035 0
i 9.242 69.061 0.001 1 49 127
i 8.430 69.124 0.001 1 49 127
i 9.243 69.124 0.001 1 49 127
i 9.244 69.187 0.001 1 49 127
i 8.431 69.249 0.001 1 49 127
i 9.245 69.249 0.001 1 49 127
i -11.079 69.257 0
i 11.080 69.259 -1.000 1 33 74
i 9.246 69.312 0.001 1 49 127
i 8.432 69.375 0.001 1 49 127
i 9.247 69.375 0.001 1 49 127
i 9.248 69.437 0.001 1 49 127
i 7.048 69.500 0.001 1 39 127
i 8.433 69.500 0.001 1 49 127
i 9.249 69.500 0.001 1 49 127
i 11.081 69.508 -1.000 1 36 91
i -11.080 69.517 0
i 9.250 69.561 0.001 1 49 127
i 8.434 69.624 0.001 1 49 127
i 9.251 69.624 0.001 1 49 127
i 9.252 69.687 0.001 1 49 127
i 8.435 69.749 0.001 1 49 127
i 9.253 69.749 0.001 1 49 127
i 9.254 69.812 0.001 1 49 127
i 8.436 69.875 0.001 1 49 113
i 9.255 69.875 0.001 1 49 127
i 9.256 69.937 0.001 1 49 127
i 14.012 69.969 -1.000 1 62 92
i 15.012 69.991 -1.000 1 53 84
i 4.049 70.000 0.001 1 37 127
i 5.019 70.000 0.001 1 37 127
i 8.437 70.000 0.001 1 49 127
i 9.257 70.000 0.001 1 49 127
i 6.019 70.000 0.001 1 37 127
i -10.069 70.000 0
i -10.070 70.000 0
i 13.052 70.000 -1.000 1 91 127
i -11.081 70.000 0
i -14.011 70.000 0
i 11.082 70.000 -1.000 1 38 81
i -15.011 70.000 0
i 16.002 70.000 -1.000 1 101 127
i 9.258 70.061 0.001 1 49 127
i -13.052 70.124 0
i 13.053 70.124 -1.000 1 93 127
i 8.438 70.124 0.001 1 49 127
i 9.259 70.124 0.001 1 49 127
i 9.260 70.187 0.001 1 49 127
i 8.439 70.249 0.001 1 49 127
i 9.261 70.249 0.001 1 49 127
i -13.053 70.249 0
i 13.054 70.249 -1.000 1 89 127
i 9.262 70.312 0.001 1 49 127
i -13.054 70.375 0
i 13.055 70.375 -1.000 1 91 127
i 8.440 70.375 0.001 1 49 127
i 9.263 70.375 0.001 1 49 127
i 9.264 70.437 0.001 1 49 127
i 9.265 70.500 0.001 1 49 127
i 7.049 70.500 0.001 1 39 127
i -13.055 70.500 0
i 13.056 70.500 -1.000 1 93 127
i 8.441 70.500 0.001 1 49 127
i 9.266 70.561 0.001 1 49 127
i 8.442 70.624 0.001 1 49 127
i 9.267 70.624 0.001 1 49 127
i -13.056 70.624 0
i 13.057 70.624 -1.000 1 89 127
i 9.268 70.687 0.001 1 49 127
i 11.083 70.737 -1.000 1 41 89
i -11.082 70.744 0
i -13.057 70.749 0
i 13.058 70.749 -1.000 1 91 127
i 8.443 70.749 0.001 1 49 127
i 9.269 70.749 0.001 1 49 127
i 9.270 70.812 0.001 1 49 127
i -13.058 70.875 0
i 13.059 70.875 -1.000 1 93 127
i 8.444 70.875 0.001 1 49 127
i 9.271 70.875 0.001 1 49 127
i 9.272 70.937 0.001 1 49 127
i 8.445 71.000 0.001 1 49 127
i 9.273 71.000 0.001 1 49 127
i -13.059 71.000 0
i 13.060 71.000 -1.000 1 89 127
i 10.071 71.000 -1.000 1 72 127
i 4.050 71.000 0.001 1 37 127
i 10.072 71.000 -1.000 1 76 127
i 9.274 71.061 0.001 1 49 127
i 8.446 71.124 0.001 1 49 127
i 9.275 71.124 0.001 1 49 127
i -13.060 71.124 0
i 13.061 71.124 -1.000 1 91 127
i 9.276 71.187 0.001 1 49 127
i 8.447 71.249 0.001 1 49 127
i 9.277 71.249 0.001 1 49 127
i -13.061 71.249 0
i 13.062 71.249 -1.000 1 93 127
i 11.084 71.255 -1.000 1 38 68
i -11.083 71.260 0
i 9.278 71.312 0.001 1 49 127
i 9.279 71.375 0.001 1 49 127
i 8.448 71.375 0.001 1 49 127
i -13.062 71.375 0
i 13.063 71.375 -1.000 1 89 127
i 9.280 71.437 0.001 1 49 127
i -13.063 71.500 0
i 11.085 71.501 -1.000 1 41 78
i 13.064 71.500 -1.000 1 91 127
i 8.449 71.500 0.001 1 49 127
i 7.050 71.500 0.001 1 39 127
i 9.281 71.500 0.001 1 49 127
i -11.084 71.509 0
i 9.282 71.561 0.001 1 49 127
i 9.283 71.624 0.001 1 49 127
i 8.450 71.624 0.001 1 49 127
i -13.064 71.624 0
i 13.065 71.624 -1.000 1 93 127
i 9.284 71.687 0.001 1 49 127
i 8.451 71.749 0.001 1 49 127
i 6.020 71.749 0.001 1 37 127
i 5.020 71.749 0.001 1 37 127
i 9.285 71.749 0.001 1 49 127
i -13.065 71.749 0
i 13.066 71.749 -1.000 1 89 127
i 9.286 71.812 0.001 1 49 127
i -13.066 71.875 0
i 13.067 71.875 -1.000 1 91 127
i 8.452 71.875 0.001 1 49 113
i 9.287 71.875 0.001 1 49 127
i 9.288 71.937 0.001 1 49 127
i 9.289 72.000 0.001 1 49 127
i -10.071 71.999 0
i 8.453 72.000 0.001 1 49 127
i -10.072 71.999 0
i -13.067 72.000 0
i 13.068 72.000 -1.000 1 93 127
i 4.051 72.000 0.001 1 37 127
i 5.021 72.000 0.001 1 37 127
i 6.021 72.000 0.001 1 37 127
i 11.086 72.012 -1.000 1 38 78
i -11.085 72.031 0
i 9.290 72.061 0.001 1 49 127
i 8.454 72.124 0.001 1 49 127
i -13.068 72.124 0
i 9.291 72.124 0.001 1 49 127
i 9.292 72.187 0.001 1 49 127
i 8.455 72.249 0.001 1 49 127
i 9.293 72.249 0.001 1 49 127
i 9.294 72.312 0.001 1 49 127
i 8.456 72.375 0.001 1 49 127
i 9.295 72.375 0.001 1 49 127
i 9.296 72.437 0.001 1 49 127
i 7.051 72.500 0.001 1 39 127
i 8.457 72.500 0.001 1 49 127
i 9.297 72.500 0.001 1 49 127
i 9.298 72.561 0.001 1 49 127
i 8.458 72.624 0.001 1 49 127
i 9.299 72.624 0.001 1 49 127
i 9.300 72.687 0.001 1 49 127
i 8.459 72.749 0.001 1 49 127
i 9.301 72.749 0.001 1 49 127
i 11.087 72.760 -1.000 1 36 86
i -11.086 72.768 0
i 9.302 72.812 0.001 1 49 127
i 8.460 72.875 0.001 1 49 127
i 9.303 72.875 0.001 1 49 127
i 9.304 72.937 0.001 1 49 127
i 4.052 73.000 0.001 1 37 127
i 8.461 73.000 0.001 1 49 127
i 9.305 73.000 0.001 1 49 127
i 10.073 73.000 -1.000 1 72 127
i 10.074 73.000 -1.000 1 76 127
i 9.306 73.061 0.001 1 49 127
i 9.307 73.124 0.001 1 49 127
i 8.462 73.124 0.001 1 49 127
i 9.308 73.187 0.001 1 49 127
i 8.463 73.249 0.001 1 49 127
i 9.309 73.249 0.001 1 49 127
i -11.087 73.257 0
i 11.088 73.259 -1.000 1 33 74
i 9.310 73.312 0.001 1 49 127
i 8.464 73.375 0.001 1 49 127
i 9.311 73.375 0.001 1 49 127
i 9.312 73.437 0.001 1 49 127
i 7.052 73.500 0.001 1 39 127
i 8.465 73.500 0.001 1 49 127
i 9.313 73.500 0.001 1 49 127
i 11.089 73.508 -1.000 1 36 91
i -11.088 73.517 0
i 9.314 73.561 0.001 1 49 127
i 9.315 73.624 0.001 1 49 127
i 8.466 73.624 0.001 1 49 127
i 9.316 73.687 0.001 1 49 127
i 9.317 73.749 0.001 1 49 127
i 8.467 73.749 0.001 1 49 127
i 9.318 73.812 0.001 1 49 127
i 8.468 73.875 0.001 1 49 113
i 9.319 73.875 0.001 1 49 127
i 9.320 73.937 0.001 1 49 127
i 4.053 74.000 0.001 1 37 127
i 8.469 74.000 0.001 1 49 127
i 9.321 74.000 0.001 1 49 127
i -10.073 74.000 0
i -10.074 74.000 0
i -11.089 73.999 0
i 6.022 74.000 0.001 1 37 127
i 5.022 74.000 0.001 1 37 127
i 11.090 74.000 -1.000 1 38 83
i 9.322 74.061 0.001 1 49 127
i 8.470 74.124 0.001 1 49 127
i 9.323 74.124 0.001 1 49 127
i 9.324 74.187 0.001 1 49 127
i 8.471 74.249 0.001 1 49 127
i 9.325 74.249 0.001 1 49 127
i 9.326 74.312 0.001 1 49 127
i 8.472 74.375 0.001 1 49 127
i 9.327 74.375 0.001 1 49 127
i 9.328 74.437 0.001 1 49 127
i 7.053 74.500 0.001 1 39 127
i 9.329 74.500 0.001 1 49 127
i 8.473 74.500 0.001 1 49 127
i 9.330 74.561 0.001 1 49 127
i 8.474 74.624 0.001 1 49 127
i 9.331 74.624 0.001 1 49 127
i 9.332 74.687 0.001 1 49 127
i 11.091 74.737 -1.000 1 41 103
i -11.090 74.756 0
i 9.333 74.749 0.001 1 49 127
i 8.475 74.749 0.001 1 49 127
i 9.334 74.812 0.001 1 49 127
i 8.476 74.875 0.001 1 49 127
i 9.335 74.875 0.001 1 49 127
i 9.336 74.937 0.001 1 49 127
i 8.477 75.000 0.001 1 49 127
i 9.337 75.000 0.001 1 49 127
i 10.075 75.000 -1.000 1 72 127
i 4.054 75.000 0.001 1 37 127
i 10.076 75.000 -1.000 1 76 127
i 9.338 75.061 0.001 1 49 127
i 9.339 75.124 0.001 1 49 127
i 8.478 75.124 0.001 1 49 127
i 9.340 75.187 0.001 1 49 127
i 11.092 75.223 -1.000 1 44 76
i -11.091 75.235 0
i 8.479 75.249 0.001 1 49 127
i 9.341 75.249 0.001 1 49 127
i 9.342 75.312 0.001 1 49 127
i 8.480 75.375 0.001 1 49 127
i 9.343 75.375 0.001 1 49 127
i 9.344 75.437 0.001 1 49 127
i 8.481 75.500 0.001 1 49 127
i 7.054 75.500 0.001 1 39 127
i 9.345 75.500 0.001 1 49 127
i -11.092 75.523 0
i 11.093 75.523 -1.000 1 43 89
i 9.346 75.561 0.001 1 49 127
i 9.347 75.624 0.001 1 49 127
i 8.482 75.624 0.001 1 49 127
i 9.348 75.687 0.001 1 49 127
i 6.023 75.749 0.001 1 37 127
i 5.023 75.749 0.001 1 37 127
i 8.483 75.749 0.001 1 49 127
i 9.349 75.749 0.001 1 49 127
i 9.350 75.812 0.001 1 49 127
i 9.351 75.875 0.001 1 49 127
i 8.484 75.875 0.001 1 49 113
i 9.352 75.937 0.001 1 49 127
i 6.024 76.000 0.001 1 37 127
i 5.024 76.000 0.001 1 37 127
i 4.055 76.000 0.001 1 37 127
i 8.485 76.000 0.001 1 49 127
i -11.093 75.997 0
i 11.094 75.997 -1.000 1 41 97
i -10.075 75.999 0
i -10.076 75.999 0
i 9.353 76.000 0.001 1 49 127
i 9.354 76.061 0.001 1 49 127
i 8.486 76.124 0.001 1 49 127
i 9.355 76.124 0.001 1 49 127
i 9.356 76.187 0.001 1 49 127
i 8.487 76.249 0.001 1 49 127
i 9.357 76.249 0.001 1 49 127
i 9.358 76.312 0.001 1 49 127
i 8.488 76.375 0.001 1 49 127
i 9.359 76.375 0.001 1 49 127
i 9.360 76.437 0.001 1 49 127
i 8.489 76.500 0.001 1 49 127
i 9.361 76.500 0.001 1 49 127
i 7.055 76.500 0.001 1 39 127
i 9.362 76.561 0.001 1 49 127
i 8.490 76.624 0.001 1 49 127
i 9.363 76.624 0.001 1 49 127
i 9.364 76.687 0.001 1 49 127
i 8.491 76.749 0.001 1 49 127
i 9.365 76.749 0.001 1 49 127
i -11.094 76.756 0
i 11.095 76.759 -1.000 1 38 80
i 9.366 76.812 0.001 1 49 127
i 9.367 76.875 0.001 1 49 127
i 8.492 76.875 0.001 1 49 127
i 9.368 76.937 0.001 1 49 127
i 4.056 77.000 0.001 1 37 127
i 8.493 77.000 0.001 1 49 127
i 9.369 77.000 0.001 1 49 127
i 10.077 77.000 -1.000 1 72 127
i 10.078 77.000 -1.000 1 76 127
i 9.370 77.061 0.001 1 49 127
i 8.494 77.124 0.001 1 49 127
i 9.371 77.124 0.001 1 49 127
i 9.372 77.187 0.001 1 49 127
i 11.096 77.205 -1.000 1 33 79
i -11.095 77.229 0
i 8.495 77.249 0.001 1 49 127
i 9.373 77.249 0.001 1 49 127
i 9.374 77.312 0.001 1 49 127
i 8.496 77.375 0.001 1 49 127
i 9.375 77.375 0.001 1 49 127
i 9.376 77.437 0.001 1 49 127
i 7.056 77.500 0.001 1 39 127
i 8.497 77.500 0.001 1 49 127
i -15.012 77.499 0
i 9.377 77.500 0.001 1 49 127
i -14.012 77.499 0
i 11.097 77.507 -1.000 1 36 89
i -11.096 77.508 0
i 9.378 77.561 0.001 1 49 127
i 8.498 77.624 0.001 1 49 127
i 9.379 77.624 0.001 1 49 127
i 9.380 77.687 0.001 1 49 127
i 9.381 77.749 0.001 1 49 127
i 8.499 77.749 0.001 1 49 127
i 9.382 77.812 0.001 1 49 127
i 9.383 77.875 0.001 1 49 127
i 8.500 77.875 0.001 1 49 113
i 9.384 77.937 0.001 1 49 127
i 8.501 78.000 0.001 1 49 127
i 6.025 78.000 0.001 1 37 127
i 4.057 78.000 0.001 1 37 127
i 5.025 78.000 0.001 1 37 127
i 9.385 78.000 0.001 1 49 127
i -10.077 78.000 0
i -10.078 78.000 0
i -11.097 77.999 0
i 11.098 78.000 -1.000 1 38 81
i 14.013 78.000 -1.000 1 62 80
i 15.013 78.004 -1.000 1 53 74
i 9.386 78.061 0.001 1 49 127
i 8.502 78.124 0.001 1 49 127
i 9.387 78.124 0.001 1 49 127
i 9.388 78.187 0.001 1 49 127
i 9.389 78.249 0.001 1 49 127
i 8.503 78.249 0.001 1 49 127
i 9.390 78.312 0.001 1 49 127
i 8.504 78.375 0.001 1 49 127
i 9.391 78.375 0.001 1 49 127
i 9.392 78.437 0.001 1 49 127
i 8.505 78.500 0.001 1 49 127
i 7.057 78.500 0.001 1 39 127
i 9.393 78.500 0.001 1 49 127
i 9.394 78.561 0.001 1 49 127
i 8.506 78.624 0.001 1 49 127
i 9.395 78.624 0.001 1 49 127
i 9.396 78.687 0.001 1 49 127
i 11.099 78.737 -1.000 1 41 89
i -11.098 78.744 0
i 8.507 78.749 0.001 1 49 127
i 9.397 78.749 0.001 1 49 127
i 9.398 78.812 0.001 1 49 127
i 8.508 78.875 0.001 1 49 127
i 9.399 78.875 0.001 1 49 127
i 9.400 78.937 0.001 1 49 127
i 8.509 79.000 0.001 1 49 127
i 9.401 79.000 0.001 1 49 127
i 10.079 79.000 -1.000 1 72 127
i 10.080 79.000 -1.000 1 76 127
i 4.058 79.000 0.001 1 37 127
i 9.402 79.061 0.001 1 49 127
i 9.403 79.124 0.001 1 49 127
i 8.510 79.124 0.001 1 49 127
i 9.404 79.187 0.001 1 49 127
i 8.511 79.249 0.001 1 49 127
i 9.405 79.249 0.001 1 49 127
i 11.100 79.255 -1.000 1 38 68
i -11.099 79.260 0
i 9.406 79.312 0.001 1 49 127
i 8.512 79.375 0.001 1 49 127
i 9.407 79.375 0.001 1 49 127
i 9.408 79.437 0.001 1 49 127
i 11.101 79.501 -1.000 1 41 78
i 8.513 79.500 0.001 1 49 127
i 7.058 79.500 0.001 1 39 127
i 9.409 79.500 0.001 1 49 127
i -11.100 79.509 0
i 9.410 79.561 0.001 1 49 127
i 9.411 79.624 0.001 1 49 127
i 8.514 79.624 0.001 1 49 127
i 9.412 79.687 0.001 1 49 127
i 6.026 79.749 0.001 1 37 127
i 9.413 79.749 0.001 1 49 127
i 8.515 79.749 0.001 1 49 127
i 5.026 79.749 0.001 1 37 127
i 9.414 79.812 0.001 1 49 127
i 8.516 79.875 0.001 1 49 113
i 9.415 79.875 0.001 1 49 127
i 9.416 79.937 0.001 1 49 127
i -14.013 79.971 0
i 14.014 79.975 -1.000 1 64 100
i 15.014 79.993 -1.000 1 55 91
i 4.059 80.000 0.001 1 37 127
i 5.027 80.000 0.001 1 37 127
i 6.027 80.000 0.001 1 37 127
i 8.517 80.000 0.001 1 49 127
i -10.079 79.999 0
i 9.417 80.000 0.001 1 49 127
i -10.080 79.999 0
i 11.102 80.012 -1.000 1 38 78
i -15.013 80.023 0
i -11.101 80.031 0
i 9.418 80.061 0.001 1 49 127
i 8.518 80.124 0.001 1 49 127
i 9.419 80.124 0.001 1 49 127
i 9.420 80.187 0.001 1 49 127
i 8.519 80.249 0.001 1 49 127
i 9.421 80.249 0.001 1 49 127
i 9.422 80.312 0.001 1 49 127
i 9.423 80.375 0.001 1 49 127
i 8.520 80.375 0.001 1 49 127
i 9.424 80.437 0.001 1 49 127
i 8.521 80.500 0.001 1 49 127
i 9.425 80.500 0.001 1 49 127
i 7.059 80.500 0.001 1 39 127
i 9.426 80.561 0.001 1 49 127
i 8.522 80.624 0.001 1 49 127
i 9.427 80.624 0.001 1 49 127
i 9.428 80.687 0.001 1 49 127
i 9.429 80.749 0.001 1 49 127
i 8.523 80.749 0.001 1 49 127
i 11.103 80.760 -1.000 1 36 86
i -11.102 80.768 0
i 9.430 80.812 0.001 1 49 127
i 8.524 80.875 0.001 1 49 127
i 9.431 80.875 0.001 1 49 127
i 9.432 80.937 0.001 1 49 127
i 4.060 81.000 0.001 1 37 127
i 10.081 81.000 -1.000 1 72 127
i 10.082 81.000 -1.000 1 76 127
i 8.525 81.000 0.001 1 49 127
i 9.433 81.000 0.001 1 49 127
i 9.434 81.061 0.001 1 49 127
i 8.526 81.124 0.001 1 49 127
i 9.435 81.124 0.001 1 49 127
i 9.436 81.187 0.001 1 49 127
i 8.527 81.249 0.001 1 49 127
i 9.437 81.249 0.001 1 49 127
i -11.103 81.257 0
i 11.104 81.259 -1.000 1 33 74
i 9.438 81.312 0.001 1 49 127
i 8.528 81.375 0.001 1 49 127
i 9.439 81.375 0.001 1 49 127
i 9.440 81.437 0.001 1 49 127
i 7.060 81.500 0.001 1 39 127
i 9.441 81.500 0.001 1 49 127
i 8.529 81.500 0.001 1 49 127
i 11.105 81.508 -1.000 1 36 91
i -11.104 81.517 0
i 9.442 81.561 0.001 1 49 127
i 8.530 81.624 0.001 1 49 127
i 9.443 81.624 0.001 1 49 127
i 9.444 81.687 0.001 1 49 127
i 8.531 81.749 0.001 1 49 127
i 9.445 81.749 0.001 1 49 127
i 9.446 81.812 0.001 1 49 127
i 8.532 81.875 0.001 1 49 113
i 9.447 81.875 0.001 1 49 127
i 9.448 81.937 0.001 1 49 127
i 14.015 81.955 -1.000 1 65 103
i 15.015 81.971 -1.000 1 57 101
i -14.014 81.981 0
i 5.028 82.000 0.001 1 37 127
i 6.028 82.000 0.001 1 37 127
i 4.061 82.000 0.001 1 37 127
i 8.533 82.000 0.001 1 49 127
i -10.081 82.000 0
i -10.082 82.000 0
i 9.449 82.000 0.001 1 49 127
i -11.105 82.000 0
i 11.106 82.000 -1.000 1 38 81
i -15.014 82.025 0
i 9.450 82.061 0.001 1 49 127
i 8.534 82.124 0.001 1 49 127
i 9.451 82.124 0.001 1 49 127
i 9.452 82.187 0.001 1 49 127
i 8.535 82.249 0.001 1 49 127
i 9.453 82.249 0.001 1 49 127
i 9.454 82.312 0.001 1 49 127
i 8.536 82.375 0.001 1 49 127
i 9.455 82.375 0.001 1 49 127
i 9.456 82.437 0.001 1 49 127
i 7.061 82.500 0.001 1 39 127
i 8.537 82.500 0.001 1 49 127
i 9.457 82.500 0.001 1 49 127
i 9.458 82.561 0.001 1 49 127
i 8.538 82.624 0.001 1 49 127
i 9.459 82.624 0.001 1 49 127
i 9.460 82.687 0.001 1 49 127
i 11.107 82.737 -1.000 1 41 89
i -11.106 82.744 0
i 8.539 82.749 0.001 1 49 127
i 9.461 82.749 0.001 1 49 127
i 9.462 82.812 0.001 1 49 127
i 8.540 82.875 0.001 1 49 127
i 9.463 82.875 0.001 1 49 127
i 9.464 82.937 0.001 1 49 127
i 8.541 83.000 0.001 1 49 127
i 9.465 83.000 0.001 1 49 127
i 4.062 83.000 0.001 1 37 127
i 10.083 83.000 -1.000 1 72 127
i 10.084 83.000 -1.000 1 76 127
i 9.466 83.061 0.001 1 49 127
i 8.542 83.124 0.001 1 49 127
i 9.467 83.124 0.001 1 49 127
i 9.468 83.187 0.001 1 49 127
i 8.543 83.249 0.001 1 49 127
i 9.469 83.249 0.001 1 49 127
i 11.108 83.255 -1.000 1 38 68
i -11.107 83.260 0
i 9.470 83.312 0.001 1 49 127
i 8.544 83.375 0.001 1 49 127
i 9.471 83.375 0.001 1 49 127
i 9.472 83.437 0.001 1 49 127
i 8.545 83.500 0.001 1 49 127
i 7.062 83.500 0.001 1 39 127
i 9.473 83.500 0.001 1 49 127
i 11.109 83.501 -1.000 1 41 78
i -11.108 83.509 0
i 9.474 83.561 0.001 1 49 127
i 8.546 83.624 0.001 1 49 127
i 9.475 83.624 0.001 1 49 127
i 9.476 83.687 0.001 1 49 127
i 6.029 83.749 0.001 1 37 127
i 5.029 83.749 0.001 1 37 127
i 8.547 83.749 0.001 1 49 127
i 9.477 83.749 0.001 1 49 127
i 9.478 83.812 0.001 1 49 127
i 8.548 83.875 0.001 1 49 113
i 9.479 83.875 0.001 1 49 127
i 9.480 83.937 0.001 1 49 127
i 14.016 83.955 -1.000 1 64 100
i -14.015 83.977 0
i 15.016 83.995 -1.000 1 55 75
i 8.549 84.000 0.001 1 49 127
i 9.481 84.000 0.001 1 49 127
i -10.083 83.999 0
i 4.063 84.000 0.001 1 37 127
i 6.030 84.000 0.001 1 37 127
i -10.084 83.999 0
i 5.030 84.000 0.001 1 37 127
i 11.110 84.012 -1.000 1 38 78
i -11.109 84.031 0
i -15.015 84.035 0
i 9.482 84.061 0.001 1 49 127
i 9.483 84.124 0.001 1 49 127
i 8.550 84.124 0.001 1 49 127
i 9.484 84.187 0.001 1 49 127
i 8.551 84.249 0.001 1 49 127
i 9.485 84.249 0.001 1 49 127
i 9.486 84.312 0.001 1 49 127
i 8.552 84.375 0.001 1 49 127
i 9.487 84.375 0.001 1 49 127
i 9.488 84.437 0.001 1 49 127
i 8.553 84.500 0.001 1 49 127
i 9.489 84.500 0.001 1 49 127
i 7.063 84.500 0.001 1 39 127
i 9.490 84.561 0.001 1 49 127
i 8.554 84.624 0.001 1 49 127
i 9.491 84.624 0.001 1 49 127
i 9.492 84.687 0.001 1 49 127
i 8.555 84.749 0.001 1 49 127
i 9.493 84.749 0.001 1 49 127
i 11.111 84.760 -1.000 1 36 86
i -11.110 84.768 0
i 9.494 84.812 0.001 1 49 127
i 8.556 84.875 0.001 1 49 127
i 9.495 84.875 0.001 1 49 127
i 9.496 84.937 0.001 1 49 127
i 14.017 84.984 -1.000 1 60 90
i 9.497 85.000 0.001 1 49 127
i 8.557 85.000 0.001 1 49 127
i 4.064 85.000 0.001 1 37 127
i 10.085 85.000 -1.000 1 72 127
i 10.086 85.000 -1.000 1 76 127
i -14.016 85.000 0
i 15.017 85.015 -1.000 1 52 91
i -15.016 85.035 0
i 9.498 85.061 0.001 1 49 127
i 8.558 85.124 0.001 1 49 127
i 9.499 85.124 0.001 1 49 127
i 9.500 85.187 0.001 1 49 127
i 8.559 85.249 0.001 1 49 127
i 9.501 85.249 0.001 1 49 127
i -11.111 85.257 0
i 11.112 85.259 -1.000 1 33 74
i 9.502 85.312 0.001 1 49 127
i 9.503 85.375 0.001 1 49 127
i 8.560 85.375 0.001 1 49 127
i 9.504 85.437 0.001 1 49 127
i 9.505 85.500 0.001 1 49 127
i 8.561 85.500 0.001 1 49 127
i 7.064 85.500 0.001 1 39 127
i 11.113 85.508 -1.000 1 36 91
i -11.112 85.517 0
i 9.506 85.561 0.001 1 49 127
i 8.562 85.624 0.001 1 49 127
i 9.507 85.624 0.001 1 49 127
i 9.508 85.687 0.001 1 49 127
i 8.563 85.749 0.001 1 49 127
i 9.509 85.749 0.001 1 49 127
i 9.510 85.812 0.001 1 49 127
i 8.564 85.875 0.001 1 49 113
i 9.511 85.875 0.001 1 49 127
i 9.512 85.937 0.001 1 49 127
i 14.018 85.969 -1.000 1 62 92
i 15.018 85.991 -1.000 1 53 84
i 4.065 86.000 0.001 1 37 127
i -15.017 86.000 0
i 5.031 86.000 0.001 1 37 127
i -14.017 86.000 0
i 13.069 86.000 -1.000 1 91 127
i 8.565 86.000 0.001 1 49 127
i 6.031 86.000 0.001 1 37 127
i 9.513 86.000 0.001 1 49 127
i -10.085 86.000 0
i -10.086 86.000 0
i -11.113 86.000 0
i 11.114 86.000 -1.000 1 38 81
i 9.514 86.061 0.001 1 49 127
i -13.069 86.124 0
i 13.070 86.124 -1.000 1 93 127
i 8.566 86.124 0.001 1 49 127
i 9.515 86.124 0.001 1 49 127
i 9.516 86.187 0.001 1 49 127
i 9.517 86.249 0.001 1 49 127
i 8.567 86.249 0.001 1 49 127
i -13.070 86.249 0
i 13.071 86.249 -1.000 1 89 127
i 9.518 86.312 0.001 1 49 127
i 8.568 86.375 0.001 1 49 127
i 9.519 86.375 0.001 1 49 127
i -13.071 86.375 0
i 13.072 86.375 -1.000 1 91 127
i 9.520 86.437 0.001 1 49 127
i -13.072 86.500 0
i 8.569 86.500 0.001 1 49 127
i 13.073 86.500 -1.000 1 93 127
i 9.521 86.500 0.001 1 49 127
i 7.065 86.500 0.001 1 39 127
i 9.522 86.561 0.001 1 49 127
i 9.523 86.624 0.001 1 49 127
i 8.570 86.624 0.001 1 49 127
i -13.073 86.624 0
i 13.074 86.624 -1.000 1 89 127
i 9.524 86.687 0.001 1 49 127
i 11.115 86.737 -1.000 1 41 89
i -11.114 86.744 0
i 8.571 86.749 0.001 1 49 127
i 9.525 86.749 0.001 1 49 127
i -13.074 86.749 0
i 13.075 86.749 -1.000 1 91 127
i 9.526 86.812 0.001 1 49 127
i 8.572 86.875 0.001 1 49 127
i 9.527 86.875 0.001 1 49 127
i -13.075 86.875 0
i 13.076 86.875 -1.000 1 93 127
i 9.528 86.937 0.001 1 49 127
i 8.573 87.000 0.001 1 49 127
i 9.529 87.000 0.001 1 49 127
i 4.066 87.000 0.001 1 37 127
i -13.076 87.000 0
i 10.087 87.000 -1.000 1 72 127
i 13.077 87.000 -1.000 1 89 127
i 10.088 87.000 -1.000 1 76 127
i 9.530 87.061 0.001 1 49 127
i -13.077 87.124 0
i 13.078 87.124 -1.000 1 91 127
i 8.574 87.124 0.001 1 49 127
i 9.531 87.124 0.001 1 49 127
i 9.532 87.187 0.001 1 49 127
i -13.078 87.249 0
i 13.079 87.249 -1.000 1 93 127
i 8.575 87.249 0.001 1 49 127
i 9.533 87.249 0.001 1 49 127
i 11.116 87.255 -1.000 1 38 68
i -11.115 87.260 0
i 9.534 87.312 0.001 1 49 127
i 8.576 87.375 0.001 1 49 127
i 9.535 87.375 0.001 1 49 127
i -13.079 87.375 0
i 13.080 87.375 -1.000 1 89 127
i 9.536 87.437 0.001 1 49 127
i 7.066 87.500 0.001 1 39 127
i 8.577 87.500 0.001 1 49 127
i 9.537 87.500 0.001 1 49 127
i 11.117 87.501 -1.000 1 41 78
i -13.080 87.500 0
i 13.081 87.500 -1.000 1 91 127
i -11.116 87.509 0
i 9.538 87.561 0.001 1 49 127
i 8.578 87.624 0.001 1 49 127
i 9.539 87.624 0.001 1 49 127
i -13.081 87.624 0
i 13.082 87.624 -1.000 1 93 127
i 9.540 87.687 0.001 1 49 127
i -13.082 87.749 0
i 5.032 87.749 0.001 1 37 127
i 6.032 87.749 0.001 1 37 127
i 13.083 87.749 -1.000 1 89 127
i 8.579 87.749 0.001 1 49 127
i 9.541 87.749 0.001 1 49 127
i 9.542 87.812 0.001 1 49 127
i 8.580 87.875 0.001 1 49 113
i 9.543 87.875 0.001 1 49 127
i -13.083 87.875 0
i 13.084 87.875 -1.000 1 91 127
i 9.544 87.937 0.001 1 49 127
i 4.067 88.000 0.001 1 37 127
i -13.084 88.000 0
i 13.085 88.000 -1.000 1 93 127
i 5.033 88.000 0.001 1 37 127
i 6.033 88.000 0.001 1 37 127
i 9.545 88.000 0.001 1 49 127
i 8.581 88.000 0.001 1 49 127
i -10.087 87.999 0
i -10.088 87.999 0
i 11.118 88.012 -1.000 1 38 78
i -11.117 88.031 0
i 9.546 88.061 0.001 1 49 127
i -13.085 88.124 0
i 8.582 88.124 0.001 1 49 127
i 9.547 88.124 0.001 1 49 127
i 9.548 88.187 0.001 1 49 127
i 8.583 88.249 0.001 1 49 127
i 9.549 88.249 0.001 1 49 127
i 9.550 88.312 0.001 1 49 127
i 9.551 88.375 0.001 1 49 127
i 8.584 88.375 0.001 1 49 127
i 9.552 88.437 0.001 1 49 127
i 8.585 88.500 0.001 1 49 127
i 7.067 88.500 0.001 1 39 127
i 9.553 88.500 0.001 1 49 127
i 9.554 88.561 0.001 1 49 127
i 8.586 88.624 0.001 1 49 127
i 9.555 88.624 0.001 1 49 127
i 9.556 88.687 0.001 1 49 127
i 9.557 88.749 0.001 1 49 127
i 8.587 88.749 0.001 1 49 127
i 11.119 88.760 -1.000 1 36 86
i -11.118 88.768 0
i 9.558 88.812 0.001 1 49 127
i 8.588 88.875 0.001 1 49 127
i 9.559 88.875 0.001 1 49 127
i 9.560 88.937 0.001 1 49 127
i 10.089 89.000 -1.000 1 72 127
i 10.090 89.000 -1.000 1 76 127
i 4.068 89.000 0.001 1 37 127
i 8.589 89.000 0.001 1 49 127
i 9.561 89.000 0.001 1 49 127
i 9.562 89.061 0.001 1 49 127
i 8.590 89.124 0.001 1 49 127
i 9.563 89.124 0.001 1 49 127
i 9.564 89.187 0.001 1 49 127
i 9.565 89.249 0.001 1 49 127
i 8.591 89.249 0.001 1 49 127
i -11.119 89.257 0
i 11.120 89.259 -1.000 1 33 74
i 9.566 89.312 0.001 1 49 127
i 8.592 89.375 0.001 1 49 127
i 9.567 89.375 0.001 1 49 127
i 9.568 89.437 0.001 1 49 127
i 7.068 89.500 0.001 1 39 127
i 8.593 89.500 0.001 1 49 127
i 9.569 89.500 0.001 1 49 127
i 11.121 89.508 -1.000 1 36 91
i -11.120 89.517 0
i 9.570 89.561 0.001 1 49 127
i 9.571 89.624 0.001 1 49 127
i 8.594 89.624 0.001 1 49 127
i 9.572 89.687 0.001 1 49 127
i 8.595 89.749 0.001 1 49 127
i 9.573 89.749 0.001 1 49 127
i 9.574 89.812 0.001 1 49 127
i 8.596 89.875 0.001 1 49 113
i 9.575 89.875 0.001 1 49 127
i 9.576 89.937 0.001 1 49 127
i 8.597 90.000 0.001 1 49 127
i 5.034 90.000 0.001 1 37 127
i 6.034 90.000 0.001 1 37 127
i -10.089 90.000 0
i -11.121 89.999 0
i -10.090 90.000 0
i 11.122 90.000 -1.000 1 38 83
i 4.069 90.000 0.001 1 37 127
i 9.577 90.000 0.001 1 49 127
i 9.578 90.061 0.001 1 49 127
i 8.598 90.124 0.001 1 49 127
i 9.579 90.124 0.001 1 49 127
i 9.580 90.187 0.001 1 49 127
i 8.599 90.249 0.001 1 49 127
i 9.581 90.249 0.001 1 49 127
i 9.582 90.312 0.001 1 49 127
i 9.583 90.375 0.001 1 49 127
i 8.600 90.375 0.001 1 49 127
i 9.584 90.437 0.001 1 49 127
i 9.585 90.500 0.001 1 49 127
i 8.601 90.500 0.001 1 49 127
i 7.069 90.500 0.001 1 39 127
i 9.586 90.561 0.001 1 49 127
i 9.587 90.624 0.001 1 49 127
i 8.602 90.624 0.001 1 49 127
i 9.588 90.687 0.001 1 49 127
i 11.123 90.737 -1.000 1 41 103
i 8.603 90.749 0.001 1 49 127
i 9.589 90.749 0.001 1 49 127
i -11.122 90.756 0
i 9.590 90.812 0.001 1 49 127
i 9.591 90.875 0.001 1 49 127
i 8.604 90.875 0.001 1 49 127
i 9.592 90.937 0.001 1 49 127
i 8.605 91.000 0.001 1 49 127
i 4.070 91.000 0.001 1 37 127
i 9.593 91.000 0.001 1 49 127
i 10.091 91.000 -1.000 1 72 127
i 10.092 91.000 -1.000 1 76 127
i 9.594 91.061 0.001 1 49 127
i 8.606 91.124 0.001 1 49 127
i 9.595 91.124 0.001 1 49 127
i 9.596 91.187 0.001 1 49 127
i 11.124 91.223 -1.000 1 44 76
i -11.123 91.235 0
i 8.607 91.249 0.001 1 49 127
i 9.597 91.249 0.001 1 49 127
i 9.598 91.312 0.001 1 49 127
i 9.599 91.375 0.001 1 49 127
i 8.608 91.375 0.001 1 49 127
i 9.600 91.437 0.001 1 49 127
i 7.070 91.500 0.001 1 39 127
i 8.609 91.500 0.001 1 49 127
i 9.601 91.500 0.001 1 49 127
i -11.124 91.523 0
i 11.125 91.523 -1.000 1 43 89
i 9.602 91.561 0.001 1 49 127
i 9.603 91.624 0.001 1 49 127
i 8.610 91.624 0.001 1 49 127
i 9.604 91.687 0.001 1 49 127
i 6.035 91.749 0.001 1 37 127
i 5.035 91.749 0.001 1 37 127
i 8.611 91.749 0.001 1 49 127
i 9.605 91.749 0.001 1 49 127
i 9.606 91.812 0.001 1 49 127
i 8.612 91.875 0.001 1 49 113
i 9.607 91.875 0.001 1 49 127
i 9.608 91.937 0.001 1 49 127
i -11.125 91.997 0
i 9.609 92.000 0.001 1 49 127
i 4.071 92.000 0.001 1 37 127
i 6.036 92.000 0.001 1 37 127
i 11.126 91.997 -1.000 1 41 97
i 5.036 92.000 0.001 1 37 127
i 8.613 92.000 0.001 1 49 127
i -16.002 91.999 0
i -10.091 91.999 0
i -10.092 91.999 0
i 9.610 92.061 0.001 1 49 127
i 8.614 92.124 0.001 1 49 127
i 9.611 92.124 0.001 1 49 127
i 9.612 92.187 0.001 1 49 127
i 8.615 92.249 0.001 1 49 127
i 9.613 92.249 0.001 1 49 127
i 9.614 92.312 0.001 1 49 127
i 9.615 92.375 0.001 1 49 127
i 8.616 92.375 0.001 1 49 127
i 9.616 92.437 0.001 1 49 127
i 7.071 92.500 0.001 1 39 127
i 9.617 92.500 0.001 1 49 127
i 8.617 92.500 0.001 1 49 127
i 9.618 92.561 0.001 1 49 127
i 8.618 92.624 0.001 1 49 127
i 9.619 92.624 0.001 1 49 127
i 9.620 92.687 0.001 1 49 127
i 8.619 92.749 0.001 1 49 127
i 9.621 92.749 0.001 1 49 127
i -11.126 92.756 0
i 11.127 92.759 -1.000 1 38 80
i 9.622 92.812 0.001 1 49 127
i 8.620 92.875 0.001 1 49 127
i 9.623 92.875 0.001 1 49 127
i 9.624 92.937 0.001 1 49 127
i 4.072 93.000 0.001 1 37 127
i 9.625 93.000 0.001 1 49 127
i 8.621 93.000 0.001 1 49 127
i 10.093 93.000 -1.000 1 72 127
i 10.094 93.000 -1.000 1 76 127
i 9.626 93.061 0.001 1 49 127
i 9.627 93.124 0.001 1 49 127
i 8.622 93.124 0.001 1 49 127
i 9.628 93.187 0.001 1 49 127
i 11.128 93.205 -1.000 1 33 79
i -11.127 93.229 0
i 8.623 93.249 0.001 1 49 127
i 9.629 93.249 0.001 1 49 127
i 9.630 93.312 0.001 1 49 127
i 8.624 93.375 0.001 1 49 127
i 9.631 93.375 0.001 1 49 127
i 9.632 93.437 0.001 1 49 127
i -14.018 93.499 0
i -15.018 93.499 0
i 7.072 93.500 0.001 1 39 127
i 8.625 93.500 0.001 1 49 127
i 9.633 93.500 0.001 1 49 127
i 11.129 93.507 -1.000 1 36 89
i -11.128 93.508 0
i 9.634 93.561 0.001 1 49 127
i 8.626 93.624 0.001 1 49 127
i 9.635 93.624 0.001 1 49 127
i 9.636 93.687 0.001 1 49 127
i 9.637 93.749 0.001 1 49 127
i 8.627 93.749 0.001 1 49 127
i 9.638 93.812 0.001 1 49 127
i 8.628 93.875 0.001 1 49 113
i 9.639 93.875 0.001 1 49 127
i 9.640 93.937 0.001 1 49 127
i 14.019 93.985 -1.000 1 62 84
i 15.019 93.989 -1.000 1 53 80
i 5.037 94.000 0.001 1 37 127
i 8.629 94.000 0.001 1 49 127
i 9.641 94.000 0.001 1 49 127
i -10.093 94.000 0
i -10.094 94.000 0
i 6.037 94.000 0.001 1 37 127
i -11.129 93.999 0
i 4.073 94.000 0.001 1 37 127
i 11.130 94.000 -1.000 1 38 81
i 9.642 94.061 0.001 1 49 127
i 8.630 94.124 0.001 1 49 127
i 9.643 94.124 0.001 1 49 127
i 9.644 94.187 0.001 1 49 127
i 8.631 94.249 0.001 1 49 127
i 9.645 94.249 0.001 1 49 127
i 9.646 94.312 0.001 1 49 127
i 8.632 94.375 0.001 1 49 127
i 9.647 94.375 0.001 1 49 127
i 9.648 94.437 0.001 1 49 127
i 7.073 94.500 0.001 1 39 127
i 8.633 94.500 0.001 1 49 127
i 9.649 94.500 0.001 1 49 127
i 9.650 94.561 0.001 1 49 127
i 9.651 94.624 0.001 1 49 127
i 8.634 94.624 0.001 1 49 127
i 9.652 94.687 0.001 1 49 127
i 11.131 94.737 -1.000 1 41 89
i -11.130 94.744 0
i 8.635 94.749 0.001 1 49 127
i 9.653 94.749 0.001 1 49 127
i 9.654 94.812 0.001 1 49 127
i 8.636 94.875 0.001 1 49 127
i 9.655 94.875 0.001 1 49 127
i 9.656 94.937 0.001 1 49 127
i 4.074 95.000 0.001 1 37 127
i 9.657 95.000 0.001 1 49 127
i 8.637 95.000 0.001 1 49 127
i 10.095 95.000 -1.000 1 72 127
i 10.096 95.000 -1.000 1 76 127
i 9.658 95.061 0.001 1 49 127
i 9.659 95.124 0.001 1 49 127
i 8.638 95.124 0.001 1 49 127
i 9.660 95.187 0.001 1 49 127
i 8.639 95.249 0.001 1 49 127
i 9.661 95.249 0.001 1 49 127
i 11.132 95.255 -1.000 1 38 68
i -11.131 95.260 0
i 9.662 95.312 0.001 1 49 127
i 8.640 95.375 0.001 1 49 127
i 9.663 95.375 0.001 1 49 127
i 9.664 95.437 0.001 1 49 127
i 11.133 95.501 -1.000 1 41 78
i 8.641 95.500 0.001 1 49 127
i 9.665 95.500 0.001 1 49 127
i 7.074 95.500 0.001 1 39 127
i -11.132 95.509 0
i 9.666 95.561 0.001 1 49 127
i 9.667 95.624 0.001 1 49 127
i 8.642 95.624 0.001 1 49 127
i 9.668 95.687 0.001 1 49 127
i 6.038 95.749 0.001 1 37 127
i 5.038 95.749 0.001 1 37 127
i 9.669 95.749 0.001 1 49 127
i 8.643 95.749 0.001 1 49 127
i 9.670 95.812 0.001 1 49 127
i 8.644 95.875 0.001 1 49 113
i 9.671 95.875 0.001 1 49 127
i 9.672 95.937 0.001 1 49 127
i 14.020 95.981 -1.000 1 64 89
i 15.020 95.981 -1.000 1 55 103
i -15.019 96.000 0
i -14.019 96.000 0
i 6.039 96.000 0.001 1 37 127
i 4.075 96.000 0.001 1 37 127
i 5.039 96.000 0.001 1 37 127
i 8.645 96.000 0.001 1 49 127
i -10.095 95.999 0
i -10.096 95.999 0
i 9.673 96.000 0.001 1 49 127
i 11.134 96.012 -1.000 1 38 78
i -11.133 96.031 0
i 9.674 96.061 0.001 1 49 127
i 8.646 96.124 0.001 1 49 127
i 9.675 96.124 0.001 1 49 127
i 9.676 96.187 0.001 1 49 127
i 9.677 96.249 0.001 1 49 127
i 8.647 96.249 0.001 1 49 127
i 9.678 96.312 0.001 1 49 127
i 8.648 96.375 0.001 1 49 127
i 9.679 96.375 0.001 1 49 127
i 9.680 96.437 0.001 1 49 127
i 7.075 96.500 0.001 1 39 127
i 9.681 96.500 0.001 1 49 127
i 8.649 96.500 0.001 1 49 127
i 9.682 96.561 0.001 1 49 127
i 8.650 96.624 0.001 1 49 127
i 9.683 96.624 0.001 1 49 127
i 9.684 96.687 0.001 1 49 127
i 9.685 96.749 0.001 1 49 127
i 8.651 96.749 0.001 1 49 127
i 11.135 96.760 -1.000 1 36 86
i -11.134 96.768 0
i 9.686 96.812 0.001 1 49 127
i 9.687 96.875 0.001 1 49 127
i 8.652 96.875 0.001 1 49 127
i 9.688 96.937 0.001 1 49 127
i 4.076 97.000 0.001 1 37 127
i 8.653 97.000 0.001 1 49 127
i 9.689 97.000 0.001 1 49 127
i 10.097 97.000 -1.000 1 72 127
i 10.098 97.000 -1.000 1 76 127
i 9.690 97.061 0.001 1 49 127
i 9.691 97.124 0.001 1 49 127
i 8.654 97.124 0.001 1 49 127
i 9.692 97.187 0.001 1 49 127
i 8.655 97.249 0.001 1 49 127
i 9.693 97.249 0.001 1 49 127
i -11.135 97.257 0
i 11.136 97.259 -1.000 1 33 74
i 9.694 97.312 0.001 1 49 127
i 8.656 97.375 0.001 1 49 127
i 9.695 97.375 0.001 1 49 127
i 9.696 97.437 0.001 1 49 127
i 7.076 97.500 0.001 1 39 127
i 8.657 97.500 0.001 1 49 127
i 9.697 97.500 0.001 1 49 127
i 11.137 97.508 -1.000 1 36 91
i -11.136 97.517 0
i 9.698 97.561 0.001 1 49 127
i 8.658 97.624 0.001 1 49 127
i 9.699 97.624 0.001 1 49 127
i 9.700 97.687 0.001 1 49 127
i 9.701 97.749 0.001 1 49 127
i 8.659 97.749 0.001 1 49 127
i 9.702 97.812 0.001 1 49 127
i 8.660 97.875 0.001 1 49 113
i 9.703 97.875 0.001 1 49 127
i 9.704 97.937 0.001 1 49 127
i 14.021 97.976 -1.000 1 65 94
i 15.021 97.981 -1.000 1 57 99
i 4.077 98.000 0.001 1 37 127
i -14.020 98.000 0
i -15.020 98.000 0
i -11.137 98.000 0
i 6.040 98.000 0.001 1 37 127
i 11.138 98.000 -1.000 1 38 81
i 9.705 98.000 0.001 1 49 127
i 8.661 98.000 0.001 1 49 127
i 5.040 98.000 0.001 1 37 127
i -10.097 98.000 0
i -10.098 98.000 0
i 9.706 98.061 0.001 1 49 127
i 8.662 98.124 0.001 1 49 127
i 9.707 98.124 0.001 1 49 127
i 9.708 98.187 0.001 1 49 127
i 8.663 98.249 0.001 1 49 127
i 9.709 98.249 0.001 1 49 127
i 9.710 98.312 0.001 1 49 127
i 8.664 98.375 0.001 1 49 127
i 9.711 98.375 0.001 1 49 127
i 9.712 98.437 0.001 1 49 127
i 8.665 98.500 0.001 1 49 127
i 7.077 98.500 0.001 1 39 127
i 9.713 98.500 0.001 1 49 127
i 9.714 98.561 0.001 1 49 127
i 8.666 98.624 0.001 1 49 127
i 9.715 98.624 0.001 1 49 127
i 9.716 98.687 0.001 1 49 127
i 11.139 98.737 -1.000 1 41 89
i -11.138 98.744 0
i 8.667 98.749 0.001 1 49 127
i 9.717 98.749 0.001 1 49 127
i 9.718 98.812 0.001 1 49 127
i 8.668 98.875 0.001 1 49 127
i 9.719 98.875 0.001 1 49 127
i 9.720 98.937 0.001 1 49 127
i 9.721 99.000 0.001 1 49 127
i 8.669 99.000 0.001 1 49 127
i 10.099 99.000 -1.000 1 72 127
i 4.078 99.000 0.001 1 37 127
i 10.100 99.000 -1.000 1 76 127
i 9.722 99.061 0.001 1 49 127
i 8.670 99.124 0.001 1 49 127
i 9.723 99.124 0.001 1 49 127
i 9.724 99.187 0.001 1 49 127
i 9.725 99.249 0.001 1 49 127
i 8.671 99.249 0.001 1 49 127
i 11.140 99.255 -1.000 1 38 68
i -11.139 99.260 0
i 9.726 99.312 0.001 1 49 127
i 8.672 99.375 0.001 1 49 127
i 9.727 99.375 0.001 1 49 127
i 9.728 99.437 0.001 1 49 127
i 9.729 99.500 0.001 1 49 127
i 11.141 99.501 -1.000 1 41 78
i 8.673 99.500 0.001 1 49 127
i 7.078 99.500 0.001 1 39 127
i -11.140 99.509 0
i 9.730 99.561 0.001 1 49 127
i 9.731 99.624 0.001 1 49 127
i 8.674 99.624 0.001 1 49 127
i 9.732 99.687 0.001 1 49 127
i 8.675 99.749 0.001 1 49 127
i 9.733 99.749 0.001 1 49 127
i 5.041 99.749 0.001 1 37 127
i 6.041 99.749 0.001 1 37 127
i 9.734 99.812 0.001 1 49 127
i 8.676 99.875 0.001 1 49 113
i 9.735 99.875 0.001 1 49 127
i 9.736 99.937 0.001 1 49 127
i 14.022 99.977 -1.000 1 69 79
i 15.022 99.983 -1.000 1 60 78
i 16 99.999 1 4 12 2.00
i -14.021 100.000 0
i -15.021 100.000 0
i 4.079 100.000 0.001 1 37 127
i 5.042 100.000 0.001 1 37 127
i 6.042 100.000 0.001 1 37 127
i 8.677 100.000 0.001 1 49 127
i -10.099 99.999 0
i 9.737 100.000 0.001 1 49 127
i -10.100 99.999 0
i 11.142 100.012 -1.000 1 38 78
i -11.141 100.031 0
i 9.738 100.061 0.001 1 49 127
i 8.678 100.124 0.001 1 49 127
i 9.739 100.124 0.001 1 49 127
i 9.740 100.187 0.001 1 49 127
i 8.679 100.249 0.001 1 49 127
i 9.741 100.249 0.001 1 49 127
i 9.742 100.312 0.001 1 49 127
i 8.680 100.375 0.001 1 49 127
i 9.743 100.375 0.001 1 49 127
i 9.744 100.437 0.001 1 49 127
i 8.681 100.500 0.001 1 49 127
i 7.079 100.500 0.001 1 39 127
i 9.745 100.500 0.001 1 49 127
i 9.746 100.561 0.001 1 49 127
i 8.682 100.624 0.001 1 49 127
i 9.747 100.624 0.001 1 49 127
i 9.748 100.687 0.001 1 49 127
i 8.683 100.749 0.001 1 49 127
i 9.749 100.749 0.001 1 49 127
i 11.143 100.760 -1.000 1 36 86
i -11.142 100.768 0
i 9.750 100.812 0.001 1 49 127
i 8.684 100.875 0.001 1 49 127
i 9.751 100.875 0.001 1 49 127
i 9.752 100.937 0.001 1 49 127
i 14.023 100.976 -1.000 1 64 80
i 15.023 100.981 -1.000 1 55 79
i -14.022 101.000 0
i 4.080 101.000 0.001 1 37 127
i -15.022 101.000 0
i 8.685 101.000 0.001 1 49 127
i 9.753 101.000 0.001 1 49 127
i 10.101 101.000 -1.000 1 72 127
i 10.102 101.000 -1.000 1 76 127
i 9.754 101.061 0.001 1 49 127
i 8.686 101.124 0.001 1 49 127
i 9.755 101.124 0.001 1 49 127
i 9.756 101.187 0.001 1 49 127
i 8.687 101.249 0.001 1 49 127
i 9.757 101.249 0.001 1 49 127
i -11.143 101.257 0
i 11.144 101.259 -1.000 1 33 74
i 9.758 101.312 0.001 1 49 127
i 8.688 101.375 0.001 1 49 127
i 9.759 101.375 0.001 1 49 127
i 9.760 101.437 0.001 1 49 127
i 8.689 101.500 0.001 1 49 127
i 9.761 101.500 0.001 1 49 127
i 7.080 101.500 0.001 1 39 127
i 11.145 101.508 -1.000 1 36 91
i -11.144 101.517 0
i 9.762 101.561 0.001 1 49 127
i 9.763 101.624 0.001 1 49 127
i 8.690 101.624 0.001 1 49 127
i 9.764 101.687 0.001 1 49 127
i 8.691 101.749 0.001 1 49 127
i 9.765 101.749 0.001 1 49 127
i 9.766 101.812 0.001 1 49 127
i 9.767 101.875 0.001 1 49 127
i 8.692 101.875 0.001 1 49 113
i 9.768 101.937 0.001 1 49 127
i 15.024 101.975 -1.000 1 57 84
i 14.024 101.983 -1.000 1 65 94
i 6.043 102.000 0.001 1 37 127
i 8.693 102.000 0.001 1 49 127
i 5.043 102.000 0.001 1 37 127
i 9.769 102.000 0.001 1 49 127
i 4.081 102.000 0.001 1 37 127
i -10.101 102.000 0
i -10.102 102.000 0
i 13.086 102.000 -1.000 1 91 127
i -14.023 102.000 0
i -15.023 102.000 0
i 16.003 102.000 -1.000 1 105 127
i -11.145 102.000 0
i 11.146 102.000 -1.000 1 38 81
i 9.770 102.061 0.001 1 49 127
i -13.086 102.124 0
i 13.087 102.124 -1.000 1 93 127
i 8.694 102.124 0.001 1 49 127
i 9.771 102.124 0.001 1 49 127
i 9.772 102.187 0.001 1 49 127
i 9.773 102.249 0.001 1 49 127
i -13.087 102.249 0
i 8.695 102.249 0.001 1 49 127
i 13.088 102.249 -1.000 1 89 127
i 9.774 102.312 0.001 1 49 127
i 9.775 102.375 0.001 1 49 127
i 8.696 102.375 0.001 1 49 127
i -13.088 102.375 0
i 13.089 102.375 -1.000 1 91 127
i 9.776 102.437 0.001 1 49 127
i 8.697 102.500 0.001 1 49 127
i 7.081 102.500 0.001 1 39 127
i 9.777 102.500 0.001 1 49 127
i -13.089 102.500 0
i 13.090 102.500 -1.000 1 93 127
i 9.778 102.561 0.001 1 49 127
i 8.698 102.624 0.001 1 49 127
i -13.090 102.624 0
i 9.779 102.624 0.001 1 49 127
i 13.091 102.624 -1.000 1 89 127
i 9.780 102.687 0.001 1 49 127
i 11.147 102.737 -1.000 1 41 89
i -11.146 102.744 0
i -13.091 102.749 0
i 13.092 102.749 -1.000 1 91 127
i 8.699 102.749 0.001 1 49 127
i 9.781 102.749 0.001 1 49 127
i 9.782 102.812 0.001 1 49 127
i 8.700 102.875 0.001 1 49 127
i 9.783 102.875 0.001 1 49 127
i -13.092 102.875 0
i 13.093 102.875 -1.000 1 93 127
i 9.784 102.937 0.001 1 49 127
i 4.082 103.000 0.001 1 37 127
i 8.701 103.000 0.001 1 49 127
i 9.785 103.000 0.001 1 49 127
i -13.093 103.000 0
i 10.103 103.000 -1.000 1 72 127
i 13.094 103.000 -1.000 1 89 127
i 10.104 103.000 -1.000 1 76 127
i 9.786 103.061 0.001 1 49 127
i -13.094 103.124 0
i 8.702 103.124 0.001 1 49 127
i 13.095 103.124 -1.000 1 91 127
i 9.787 103.124 0.001 1 49 127
i 9.788 103.187 0.001 1 49 127
i -13.095 103.249 0
i 8.703 103.249 0.001 1 49 127
i 13.096 103.249 -1.000 1 93 127
i 9.789 103.249 0.001 1 49 127
i 11.148 103.255 -1.000 1 38 68
i -11.147 103.260 0
i 9.790 103.312 0.001 1 49 127
i -13.096 103.375 0
i 13.097 103.375 -1.000 1 89 127
i 8.704 103.375 0.001 1 49 127
i 9.791 103.375 0.001 1 49 127
i 9.792 103.437 0.001 1 49 127
i 9.793 103.500 0.001 1 49 127
i 8.705 103.500 0.001 1 49 127
i 7.082 103.500 0.001 1 39 127
i -13.097 103.500 0
i 13.098 103.500 -1.000 1 91 127
i 11.149 103.501 -1.000 1 41 78
i -11.148 103.509 0
i 9.794 103.561 0.001 1 49 127
i -13.098 103.624 0
i 13.099 103.624 -1.000 1 93 127
i 8.706 103.624 0.001 1 49 127
i 9.795 103.624 0.001 1 49 127
i 9.796 103.687 0.001 1 49 127
i 8.707 103.749 0.001 1 49 127
i 6.044 103.749 0.001 1 37 127
i 5.044 103.749 0.001 1 37 127
i -13.099 103.749 0
i 13.100 103.749 -1.000 1 89 127
i 9.797 103.749 0.001 1 49 127
i 9.798 103.812 0.001 1 49 127
i -13.100 103.875 0
i 13.101 103.875 -1.000 1 91 127
i 8.708 103.875 0.001 1 49 113
i 9.799 103.875 0.001 1 49 127
i 9.800 103.937 0.001 1 49 127
i 5.045 104.000 0.001 1 37 127
i 4.083 104.000 0.001 1 37 127
i 9.801 104.000 0.001 1 49 127
i 6.045 104.000 0.001 1 37 127
i -10.103 103.999 0
i -10.104 103.999 0
i 8.709 104.000 0.001 1 49 127
i -13.101 104.000 0
i 13.102 104.000 -1.000 1 93 127
i 11.150 104.012 -1.000 1 38 78
i -11.149 104.031 0
i 9.802 104.061 0.001 1 49 127
i 9.803 104.124 0.001 1 49 127
i 8.710 104.124 0.001 1 49 127
i -13.102 104.124 0
i 9.804 104.187 0.001 1 49 127
i 8.711 104.249 0.001 1 49 127
i 9.805 104.249 0.001 1 49 127
i 9.806 104.312 0.001 1 49 127
i 8.712 104.375 0.001 1 49 127
i 9.807 104.375 0.001 1 49 127
i 9.808 104.437 0.001 1 49 127
i 8.713 104.500 0.001 1 49 127
i 7.083 104.500 0.001 1 39 127
i 9.809 104.500 0.001 1 49 127
i 9.810 104.561 0.001 1 49 127
i 8.714 104.624 0.001 1 49 127
i 9.811 104.624 0.001 1 49 127
i 9.812 104.687 0.001 1 49 127
i 8.715 104.749 0.001 1 49 127
i 9.813 104.749 0.001 1 49 127
i 11.151 104.760 -1.000 1 36 86
i -11.150 104.768 0
i 9.814 104.812 0.001 1 49 127
i 8.716 104.875 0.001 1 49 127
i 9.815 104.875 0.001 1 49 127
i 9.816 104.937 0.001 1 49 127
i 4.084 105.000 0.001 1 37 127
i 8.717 105.000 0.001 1 49 127
i 9.817 105.000 0.001 1 49 127
i 10.105 105.000 -1.000 1 72 127
i 10.106 105.000 -1.000 1 76 127
i 9.818 105.061 0.001 1 49 127
i 8.718 105.124 0.001 1 49 127
i 9.819 105.124 0.001 1 49 127
i 9.820 105.187 0.001 1 49 127
i 8.719 105.249 0.001 1 49 127
i 9.821 105.249 0.001 1 49 127
i -11.151 105.257 0
i 11.152 105.259 -1.000 1 33 74
i 9.822 105.312 0.001 1 49 127
i 8.720 105.375 0.001 1 49 127
i 9.823 105.375 0.001 1 49 127
i 9.824 105.437 0.001 1 49 127
i 8.721 105.500 0.001 1 49 127
i 7.084 105.500 0.001 1 39 127
i 9.825 105.500 0.001 1 49 127
i 11.153 105.508 -1.000 1 36 91
i -11.152 105.517 0
i 9.826 105.561 0.001 1 49 127
i 8.722 105.624 0.001 1 49 127
i 9.827 105.624 0.001 1 49 127
i 9.828 105.687 0.001 1 49 127
i 8.723 105.749 0.001 1 49 127
i 9.829 105.749 0.001 1 49 127
i 9.830 105.812 0.001 1 49 127
i 8.724 105.875 0.001 1 49 113
i 9.831 105.875 0.001 1 49 127
i 9.832 105.937 0.001 1 49 127
i 4.085 106.000 0.001 1 37 127
i -11.153 105.999 0
i -10.105 106.000 0
i -10.106 106.000 0
i 11.154 106.000 -1.000 1 38 83
i 6.046 106.000 0.001 1 37 127
i 5.046 106.000 0.001 1 37 127
i 9.833 106.000 0.001 1 49 127
i 8.725 106.000 0.001 1 49 127
i 9.834 106.061 0.001 1 49 127
i 8.726 106.124 0.001 1 49 127
i 9.835 106.124 0.001 1 49 127
i 9.836 106.187 0.001 1 49 127
i 9.837 106.249 0.001 1 49 127
i 8.727 106.249 0.001 1 49 127
i 9.838 106.312 0.001 1 49 127
i 8.728 106.375 0.001 1 49 127
i 9.839 106.375 0.001 1 49 127
i 9.840 106.437 0.001 1 49 127
i 7.085 106.500 0.001 1 39 127
i 8.729 106.500 0.001 1 49 127
i 9.841 106.500 0.001 1 49 127
i 9.842 106.561 0.001 1 49 127
i 8.730 106.624 0.001 1 49 127
i 9.843 106.624 0.001 1 49 127
i 9.844 106.687 0.001 1 49 127
i 11.155 106.737 -1.000 1 41 103
i 8.731 106.749 0.001 1 49 127
i 9.845 106.749 0.001 1 49 127
i -11.154 106.756 0
i 9.846 106.812 0.001 1 49 127
i 8.732 106.875 0.001 1 49 127
i 9.847 106.875 0.001 1 49 127
i 9.848 106.937 0.001 1 49 127
i 4.086 107.000 0.001 1 37 127
i 8.733 107.000 0.001 1 49 127
i 9.849 107.000 0.001 1 49 127
i 10.107 107.000 -1.000 1 72 127
i 10.108 107.000 -1.000 1 76 127
i 9.850 107.061 0.001 1 49 127
i 8.734 107.124 0.001 1 49 127
i 9.851 107.124 0.001 1 49 127
i 9.852 107.187 0.001 1 49 127
i 11.156 107.223 -1.000 1 44 76
i -11.155 107.235 0
i 8.735 107.249 0.001 1 49 127
i 9.853 107.249 0.001 1 49 127
i 9.854 107.312 0.001 1 49 127
i 8.736 107.375 0.001 1 49 127
i 9.855 107.375 0.001 1 49 127
i 9.856 107.437 0.001 1 49 127
i 8.737 107.500 0.001 1 49 127
i 7.086 107.500 0.001 1 39 127
i 9.857 107.500 0.001 1 49 127
i -11.156 107.523 0
i 11.157 107.523 -1.000 1 43 89
i 9.858 107.561 0.001 1 49 127
i 9.859 107.624 0.001 1 49 127
i 8.738 107.624 0.001 1 49 127
i 9.860 107.687 0.001 1 49 127
i 8.739 107.749 0.001 1 49 127
i 9.861 107.749 0.001 1 49 127
i 5.047 107.749 0.001 1 37 127
i 6.047 107.749 0.001 1 37 127
i 9.862 107.812 0.001 1 49 127
i 9.863 107.875 0.001 1 49 127
i 8.740 107.875 0.001 1 49 113
i 9.864 107.937 0.001 1 49 127
i -11.157 107.997 0
i 11.158 107.997 -1.000 1 41 97
i 4.087 108.000 0.001 1 37 127
i 6.048 108.000 0.001 1 37 127
i 5.048 108.000 0.001 1 37 127
i 8.741 108.000 0.001 1 49 127
i 9.865 108.000 0.001 1 49 127
i -10.107 107.999 0
i -10.108 107.999 0
i 9.866 108.061 0.001 1 49 127
i 8.742 108.124 0.001 1 49 127
i 9.867 108.124 0.001 1 49 127
i 9.868 108.187 0.001 1 49 127
i 9.869 108.249 0.001 1 49 127
i 8.743 108.249 0.001 1 49 127
i 9.870 108.312 0.001 1 49 127
i 8.744 108.375 0.001 1 49 127
i 9.871 108.375 0.001 1 49 127
i 9.872 108.437 0.001 1 49 127
i 8.745 108.500 0.001 1 49 127
i 9.873 108.500 0.001 1 49 127
i 7.087 108.500 0.001 1 39 127
i 9.874 108.561 0.001 1 49 127
i 8.746 108.624 0.001 1 49 127
i 9.875 108.624 0.001 1 49 127
i 9.876 108.687 0.001 1 49 127
i 8.747 108.749 0.001 1 49 127
i 9.877 108.749 0.001 1 49 127
i -11.158 108.756 0
i 11.159 108.759 -1.000 1 38 80
i 9.878 108.812 0.001 1 49 127
i 8.748 108.875 0.001 1 49 127
i 9.879 108.875 0.001 1 49 127
i 9.880 108.937 0.001 1 49 127
i 4.088 109.000 0.001 1 37 127
i 9.881 109.000 0.001 1 49 127
i 8.749 109.000 0.001 1 49 127
i 10.109 109.000 -1.000 1 72 127
i 10.110 109.000 -1.000 1 76 127
i 9.882 109.061 0.001 1 49 127
i 8.750 109.124 0.001 1 49 127
i 9.883 109.124 0.001 1 49 127
i 9.884 109.187 0.001 1 49 127
i 11.160 109.205 -1.000 1 33 79
i -11.159 109.229 0
i 9.885 109.249 0.001 1 49 127
i 8.751 109.249 0.001 1 49 127
i 9.886 109.312 0.001 1 49 127
i 8.752 109.375 0.001 1 49 127
i 9.887 109.375 0.001 1 49 127
i 9.888 109.437 0.001 1 49 127
i -15.024 109.499 0
i -14.024 109.500 0
i 8.753 109.500 0.001 1 49 127
i 9.889 109.500 0.001 1 49 127
i 7.088 109.500 0.001 1 39 127
i 11.161 109.507 -1.000 1 36 89
i -11.160 109.508 0
i 9.890 109.561 0.001 1 49 127
i 9.891 109.624 0.001 1 49 127
i 8.754 109.624 0.001 1 49 127
i 9.892 109.687 0.001 1 49 127
i 8.755 109.749 0.001 1 49 127
i 9.893 109.749 0.001 1 49 127
i 9.894 109.812 0.001 1 49 127
i 8.756 109.875 0.001 1 49 113
i 9.895 109.875 0.001 1 49 127
i 9.896 109.937 0.001 1 49 127
i 5.049 110.000 0.001 1 37 127
i 6.049 110.000 0.001 1 37 127
i -11.161 109.999 0
i -10.109 110.000 0
i -10.110 110.000 0
i 11.162 110.000 -1.000 1 38 83
i -11.162 110.312 0
i 10.111 111.000 -1.000 1 72 127
i 10.112 111.000 -1.000 1 76 127
i 6.050 111.749 0.001 1 37 127
i 5.050 111.749 0.001 1 37 127
i 6.051 112.000 0.001 1 37 127
i 5.051 112.000 0.001 1 37 127
i -10.111 111.999 0
i -10.112 111.999 0
i 10.113 113.000 -1.000 1 72 127
i 10.114 113.000 -1.000 1 76 127
i -10.113 114.000 0
i -10.114 114.000 0
i 12.011 114.000 -1.000 1 38 81
i 5.052 114.000 0.001 1 37 127
i 6.052 114.000 0.001 1 37 127
i 12.012 114.737 -1.000 1 41 89
i -12.011 114.744 0
i 10.115 115.000 -1.000 1 72 127
i 10.116 115.000 -1.000 1 76 127
i 12.013 115.255 -1.000 1 38 68
i -12.012 115.260 0
i 12.014 115.501 -1.000 1 41 78
i -12.013 115.509 0
i 6.053 115.749 0.001 1 37 127
i 5.053 115.749 0.001 1 37 127
i -10.115 115.999 0
i 6.054 116.000 0.001 1 37 127
i -10.116 115.999 0
i 5.054 116.000 0.001 1 37 127
i 12.015 116.012 -1.000 1 38 78
i -12.014 116.031 0
i -12.015 116.500 0
i 10.117 117.000 -1.000 1 72 127
i 10.118 117.000 -1.000 1 76 127
i 5.055 117.749 0.001 1 37 127
i 6.055 117.749 0.001 1 37 127
i 12.016 118.000 -1.000 1 38 81
i -10.117 118.000 0
i -10.118 118.000 0
i 6.056 118.000 0.001 1 37 127
i 5.056 118.000 0.001 1 37 127
i 12.017 118.737 -1.000 1 41 89
i -12.016 118.744 0
i 10.119 119.000 -1.000 1 72 127
i 10.120 119.000 -1.000 1 76 127
i 12.018 119.255 -1.000 1 38 68
i -12.017 119.260 0
i 12.019 119.501 -1.000 1 41 78
i -12.018 119.509 0
i 6.057 119.749 0.001 1 37 127
i 5.057 119.749 0.001 1 37 127
i 5.058 120.000 0.001 1 37 127
i 6.058 120.000 0.001 1 37 127
i -10.119 119.999 0
i -10.120 119.999 0
i 12.020 120.012 -1.000 1 38 78
i -12.019 120.031 0
i -12.020 120.500 0
i 10.121 121.000 -1.000 1 72 127
i 10.122 121.000 -1.000 1 76 127
i 5.059 121.749 0.001 1 37 127
i 6.059 121.749 0.001 1 37 127
i 6.060 122.000 0.001 1 37 127
i 5.060 122.000 0.001 1 37 127
i -10.121 122.000 0
i -10.122 122.000 0
i 4.089 123.000 0.001 1 37 127
i 10.123 123.000 -1.000 1 72 127
i 10.124 123.000 -1.000 1 76 127
i 5.061 123.749 0.001 1 37 127
i 6.061 123.749 0.001 1 37 127
i -10.123 123.999 0
i -10.124 123.999 0
i 6.062 124.000 0.001 1 37 127
i 16 123.999 1 4 12 1.00
i -16.003 123.999 0
i 5.062 124.000 0.001 1 37 127
i 4.090 125.000 0.001 1 37 127
i 10.125 125.000 -1.000 1 72 127
i 10.126 125.000 -1.000 1 76 127
i 7.089 125.500 0.001 1 39 127
i 6.063 125.749 0.001 1 37 127
i 5.063 125.749 0.001 1 37 127
i 14.025 125.968 -1.000 1 65 101
i 14.026 125.976 -1.000 1 62 78
i 15.025 125.989 -1.000 1 53 74
i 8.757 126.000 0.001 1 49 127
i 9.897 126.000 0.001 1 49 127
i 4.091 126.000 0.001 1 37 127
i 5.064 126.000 0.001 1 37 127
i -10.125 126.000 0
i -10.126 126.000 0
i 11.163 126.000 -1.000 1 38 81
i 13.103 126.000 -1.000 1 91 127
i 16.004 126.000 -1.000 1 98 127
i 6.064 126.000 0.001 1 37 127
i 9.898 126.061 0.001 1 49 127
i -13.103 126.124 0
i 13.104 126.124 -1.000 1 93 127
i 8.758 126.124 0.001 1 49 127
i 9.899 126.124 0.001 1 49 127
i 9.900 126.187 0.001 1 49 127
i 8.759 126.249 0.001 1 49 127
i 9.901 126.249 0.001 1 49 127
i -13.104 126.249 0
i 13.105 126.249 -1.000 1 89 127
i 9.902 126.312 0.001 1 49 127
i 8.760 126.375 0.001 1 49 127
i -13.105 126.375 0
i 13.106 126.375 -1.000 1 91 127
i 9.903 126.375 0.001 1 49 127
i 9.904 126.437 0.001 1 49 127
i 8.761 126.500 0.001 1 49 127
i 7.090 126.500 0.001 1 39 127
i 4.092 126.500 0.001 1 37 127
i 9.905 126.500 0.001 1 49 127
i -13.106 126.500 0
i 13.107 126.500 -1.000 1 93 127
i 9.906 126.561 0.001 1 49 127
i -13.107 126.624 0
i 13.108 126.624 -1.000 1 89 127
i 8.762 126.624 0.001 1 49 127
i 9.907 126.624 0.001 1 49 127
i 9.908 126.687 0.001 1 49 127
i 11.164 126.737 -1.000 1 41 89
i -11.163 126.744 0
i 9.909 126.749 0.001 1 49 127
i 8.763 126.749 0.001 1 49 127
i -13.108 126.749 0
i 13.109 126.749 -1.000 1 91 127
i 9.910 126.812 0.001 1 49 127
i 8.764 126.875 0.001 1 49 127
i 9.911 126.875 0.001 1 49 127
i -13.109 126.875 0
i 13.110 126.875 -1.000 1 93 127
i 9.912 126.937 0.001 1 49 127
i 8.765 127.000 0.001 1 49 127
i 4.093 127.000 0.001 1 37 127
i 9.913 127.000 0.001 1 49 127
i 10.127 127.000 -1.000 1 72 127
i -13.110 127.000 0
i 10.128 127.000 -1.000 1 76 127
i 13.111 127.000 -1.000 1 89 127
i 9.914 127.061 0.001 1 49 127
i -13.111 127.124 0
i 13.112 127.124 -1.000 1 91 127
i 8.766 127.124 0.001 1 49 127
i 9.915 127.124 0.001 1 49 127
i 9.916 127.187 0.001 1 49 127
i -13.112 127.249 0
i 13.113 127.249 -1.000 1 93 127
i 8.767 127.249 0.001 1 49 127
i 9.917 127.249 0.001 1 49 127
i 11.165 127.255 -1.000 1 38 68
i -11.164 127.260 0
i 9.918 127.312 0.001 1 49 127
i 9.919 127.375 0.001 1 49 127
i 8.768 127.375 0.001 1 49 127
i -13.113 127.375 0
i 13.114 127.375 -1.000 1 89 127
i 9.920 127.437 0.001 1 49 127
i 9.921 127.500 0.001 1 49 127
i 8.769 127.500 0.001 1 49 127
i 7.091 127.500 0.001 1 39 127
i 4.094 127.500 0.001 1 37 127
i 11.166 127.501 -1.000 1 41 78
i -13.114 127.500 0
i 13.115 127.500 -1.000 1 91 127
i -11.165 127.509 0
i 9.922 127.561 0.001 1 49 127
i 8.770 127.624 0.001 1 49 127
i 9.923 127.624 0.001 1 49 127
i -13.115 127.624 0
i 13.116 127.624 -1.000 1 93 127
i 9.924 127.687 0.001 1 49 127
i 6.065 127.749 0.001 1 37 127
i -13.116 127.749 0
i 13.117 127.749 -1.000 1 89 127
i 8.771 127.749 0.001 1 49 127
i 5.065 127.749 0.001 1 37 127
i 9.925 127.749 0.001 1 49 127
i 9.926 127.812 0.001 1 49 127
i -13.117 127.875 0
i 13.118 127.875 -1.000 1 91 127
i 8.772 127.875 0.001 1 49 113
i 9.927 127.875 0.001 1 49 127
i 9.928 127.937 0.001 1 49 127
i 14.027 127.973 -1.000 1 64 94
i 14.028 127.975 -1.000 1 67 78
i 15.026 127.980 -1.000 1 55 91
i 9.929 128.000 0.001 1 49 127
i 5.066 128.000 0.001 1 37 127
i 6.066 128.000 0.001 1 37 127
i 8.773 128.000 0.001 1 49 127
i -10.127 127.999 0
i -10.128 127.999 0
i -15.025 128.000 0
i 4.095 128.000 0.001 1 37 127
i -13.118 128.000 0
i 13.119 128.000 -1.000 1 93 127
i 16.005 128.000 -1.000 1 101 127
i 11.167 128.012 -1.000 1 38 78
i -11.166 128.031 0
i -14.025 128.057 0
i -14.026 128.057 0
i 9.930 128.061 0.001 1 49 127
i 8.774 128.124 0.001 1 49 127
i 9.931 128.124 0.001 1 49 127
i -13.119 128.124 0
i 9.932 128.187 0.001 1 49 127
i 8.775 128.249 0.001 1 49 127
i 9.933 128.249 0.001 1 49 127
i 9.934 128.312 0.001 1 49 127
i 9.935 128.375 0.001 1 49 127
i 8.776 128.375 0.001 1 49 127
i 9.936 128.437 0.001 1 49 127
i 4.096 128.500 0.001 1 37 127
i 8.777 128.500 0.001 1 49 127
i 9.937 128.500 0.001 1 49 127
i 7.092 128.500 0.001 1 39 127
i 9.938 128.561 0.001 1 49 127
i 8.778 128.624 0.001 1 49 127
i 9.939 128.624 0.001 1 49 127
i 9.940 128.687 0.001 1 49 127
i 8.779 128.749 0.001 1 49 127
i 9.941 128.749 0.001 1 49 127
i 11.168 128.760 -1.000 1 36 86
i -11.167 128.768 0
i 9.942 128.812 0.001 1 49 127
i 9.943 128.875 0.001 1 49 127
i 8.780 128.875 0.001 1 49 127
i 9.944 128.937 0.001 1 49 127
i 8.781 129.000 0.001 1 49 127
i 9.945 129.000 0.001 1 49 127
i 4.097 129.000 0.001 1 37 127
i 10.129 129.000 -1.000 1 72 127
i 10.130 129.000 -1.000 1 76 127
i 9.946 129.061 0.001 1 49 127
i 8.782 129.124 0.001 1 49 127
i 9.947 129.124 0.001 1 49 127
i 9.948 129.187 0.001 1 49 127
i 8.783 129.249 0.001 1 49 127
i 9.949 129.249 0.001 1 49 127
i -11.168 129.257 0
i 11.169 129.259 -1.000 1 33 74
i 9.950 129.312 0.001 1 49 127
i 8.784 129.375 0.001 1 49 127
i 9.951 129.375 0.001 1 49 127
i 9.952 129.437 0.001 1 49 127
i 4.098 129.500 0.001 1 37 127
i 7.093 129.500 0.001 1 39 127
i 8.785 129.500 0.001 1 49 127
i 9.953 129.500 0.001 1 49 127
i 11.170 129.508 -1.000 1 36 91
i -11.169 129.517 0
i 9.954 129.561 0.001 1 49 127
i 9.955 129.624 0.001 1 49 127
i 8.786 129.624 0.001 1 49 127
i 9.956 129.687 0.001 1 49 127
i 5.067 129.749 0.001 1 37 127
i 6.067 129.749 0.001 1 37 127
i 9.957 129.749 0.001 1 49 127
i 8.787 129.749 0.001 1 49 127
i 9.958 129.812 0.001 1 49 127
i 8.788 129.875 0.001 1 49 113
i 9.959 129.875 0.001 1 49 127
i 9.960 129.937 0.001 1 49 127
i 14.029 129.976 -1.000 1 69 84
i 14.030 129.981 -1.000 1 65 92
i 15.027 129.981 -1.000 1 57 101
i 4.099 130.000 0.001 1 37 127
i -15.026 130.000 0
i 6.068 130.000 0.001 1 37 127
i 5.068 130.000 0.001 1 37 127
i 9.961 130.000 0.001 1 49 127
i 8.789 130.000 0.001 1 49 127
i -10.129 130.000 0
i -10.130 130.000 0
i 16.006 130.000 -1.000 1 105 127
i -11.170 130.000 0
i 11.171 130.000 -1.000 1 38 81
i -14.027 130.037 0
i -14.028 130.037 0
i 9.962 130.061 0.001 1 49 127
i 8.790 130.124 0.001 1 49 127
i 9.963 130.124 0.001 1 49 127
i 9.964 130.187 0.001 1 49 127
i 8.791 130.249 0.001 1 49 127
i 9.965 130.249 0.001 1 49 127
i 9.966 130.312 0.001 1 49 127
i 8.792 130.375 0.001 1 49 127
i 9.967 130.375 0.001 1 49 127
i 9.968 130.437 0.001 1 49 127
i 8.793 130.500 0.001 1 49 127
i 7.094 130.500 0.001 1 39 127
i 9.969 130.500 0.001 1 49 127
i 4.100 130.500 0.001 1 37 127
i 9.970 130.561 0.001 1 49 127
i 9.971 130.624 0.001 1 49 127
i 8.794 130.624 0.001 1 49 127
i 9.972 130.687 0.001 1 49 127
i 11.172 130.737 -1.000 1 41 89
i -11.171 130.744 0
i 8.795 130.749 0.001 1 49 127
i 9.973 130.749 0.001 1 49 127
i 9.974 130.812 0.001 1 49 127
i 8.796 130.875 0.001 1 49 127
i 9.975 130.875 0.001 1 49 127
i 9.976 130.937 0.001 1 49 127
i 4.101 131.000 0.001 1 37 127
i 9.977 131.000 0.001 1 49 127
i 8.797 131.000 0.001 1 49 127
i 10.131 131.000 -1.000 1 72 127
i 10.132 131.000 -1.000 1 76 127
i 9.978 131.061 0.001 1 49 127
i 8.798 131.124 0.001 1 49 127
i 9.979 131.124 0.001 1 49 127
i 9.980 131.187 0.001 1 49 127
i 8.799 131.249 0.001 1 49 127
i 9.981 131.249 0.001 1 49 127
i 11.173 131.255 -1.000 1 38 68
i -11.172 131.260 0
i 9.982 131.312 0.001 1 49 127
i 8.800 131.375 0.001 1 49 127
i 9.983 131.375 0.001 1 49 127
i 9.984 131.437 0.001 1 49 127
i 9.985 131.500 0.001 1 49 127
i 8.801 131.500 0.001 1 49 127
i 4.102 131.500 0.001 1 37 127
i 7.095 131.500 0.001 1 39 127
i 11.174 131.501 -1.000 1 41 78
i -11.173 131.509 0
i 9.986 131.561 0.001 1 49 127
i 8.802 131.624 0.001 1 49 127
i 9.987 131.624 0.001 1 49 127
i 9.988 131.687 0.001 1 49 127
i 5.069 131.749 0.001 1 37 127
i 8.803 131.749 0.001 1 49 127
i 6.069 131.749 0.001 1 37 127
i 9.989 131.749 0.001 1 49 127
i 9.990 131.812 0.001 1 49 127
i 9.991 131.875 0.001 1 49 127
i 8.804 131.875 0.001 1 49 113
i 9.992 131.937 0.001 1 49 127
i 14.031 131.976 -1.000 1 64 93
i 15.028 131.984 -1.000 1 55 75
i 14.032 131.981 -1.000 1 67 85
i -15.027 132.000 0
i 4.103 132.000 0.001 1 37 127
i -10.131 131.999 0
i -10.132 131.999 0
i 6.070 132.000 0.001 1 37 127
i 5.070 132.000 0.001 1 37 127
i 8.805 132.000 0.001 1 49 127
i 9.993 132.000 0.001 1 49 127
i 11.175 132.012 -1.000 1 38 78
i -14.029 132.009 0
i -14.030 132.009 0
i -11.174 132.031 0
i 9.994 132.061 0.001 1 49 127
i 8.806 132.124 0.001 1 49 127
i 9.995 132.124 0.001 1 49 127
i 9.996 132.187 0.001 1 49 127
i 8.807 132.249 0.001 1 49 127
i 9.997 132.249 0.001 1 49 127
i 9.998 132.312 0.001 1 49 127
i 8.808 132.375 0.001 1 49 127
i 9.999 132.375 0.001 1 49 127
i 9.001 132.437 0.001 1 49 127
i 7.096 132.500 0.001 1 39 127
i 8.809 132.500 0.001 1 49 127
i 9.002 132.500 0.001 1 49 127
i 4.104 132.500 0.001 1 37 127
i 9.003 132.561 0.001 1 49 127
i 8.810 132.624 0.001 1 49 127
i 9.004 132.624 0.001 1 49 127
i 9.005 132.687 0.001 1 49 127
i 8.811 132.749 0.001 1 49 127
i 9.006 132.749 0.001 1 49 127
i 11.176 132.760 -1.000 1 36 86
i -11.175 132.768 0
i 9.007 132.812 0.001 1 49 127
i 9.008 132.875 0.001 1 49 127
i 8.812 132.875 0.001 1 49 127
i 9.009 132.937 0.001 1 49 127
i 14.033 132.976 -1.000 1 60 79
i 14.034 132.976 -1.000 1 64 97
i 15.029 132.984 -1.000 1 52 91
i -14.031 132.999 0
i -14.032 133.000 0
i 4.105 133.000 0.001 1 37 127
i -15.028 133.000 0
i 8.813 133.000 0.001 1 49 127
i 10.133 133.000 -1.000 1 72 127
i 10.134 133.000 -1.000 1 76 127
i 9.010 133.000 0.001 1 49 127
i 9.011 133.061 0.001 1 49 127
i 9.012 133.124 0.001 1 49 127
i 8.814 133.124 0.001 1 49 127
i 9.013 133.187 0.001 1 49 127
i 8.815 133.249 0.001 1 49 127
i 9.014 133.249 0.001 1 49 127
i -11.176 133.257 0
i 11.177 133.259 -1.000 1 33 74
i 9.015 133.312 0.001 1 49 127
i 8.816 133.375 0.001 1 49 127
i 9.016 133.375 0.001 1 49 127
i 9.017 133.437 0.001 1 49 127
i 7.097 133.500 0.001 1 39 127
i 9.018 133.500 0.001 1 49 127
i 8.817 133.500 0.001 1 49 127
i 4.106 133.500 0.001 1 37 127
i 11.178 133.508 -1.000 1 36 91
i -11.177 133.517 0
i 9.019 133.561 0.001 1 49 127
i 9.020 133.624 0.001 1 49 127
i 8.818 133.624 0.001 1 49 127
i 9.021 133.687 0.001 1 49 127
i 5.071 133.749 0.001 1 37 127
i 8.819 133.749 0.001 1 49 127
i 9.022 133.749 0.001 1 49 127
i 6.071 133.749 0.001 1 37 127
i 9.023 133.812 0.001 1 49 127
i 8.820 133.875 0.001 1 49 113
i 9.024 133.875 0.001 1 49 127
i 9.025 133.937 0.001 1 49 127
i 14.035 133.947 -1.000 1 62 91
i 14.036 133.955 -1.000 1 65 81
i 15.030 133.975 -1.000 1 53 84
i -15.029 133.999 0
i 4.107 134.000 0.001 1 37 127
i 13.120 134.000 -1.000 1 91 127
i -11.178 134.000 0
i -14.033 134.000 0
i 11.179 134.000 -1.000 1 38 81
i -14.034 134.000 0
i 5.072 134.000 0.001 1 37 127
i 8.821 134.000 0.001 1 49 127
i 6.072 134.000 0.001 1 37 127
i 9.026 134.000 0.001 1 49 127
i -10.133 134.000 0
i -10.134 134.000 0
i 9.027 134.061 0.001 1 49 127
i -13.120 134.124 0
i 13.121 134.124 -1.000 1 93 127
i 8.822 134.124 0.001 1 49 127
i 9.028 134.124 0.001 1 49 127
i 9.029 134.187 0.001 1 49 127
i 8.823 134.249 0.001 1 49 127
i 9.030 134.249 0.001 1 49 127
i -13.121 134.249 0
i 13.122 134.249 -1.000 1 89 127
i 9.031 134.312 0.001 1 49 127
i 8.824 134.375 0.001 1 49 127
i 9.032 134.375 0.001 1 49 127
i -13.122 134.375 0
i 13.123 134.375 -1.000 1 91 127
i 9.033 134.437 0.001 1 49 127
i 8.825 134.500 0.001 1 49 127
i 9.034 134.500 0.001 1 49 127
i 7.098 134.500 0.001 1 39 127
i 4.108 134.500 0.001 1 37 127
i -13.123 134.500 0
i 13.124 134.500 -1.000 1 93 127
i 9.035 134.561 0.001 1 49 127
i -13.124 134.624 0
i 13.125 134.624 -1.000 1 89 127
i 8.826 134.624 0.001 1 49 127
i 9.036 134.624 0.001 1 49 127
i 9.037 134.687 0.001 1 49 127
i 11.180 134.737 -1.000 1 41 89
i -11.179 134.744 0
i -13.125 134.749 0
i 13.126 134.749 -1.000 1 91 127
i 8.827 134.749 0.001 1 49 127
i 9.038 134.749 0.001 1 49 127
i 9.039 134.812 0.001 1 49 127
i 8.828 134.875 0.001 1 49 127
i 9.040 134.875 0.001 1 49 127
i -13.126 134.875 0
i 13.127 134.875 -1.000 1 93 127
i 9.041 134.937 0.001 1 49 127
i 4.109 135.000 0.001 1 37 127
i 9.042 135.000 0.001 1 49 127
i 8.829 135.000 0.001 1 49 127
i 10.135 135.000 -1.000 1 72 127
i 10.136 135.000 -1.000 1 76 127
i -13.127 135.000 0
i 13.128 135.000 -1.000 1 89 127
i 9.043 135.061 0.001 1 49 127
i -13.128 135.124 0
i 13.129 135.124 -1.000 1 91 127
i 8.830 135.124 0.001 1 49 127
i 9.044 135.124 0.001 1 49 127
i 9.045 135.187 0.001 1 49 127
i -13.129 135.249 0
i 8.831 135.249 0.001 1 49 127
i 13.130 135.249 -1.000 1 93 127
i 9.046 135.249 0.001 1 49 127
i 11.181 135.255 -1.000 1 38 68
i -11.180 135.260 0
i 9.047 135.312 0.001 1 49 127
i -13.130 135.375 0
i 13.131 135.375 -1.000 1 89 127
i 9.048 135.375 0.001 1 49 127
i 8.832 135.375 0.001 1 49 127
i 9.049 135.437 0.001 1 49 127
i 8.833 135.500 0.001 1 49 127
i 9.050 135.500 0.001 1 49 127
i 7.099 135.500 0.001 1 39 127
i 11.182 135.501 -1.000 1 41 78
i -13.131 135.500 0
i 13.132 135.500 -1.000 1 91 127
i 4.110 135.500 0.001 1 37 127
i -11.181 135.509 0
i 9.051 135.561 0.001 1 49 127
i 8.834 135.624 0.001 1 49 127
i 9.052 135.624 0.001 1 49 127
i -13.132 135.624 0
i 13.133 135.624 -1.000 1 93 127
i 9.053 135.687 0.001 1 49 127
i 8.835 135.749 0.001 1 49 127
i 6.073 135.749 0.001 1 37 127
i 5.073 135.749 0.001 1 37 127
i 9.054 135.749 0.001 1 49 127
i -13.133 135.749 0
i 13.134 135.749 -1.000 1 89 127
i 9.055 135.812 0.001 1 49 127
i -13.134 135.875 0
i 13.135 135.875 -1.000 1 91 127
i 8.836 135.875 0.001 1 49 113
i 9.056 135.875 0.001 1 49 127
i 9.057 135.937 0.001 1 49 127
i 9.058 136.000 0.001 1 49 127
i -10.135 135.999 0
i 8.837 136.000 0.001 1 49 127
i -10.136 135.999 0
i -13.135 136.000 0
i 13.136 136.000 -1.000 1 93 127
i 4.111 136.000 0.001 1 37 127
i 5.074 136.000 0.001 1 37 127
i 6.074 136.000 0.001 1 37 127
i 11.183 136.012 -1.000 1 38 78
i -11.182 136.031 0
i 9.059 136.061 0.001 1 49 127
i -13.136 136.124 0
i 9.060 136.124 0.001 1 49 127
i 8.838 136.124 0.001 1 49 127
i 9.061 136.187 0.001 1 49 127
i 8.839 136.249 0.001 1 49 127
i 9.062 136.249 0.001 1 49 127
i 9.063 136.312 0.001 1 49 127
i 9.064 136.375 0.001 1 49 127
i 8.840 136.375 0.001 1 49 127
i 9.065 136.437 0.001 1 49 127
i 7.100 136.500 0.001 1 39 127
i 4.112 136.500 0.001 1 37 127
i 8.841 136.500 0.001 1 49 127
i 9.066 136.500 0.001 1 49 127
i 9.067 136.561 0.001 1 49 127
i 9.068 136.624 0.001 1 49 127
i 8.842 136.624 0.001 1 49 127
i 9.069 136.687 0.001 1 49 127
i 8.843 136.749 0.001 1 49 127
i 9.070 136.749 0.001 1 49 127
i 11.184 136.760 -1.000 1 36 86
i -11.183 136.768 0
i 9.071 136.812 0.001 1 49 127
i 8.844 136.875 0.001 1 49 127
i 9.072 136.875 0.001 1 49 127
i 9.073 136.937 0.001 1 49 127
i 8.845 137.000 0.001 1 49 127
i 4.113 137.000 0.001 1 37 127
i 9.074 137.000 0.001 1 49 127
i 10.137 137.000 -1.000 1 72 127
i 10.138 137.000 -1.000 1 76 127
i 9.075 137.061 0.001 1 49 127
i 8.846 137.124 0.001 1 49 127
i 9.076 137.124 0.001 1 49 127
i 9.077 137.187 0.001 1 49 127
i 9.078 137.249 0.001 1 49 127
i 8.847 137.249 0.001 1 49 127
i -11.184 137.257 0
i 11.185 137.259 -1.000 1 33 74
i 9.079 137.312 0.001 1 49 127
i 9.080 137.375 0.001 1 49 127
i 8.848 137.375 0.001 1 49 127
i 9.081 137.437 0.001 1 49 127
i 4.114 137.500 0.001 1 37 127
i 7.101 137.500 0.001 1 39 127
i 8.849 137.500 0.001 1 49 127
i 9.082 137.500 0.001 1 49 127
i 11.186 137.508 -1.000 1 36 91
i -11.185 137.517 0
i 9.083 137.561 0.001 1 49 127
i 8.850 137.624 0.001 1 49 127
i 9.084 137.624 0.001 1 49 127
i 9.085 137.687 0.001 1 49 127
i 8.851 137.749 0.001 1 49 127
i 5.075 137.749 0.001 1 37 127
i 6.075 137.749 0.001 1 37 127
i 9.086 137.749 0.001 1 49 127
i 9.087 137.812 0.001 1 49 127
i 8.852 137.875 0.001 1 49 113
i 9.088 137.875 0.001 1 49 127
i 9.089 137.937 0.001 1 49 127
i 4.115 138.000 0.001 1 37 127
i 6.076 138.000 0.001 1 37 127
i 8.853 138.000 0.001 1 49 127
i 9.090 138.000 0.001 1 49 127
i 5.076 138.000 0.001 1 37 127
i -11.186 137.999 0
i -10.137 138.000 0
i 11.187 138.000 -1.000 1 38 83
i -10.138 138.000 0
i 9.091 138.061 0.001 1 49 127
i 8.854 138.124 0.001 1 49 127
i 9.092 138.124 0.001 1 49 127
i 9.093 138.187 0.001 1 49 127
i 8.855 138.249 0.001 1 49 127
i 9.094 138.249 0.001 1 49 127
i 9.095 138.312 0.001 1 49 127
i 8.856 138.375 0.001 1 49 127
i 9.096 138.375 0.001 1 49 127
i 9.097 138.437 0.001 1 49 127
i 8.857 138.500 0.001 1 49 127
i 4.116 138.500 0.001 1 37 127
i 7.102 138.500 0.001 1 39 127
i 9.098 138.500 0.001 1 49 127
i 9.099 138.561 0.001 1 49 127
i 8.858 138.624 0.001 1 49 127
i 9.100 138.624 0.001 1 49 127
i 9.101 138.687 0.001 1 49 127
i 11.188 138.737 -1.000 1 41 103
i 8.859 138.749 0.001 1 49 127
i 9.102 138.749 0.001 1 49 127
i -11.187 138.756 0
i 9.103 138.812 0.001 1 49 127
i 8.860 138.875 0.001 1 49 127
i 9.104 138.875 0.001 1 49 127
i 9.105 138.937 0.001 1 49 127
i 8.861 139.000 0.001 1 49 127
i 4.117 139.000 0.001 1 37 127
i 9.106 139.000 0.001 1 49 127
i 10.139 139.000 -1.000 1 72 127
i 10.140 139.000 -1.000 1 76 127
i 9.107 139.061 0.001 1 49 127
i 8.862 139.124 0.001 1 49 127
i 9.108 139.124 0.001 1 49 127
i 9.109 139.187 0.001 1 49 127
i 11.189 139.223 -1.000 1 44 76
i -11.188 139.235 0
i 8.863 139.249 0.001 1 49 127
i 9.110 139.249 0.001 1 49 127
i 9.111 139.312 0.001 1 49 127
i 8.864 139.375 0.001 1 49 127
i 9.112 139.375 0.001 1 49 127
i 9.113 139.437 0.001 1 49 127
i 4.118 139.500 0.001 1 37 127
i 8.865 139.500 0.001 1 49 127
i 9.114 139.500 0.001 1 49 127
i 7.103 139.500 0.001 1 39 127
i -11.189 139.523 0
i 11.190 139.523 -1.000 1 43 89
i 9.115 139.561 0.001 1 49 127
i 8.866 139.624 0.001 1 49 127
i 9.116 139.624 0.001 1 49 127
i 9.117 139.687 0.001 1 49 127
i 6.077 139.749 0.001 1 37 127
i 5.077 139.749 0.001 1 37 127
i 9.118 139.749 0.001 1 49 127
i 8.867 139.749 0.001 1 49 127
i 9.119 139.812 0.001 1 49 127
i 8.868 139.875 0.001 1 49 113
i 9.120 139.875 0.001 1 49 127
i 9.121 139.937 0.001 1 49 127
i -11.190 139.997 0
i 11.191 139.997 -1.000 1 41 97
i 4.119 140.000 0.001 1 37 127
i 5.078 140.000 0.001 1 37 127
i 8.869 140.000 0.001 1 49 127
i 9.122 140.000 0.001 1 49 127
i -10.139 139.999 0
i -10.140 139.999 0
i 6.078 140.000 0.001 1 37 127
i 9.123 140.061 0.001 1 49 127
i 8.870 140.124 0.001 1 49 127
i 9.124 140.124 0.001 1 49 127
i 9.125 140.187 0.001 1 49 127
i 8.871 140.249 0.001 1 49 127
i 9.126 140.249 0.001 1 49 127
i 9.127 140.312 0.001 1 49 127
i 8.872 140.375 0.001 1 49 127
i 9.128 140.375 0.001 1 49 127
i 9.129 140.437 0.001 1 49 127
i 4.120 140.500 0.001 1 37 127
i 7.104 140.500 0.001 1 39 127
i 9.130 140.500 0.001 1 49 127
i 8.873 140.500 0.001 1 49 127
i 9.131 140.561 0.001 1 49 127
i 8.874 140.624 0.001 1 49 127
i 9.132 140.624 0.001 1 49 127
i 9.133 140.687 0.001 1 49 127
i 8.875 140.749 0.001 1 49 127
i 9.134 140.749 0.001 1 49 127
i -11.191 140.756 0
i 11.192 140.759 -1.000 1 38 80
i 9.135 140.812 0.001 1 49 127
i 9.136 140.875 0.001 1 49 127
i 8.876 140.875 0.001 1 49 127
i 9.137 140.937 0.001 1 49 127
i 4.121 141.000 0.001 1 37 127
i 9.138 141.000 0.001 1 49 127
i 10.141 141.000 -1.000 1 72 127
i 8.877 141.000 0.001 1 49 127
i 10.142 141.000 -1.000 1 76 127
i 9.139 141.061 0.001 1 49 127
i 8.878 141.124 0.001 1 49 127
i 9.140 141.124 0.001 1 49 127
i 9.141 141.187 0.001 1 49 127
i 11.193 141.205 -1.000 1 33 79
i -11.192 141.229 0
i 8.879 141.249 0.001 1 49 127
i 9.142 141.249 0.001 1 49 127
i 9.143 141.312 0.001 1 49 127
i 9.144 141.375 0.001 1 49 127
i 8.880 141.375 0.001 1 49 127
i 9.145 141.437 0.001 1 49 127
i 4.122 141.500 0.001 1 37 127
i -15.030 141.499 0
i 7.105 141.500 0.001 1 39 127
i 8.881 141.500 0.001 1 49 127
i 9.146 141.500 0.001 1 49 127
i 11.194 141.507 -1.000 1 36 89
i -11.193 141.508 0
i 9.147 141.561 0.001 1 49 127
i 8.882 141.624 0.001 1 49 127
i 9.148 141.624 0.001 1 49 127
i 9.149 141.687 0.001 1 49 127
i 6.079 141.749 0.001 1 37 127
i 8.883 141.749 0.001 1 49 127
i 9.150 141.749 0.001 1 49 127
i 5.079 141.749 0.001 1 37 127
i 9.151 141.812 0.001 1 49 127
i 8.884 141.875 0.001 1 49 113
i 9.152 141.875 0.001 1 49 127
i 9.153 141.937 0.001 1 49 127
i 15.031 141.988 -1.000 1 53 74
i 14.037 141.992 -1.000 1 65 96
i 14.038 141.992 -1.000 1 62 77
i 5.080 142.000 0.001 1 37 127
i 4.123 142.000 0.001 1 37 127
i 13.137 142.000 -1.000 1 91 127
i 6.080 142.000 0.001 1 37 127
i 8.885 142.000 0.001 1 49 127
i 9.154 142.000 0.001 1 49 127
i -10.141 142.000 0
i -10.142 142.000 0
i -11.194 141.999 0
i 11.195 142.000 -1.000 1 38 81
i 9.155 142.061 0.001 1 49 127
i -14.035 142.077 0
i -14.036 142.077 0
i 8.886 142.124 0.001 1 49 127
i -13.137 142.124 0
i 13.138 142.124 -1.000 1 93 127
i 9.156 142.124 0.001 1 49 127
i 9.157 142.187 0.001 1 49 127
i -13.138 142.249 0
i 13.139 142.249 -1.000 1 89 127
i 8.887 142.249 0.001 1 49 127
i 9.158 142.249 0.001 1 49 127
i 9.159 142.312 0.001 1 49 127
i -13.139 142.375 0
i 13.140 142.375 -1.000 1 91 127
i 9.160 142.375 0.001 1 49 127
i 8.888 142.375 0.001 1 49 127
i 9.161 142.437 0.001 1 49 127
i -13.140 142.500 0
i 4.124 142.500 0.001 1 37 127
i 8.889 142.500 0.001 1 49 127
i 13.141 142.500 -1.000 1 93 127
i 9.162 142.500 0.001 1 49 127
i 7.106 142.500 0.001 1 39 127
i 9.163 142.561 0.001 1 49 127
i -13.141 142.624 0
i 13.142 142.624 -1.000 1 89 127
i 8.890 142.624 0.001 1 49 127
i 9.164 142.624 0.001 1 49 127
i 9.165 142.687 0.001 1 49 127
i 11.196 142.737 -1.000 1 41 89
i -11.195 142.744 0
i 9.166 142.749 0.001 1 49 127
i 8.891 142.749 0.001 1 49 127
i -13.142 142.749 0
i 13.143 142.749 -1.000 1 91 127
i 9.167 142.812 0.001 1 49 127
i 8.892 142.875 0.001 1 49 127
i 9.168 142.875 0.001 1 49 127
i -13.143 142.875 0
i 13.144 142.875 -1.000 1 93 127
i 9.169 142.937 0.001 1 49 127
i 4.125 143.000 0.001 1 37 127
i 8.893 143.000 0.001 1 49 127
i 9.170 143.000 0.001 1 49 127
i 10.143 143.000 -1.000 1 72 127
i 10.144 143.000 -1.000 1 76 127
i -13.144 143.000 0
i 13.145 143.000 -1.000 1 89 127
i 9.171 143.061 0.001 1 49 127
i 8.894 143.124 0.001 1 49 127
i 9.172 143.124 0.001 1 49 127
i -13.145 143.124 0
i 13.146 143.124 -1.000 1 91 127
i 9.173 143.187 0.001 1 49 127
i 8.895 143.249 0.001 1 49 127
i -13.146 143.249 0
i 13.147 143.249 -1.000 1 93 127
i 9.174 143.249 0.001 1 49 127
i 11.197 143.255 -1.000 1 38 68
i -11.196 143.260 0
i 9.175 143.312 0.001 1 49 127
i 9.176 143.375 0.001 1 49 127
i 8.896 143.375 0.001 1 49 127
i -13.147 143.375 0
i 13.148 143.375 -1.000 1 89 127
i 9.177 143.437 0.001 1 49 127
i 4.126 143.500 0.001 1 37 127
i 11.198 143.501 -1.000 1 41 78
i -13.148 143.500 0
i 13.149 143.500 -1.000 1 91 127
i 8.897 143.500 0.001 1 49 127
i 7.107 143.500 0.001 1 39 127
i 9.178 143.500 0.001 1 49 127
i -11.197 143.509 0
i 9.179 143.561 0.001 1 49 127
i -13.149 143.624 0
i 13.150 143.624 -1.000 1 93 127
i 8.898 143.624 0.001 1 49 127
i 9.180 143.624 0.001 1 49 127
i 9.181 143.687 0.001 1 49 127
i 6.081 143.749 0.001 1 37 127
i -13.150 143.749 0
i 13.151 143.749 -1.000 1 89 127
i 8.899 143.749 0.001 1 49 127
i 5.081 143.749 0.001 1 37 127
i 9.182 143.749 0.001 1 49 127
i 9.183 143.812 0.001 1 49 127
i 8.900 143.875 0.001 1 49 113
i 9.184 143.875 0.001 1 49 127
i -13.151 143.875 0
i 13.152 143.875 -1.000 1 91 127
i 9.185 143.937 0.001 1 49 127
i 15.032 143.976 -1.000 1 55 101
i 14.039 143.989 -1.000 1 64 84
i 14.040 143.989 -1.000 1 67 78
i 4.127 144.000 0.001 1 37 127
i 8.901 144.000 0.001 1 49 127
i -10.143 143.999 0
i 6.082 144.000 0.001 1 37 127
i 5.082 144.000 0.001 1 37 127
i 9.186 144.000 0.001 1 49 127
i -10.144 143.999 0
i -13.152 144.000 0
i 13.153 144.000 -1.000 1 93 127
i -15.031 144.000 0
i 16 143.999 1 4 12 2.00
i 11.199 144.012 -1.000 1 38 78
i -11.198 144.031 0
i 9.187 144.061 0.001 1 49 127
i -14.037 144.068 0
i -14.038 144.068 0
i -13.153 144.124 0
i 8.902 144.124 0.001 1 49 127
i 9.188 144.124 0.001 1 49 127
i 9.189 144.187 0.001 1 49 127
i 8.903 144.249 0.001 1 49 127
i 9.190 144.249 0.001 1 49 127
i 9.191 144.312 0.001 1 49 127
i 8.904 144.375 0.001 1 49 127
i 9.192 144.375 0.001 1 49 127
i 9.193 144.437 0.001 1 49 127
i 4.128 144.500 0.001 1 37 127
i 9.194 144.500 0.001 1 49 127
i 7.108 144.500 0.001 1 39 127
i 8.905 144.500 0.001 1 49 127
i 9.195 144.561 0.001 1 49 127
i 8.906 144.624 0.001 1 49 127
i 9.196 144.624 0.001 1 49 127
i 9.197 144.687 0.001 1 49 127
i 8.907 144.749 0.001 1 49 127
i 9.198 144.749 0.001 1 49 127
i 11.200 144.760 -1.000 1 36 86
i -11.199 144.768 0
i 9.199 144.812 0.001 1 49 127
i 9.200 144.875 0.001 1 49 127
i 8.908 144.875 0.001 1 49 127
i 9.201 144.937 0.001 1 49 127
i 4.129 145.000 0.001 1 37 127
i 8.909 145.000 0.001 1 49 127
i 10.145 145.000 -1.000 1 72 127
i 9.202 145.000 0.001 1 49 127
i 10.146 145.000 -1.000 1 76 127
i 9.203 145.061 0.001 1 49 127
i 8.910 145.124 0.001 1 49 127
i 9.204 145.124 0.001 1 49 127
i 9.205 145.187 0.001 1 49 127
i 8.911 145.249 0.001 1 49 127
i 9.206 145.249 0.001 1 49 127
i -11.200 145.257 0
i 11.201 145.259 -1.000 1 33 74
i 9.207 145.312 0.001 1 49 127
i 8.912 145.375 0.001 1 49 127
i 9.208 145.375 0.001 1 49 127
i 9.209 145.437 0.001 1 49 127
i 9.210 145.500 0.001 1 49 127
i 8.913 145.500 0.001 1 49 127
i 4.130 145.500 0.001 1 37 127
i 7.109 145.500 0.001 1 39 127
i 11.202 145.508 -1.000 1 36 91
i -11.201 145.517 0
i 9.211 145.561 0.001 1 49 127
i 9.212 145.624 0.001 1 49 127
i 8.914 145.624 0.001 1 49 127
i 9.213 145.687 0.001 1 49 127
i 5.083 145.749 0.001 1 37 127
i 6.083 145.749 0.001 1 37 127
i 8.915 145.749 0.001 1 49 127
i 9.214 145.749 0.001 1 49 127
i 9.215 145.812 0.001 1 49 127
i 8.916 145.875 0.001 1 49 113
i 9.216 145.875 0.001 1 49 127
i 9.217 145.937 0.001 1 49 127
i 14.041 145.979 -1.000 1 65 92
i 14.042 145.981 -1.000 1 69 76
i 15.033 145.984 -1.000 1 57 100
i -15.032 146.000 0
i 4.131 146.000 0.001 1 37 127
i -10.145 146.000 0
i -11.202 146.000 0
i 11.203 146.000 -1.000 1 38 81
i -10.146 146.000 0
i 6.084 146.000 0.001 1 37 127
i 5.084 146.000 0.001 1 37 127
i 8.917 146.000 0.001 1 49 127
i 9.218 146.000 0.001 1 49 127
i 9.219 146.061 0.001 1 49 127
i -14.039 146.072 0
i -14.040 146.072 0
i 8.918 146.124 0.001 1 49 127
i 9.220 146.124 0.001 1 49 127
i 9.221 146.187 0.001 1 49 127
i 8.919 146.249 0.001 1 49 127
i 9.222 146.249 0.001 1 49 127
i 9.223 146.312 0.001 1 49 127
i 8.920 146.375 0.001 1 49 127
i 9.224 146.375 0.001 1 49 127
i 9.225 146.437 0.001 1 49 127
i 4.132 146.500 0.001 1 37 127
i 8.921 146.500 0.001 1 49 127
i 7.110 146.500 0.001 1 39 127
i 9.226 146.500 0.001 1 49 127
i 9.227 146.561 0.001 1 49 127
i 8.922 146.624 0.001 1 49 127
i 9.228 146.624 0.001 1 49 127
i 9.229 146.687 0.001 1 49 127
i 11.204 146.737 -1.000 1 41 89
i -11.203 146.744 0
i 9.230 146.749 0.001 1 49 127
i 8.923 146.749 0.001 1 49 127
i 9.231 146.812 0.001 1 49 127
i 8.924 146.875 0.001 1 49 127
i 9.232 146.875 0.001 1 49 127
i 9.233 146.937 0.001 1 49 127
i 8.925 147.000 0.001 1 49 127
i 9.234 147.000 0.001 1 49 127
i 4.133 147.000 0.001 1 37 127
i 10.147 147.000 -1.000 1 72 127
i 10.148 147.000 -1.000 1 76 127
i 9.235 147.061 0.001 1 49 127
i 9.236 147.124 0.001 1 49 127
i 8.926 147.124 0.001 1 49 127
i 9.237 147.187 0.001 1 49 127
i 8.927 147.249 0.001 1 49 127
i 9.238 147.249 0.001 1 49 127
i 11.205 147.255 -1.000 1 38 68
i -11.204 147.260 0
i 9.239 147.312 0.001 1 49 127
i 8.928 147.375 0.001 1 49 127
i 9.240 147.375 0.001 1 49 127
i 9.241 147.437 0.001 1 49 127
i 8.929 147.500 0.001 1 49 127
i 7.111 147.500 0.001 1 39 127
i 9.242 147.500 0.001 1 49 127
i 4.134 147.500 0.001 1 37 127
i 11.206 147.501 -1.000 1 41 78
i -11.205 147.509 0
i 9.243 147.561 0.001 1 49 127
i 8.930 147.624 0.001 1 49 127
i 9.244 147.624 0.001 1 49 127
i 9.245 147.687 0.001 1 49 127
i 6.085 147.749 0.001 1 37 127
i 8.931 147.749 0.001 1 49 127
i 5.085 147.749 0.001 1 37 127
i 9.246 147.749 0.001 1 49 127
i 9.247 147.812 0.001 1 49 127
i 8.932 147.875 0.001 1 49 113
i 9.248 147.875 0.001 1 49 127
i 9.249 147.937 0.001 1 49 127
i 15.034 147.981 -1.000 1 55 78
i 14.043 147.989 -1.000 1 67 75
i 14.044 147.991 -1.000 1 64 78
i 5.086 148.000 0.001 1 37 127
i 9.250 148.000 0.001 1 49 127
i 8.933 148.000 0.001 1 49 127
i 4.135 148.000 0.001 1 37 127
i 6.086 148.000 0.001 1 37 127
i -10.147 147.999 0
i -10.148 147.999 0
i -15.033 148.000 0
i 11.207 148.012 -1.000 1 38 78
i -11.206 148.031 0
i 9.251 148.061 0.001 1 49 127
i -14.041 148.067 0
i -14.042 148.067 0
i 8.934 148.124 0.001 1 49 127
i 9.252 148.124 0.001 1 49 127
i 9.253 148.187 0.001 1 49 127
i 8.935 148.249 0.001 1 49 127
i 9.254 148.249 0.001 1 49 127
i 9.255 148.312 0.001 1 49 127
i 8.936 148.375 0.001 1 49 127
i 9.256 148.375 0.001 1 49 127
i 9.257 148.437 0.001 1 49 127
i 7.112 148.500 0.001 1 39 127
i 8.937 148.500 0.001 1 49 127
i 4.136 148.500 0.001 1 37 127
i 9.258 148.500 0.001 1 49 127
i 9.259 148.561 0.001 1 49 127
i 8.938 148.624 0.001 1 49 127
i 9.260 148.624 0.001 1 49 127
i 9.261 148.687 0.001 1 49 127
i 9.262 148.749 0.001 1 49 127
i 8.939 148.749 0.001 1 49 127
i 11.208 148.760 -1.000 1 36 86
i -11.207 148.768 0
i 9.263 148.812 0.001 1 49 127
i 8.940 148.875 0.001 1 49 127
i 9.264 148.875 0.001 1 49 127
i 9.265 148.937 0.001 1 49 127
i 15.035 148.988 -1.000 1 52 79
i 14.045 148.981 -1.000 1 60 77
i 14.046 148.981 -1.000 1 64 84
i -16.004 148.999 0
i -16.005 148.999 0
i -16.006 148.999 0
i -15.034 149.000 0
i 4.137 149.000 0.001 1 37 127
i 9.266 149.000 0.001 1 49 127
i 10.149 149.000 -1.000 1 72 127
i 8.941 149.000 0.001 1 49 127
i 10.150 149.000 -1.000 1 76 127
i -14.043 149.012 0
i -14.044 149.012 0
i 9.267 149.061 0.001 1 49 127
i 9.268 149.124 0.001 1 49 127
i 8.942 149.124 0.001 1 49 127
i 9.269 149.187 0.001 1 49 127
i 8.943 149.249 0.001 1 49 127
i 9.270 149.249 0.001 1 49 127
i -11.208 149.257 0
i 11.209 149.259 -1.000 1 33 74
i 9.271 149.312 0.001 1 49 127
i 9.272 149.375 0.001 1 49 127
i 8.944 149.375 0.001 1 49 127
i 9.273 149.437 0.001 1 49 127
i 4.138 149.500 0.001 1 37 127
i 7.113 149.500 0.001 1 39 127
i 8.945 149.500 0.001 1 49 127
i 9.274 149.500 0.001 1 49 127
i 11.210 149.508 -1.000 1 36 91
i -11.209 149.517 0
i 9.275 149.561 0.001 1 49 127
i 8.946 149.624 0.001 1 49 127
i 9.276 149.624 0.001 1 49 127
i 9.277 149.687 0.001 1 49 127
i 6.087 149.749 0.001 1 37 127
i 5.087 149.749 0.001 1 37 127
i 8.947 149.749 0.001 1 49 127
i 9.278 149.749 0.001 1 49 127
i 9.279 149.812 0.001 1 49 127
i 8.948 149.875 0.001 1 49 113
i 9.280 149.875 0.001 1 49 127
i 9.281 149.937 0.001 1 49 127
i 15.036 149.987 -1.000 1 53 82
i 14.047 149.983 -1.000 1 62 92
i 14.048 149.983 -1.000 1 65 78
i -15.035 150.000 0
i 16.007 150.000 -1.000 1 105 127
i -10.149 150.000 0
i 13.154 150.000 -1.000 1 91 127
i -10.150 150.000 0
i -11.210 150.000 0
i 11.211 150.000 -1.000 1 38 81
i 4.139 150.000 0.001 1 37 127
i 5.088 150.000 0.001 1 37 127
i 6.088 150.000 0.001 1 37 127
i 8.949 150.000 0.001 1 49 127
i 9.282 150.000 0.001 1 49 127
i 9.283 150.061 0.001 1 49 127
i -14.045 150.097 0
i -14.046 150.097 0
i 8.950 150.124 0.001 1 49 127
i 9.284 150.124 0.001 1 49 127
i -13.154 150.124 0
i 13.155 150.124 -1.000 1 93 127
i 9.285 150.187 0.001 1 49 127
i 8.951 150.249 0.001 1 49 127
i 9.286 150.249 0.001 1 49 127
i -13.155 150.249 0
i 13.156 150.249 -1.000 1 89 127
i 9.287 150.312 0.001 1 49 127
i 8.952 150.375 0.001 1 49 127
i 9.288 150.375 0.001 1 49 127
i -13.156 150.375 0
i 13.157 150.375 -1.000 1 91 127
i 9.289 150.437 0.001 1 49 127
i 7.114 150.500 0.001 1 39 127
i 8.953 150.500 0.001 1 49 127
i 4.140 150.500 0.001 1 37 127
i 9.290 150.500 0.001 1 49 127
i -13.157 150.500 0
i 13.158 150.500 -1.000 1 93 127
i 9.291 150.561 0.001 1 49 127
i -13.158 150.624 0
i 13.159 150.624 -1.000 1 89 127
i 8.954 150.624 0.001 1 49 127
i 9.292 150.624 0.001 1 49 127
i 9.293 150.687 0.001 1 49 127
i 11.212 150.737 -1.000 1 41 89
i -11.211 150.744 0
i -13.159 150.749 0
i 13.160 150.749 -1.000 1 91 127
i 8.955 150.749 0.001 1 49 127
i 9.294 150.749 0.001 1 49 127
i 9.295 150.812 0.001 1 49 127
i -13.160 150.875 0
i 8.956 150.875 0.001 1 49 127
i 9.296 150.875 0.001 1 49 127
i 13.161 150.875 -1.000 1 93 127
i 9.297 150.937 0.001 1 49 127
i 4.141 151.000 0.001 1 37 127
i -13.161 151.000 0
i 16.008 151.000 -1.000 1 101 127
i 13.162 151.000 -1.000 1 89 127
i 8.957 151.000 0.001 1 49 127
i 9.298 151.000 0.001 1 49 127
i 10.151 151.000 -1.000 1 72 127
i 10.152 151.000 -1.000 1 76 127
i 9.299 151.061 0.001 1 49 127
i 8.958 151.124 0.001 1 49 127
i 9.300 151.124 0.001 1 49 127
i -13.162 151.124 0
i 13.163 151.124 -1.000 1 91 127
i 9.301 151.187 0.001 1 49 127
i 8.959 151.249 0.001 1 49 127
i 9.302 151.249 0.001 1 49 127
i -13.163 151.249 0
i 13.164 151.249 -1.000 1 93 127
i 11.213 151.255 -1.000 1 38 68
i -11.212 151.260 0
i 9.303 151.312 0.001 1 49 127
i 8.960 151.375 0.001 1 49 127
i 9.304 151.375 0.001 1 49 127
i -13.164 151.375 0
i 13.165 151.375 -1.000 1 89 127
i 9.305 151.437 0.001 1 49 127
i 11.214 151.501 -1.000 1 41 78
i -13.165 151.500 0
i 13.166 151.500 -1.000 1 91 127
i 7.115 151.500 0.001 1 39 127
i 4.142 151.500 0.001 1 37 127
i 9.306 151.500 0.001 1 49 127
i 8.961 151.500 0.001 1 49 127
i -11.213 151.509 0
i 9.307 151.561 0.001 1 49 127
i 8.962 151.624 0.001 1 49 127
i 9.308 151.624 0.001 1 49 127
i -13.166 151.624 0
i 13.167 151.624 -1.000 1 93 127
i 9.309 151.687 0.001 1 49 127
i 8.963 151.749 0.001 1 49 127
i 6.089 151.749 0.001 1 37 127
i 9.310 151.749 0.001 1 49 127
i -13.167 151.749 0
i 13.168 151.749 -1.000 1 89 127
i 5.089 151.749 0.001 1 37 127
i 9.311 151.812 0.001 1 49 127
i 8.964 151.875 0.001 1 49 113
i 9.312 151.875 0.001 1 49 127
i -13.168 151.875 0
i 13.169 151.875 -1.000 1 91 127
i 9.313 151.937 0.001 1 49 127
i 4.143 152.000 0.001 1 37 127
i 5.090 152.000 0.001 1 37 127
i 16.009 152.000 -1.000 1 98 127
i -13.169 152.000 0
i 13.170 152.000 -1.000 1 93 127
i 8.965 152.000 0.001 1 49 127
i -10.151 151.999 0
i 9.314 152.000 0.001 1 49 127
i -10.152 151.999 0
i 6.090 152.000 0.001 1 37 127
i 11.215 152.012 -1.000 1 38 78
i -11.214 152.031 0
i 9.315 152.061 0.001 1 49 127
i -13.170 152.124 0
i 8.966 152.124 0.001 1 49 127
i 9.316 152.124 0.001 1 49 127
i 9.317 152.187 0.001 1 49 127
i 8.967 152.249 0.001 1 49 127
i 9.318 152.249 0.001 1 49 127
i 9.319 152.312 0.001 1 49 127
i 8.968 152.375 0.001 1 49 127
i 9.320 152.375 0.001 1 49 127
i 9.321 152.437 0.001 1 49 127
i 4.144 152.500 0.001 1 37 127
i 8.969 152.500 0.001 1 49 127
i 7.116 152.500 0.001 1 39 127
i 9.322 152.500 0.001 1 49 127
i 9.323 152.561 0.001 1 49 127
i 8.970 152.624 0.001 1 49 127
i 9.324 152.624 0.001 1 49 127
i 9.325 152.687 0.001 1 49 127
i 9.326 152.749 0.001 1 49 127
i 8.971 152.749 0.001 1 49 127
i 11.216 152.760 -1.000 1 36 86
i -11.215 152.768 0
i 9.327 152.812 0.001 1 49 127
i 9.328 152.875 0.001 1 49 127
i 8.972 152.875 0.001 1 49 127
i 9.329 152.937 0.001 1 49 127
i 4.145 153.000 0.001 1 37 127
i 10.153 153.000 -1.000 1 72 127
i 8.973 153.000 0.001 1 49 127
i 9.330 153.000 0.001 1 49 127
i 10.154 153.000 -1.000 1 76 127
i 9.331 153.061 0.001 1 49 127
i 8.974 153.124 0.001 1 49 127
i 9.332 153.124 0.001 1 49 127
i 9.333 153.187 0.001 1 49 127
i 8.975 153.249 0.001 1 49 127
i 9.334 153.249 0.001 1 49 127
i -11.216 153.257 0
i 11.217 153.259 -1.000 1 33 74
i 9.335 153.312 0.001 1 49 127
i 8.976 153.375 0.001 1 49 127
i 9.336 153.375 0.001 1 49 127
i 9.337 153.437 0.001 1 49 127
i 4.146 153.500 0.001 1 37 127
i 8.977 153.500 0.001 1 49 127
i 7.117 153.500 0.001 1 39 127
i 9.338 153.500 0.001 1 49 127
i 11.218 153.508 -1.000 1 36 91
i -11.217 153.517 0
i 9.339 153.561 0.001 1 49 127
i 8.978 153.624 0.001 1 49 127
i 9.340 153.624 0.001 1 49 127
i 9.341 153.687 0.001 1 49 127
i 8.979 153.749 0.001 1 49 127
i 6.091 153.749 0.001 1 37 127
i 9.342 153.749 0.001 1 49 127
i 5.091 153.749 0.001 1 37 127
i 9.343 153.812 0.001 1 49 127
i 8.980 153.875 0.001 1 49 113
i 9.344 153.875 0.001 1 49 127
i 9.345 153.937 0.001 1 49 127
i 4.147 154.000 0.001 1 37 127
i 5.092 154.000 0.001 1 37 127
i -11.218 153.999 0
i 11.219 154.000 -1.000 1 38 83
i 8.981 154.000 0.001 1 49 127
i 9.346 154.000 0.001 1 49 127
i -10.153 154.000 0
i 6.092 154.000 0.001 1 37 127
i -10.154 154.000 0
i 9.347 154.061 0.001 1 49 127
i 8.982 154.124 0.001 1 49 127
i 9.348 154.124 0.001 1 49 127
i 9.349 154.187 0.001 1 49 127
i 8.983 154.249 0.001 1 49 127
i 9.350 154.249 0.001 1 49 127
i 9.351 154.312 0.001 1 49 127
i 8.984 154.375 0.001 1 49 127
i 9.352 154.375 0.001 1 49 127
i 9.353 154.437 0.001 1 49 127
i 4.148 154.500 0.001 1 37 127
i 7.118 154.500 0.001 1 39 127
i 8.985 154.500 0.001 1 49 127
i 9.354 154.500 0.001 1 49 127
i 9.355 154.561 0.001 1 49 127
i 8.986 154.624 0.001 1 49 127
i 9.356 154.624 0.001 1 49 127
i 9.357 154.687 0.001 1 49 127
i 11.220 154.737 -1.000 1 41 103
i 8.987 154.749 0.001 1 49 127
i 9.358 154.749 0.001 1 49 127
i -11.219 154.756 0
i 9.359 154.812 0.001 1 49 127
i 8.988 154.875 0.001 1 49 127
i 9.360 154.875 0.001 1 49 127
i 9.361 154.937 0.001 1 49 127
i 4.149 155.000 0.001 1 37 127
i 8.989 155.000 0.001 1 49 127
i 9.362 155.000 0.001 1 49 127
i 10.155 155.000 -1.000 1 72 127
i 10.156 155.000 -1.000 1 76 127
i 9.363 155.061 0.001 1 49 127
i 8.990 155.124 0.001 1 49 127
i 9.364 155.124 0.001 1 49 127
i 9.365 155.187 0.001 1 49 127
i 11.221 155.223 -1.000 1 44 76
i -11.220 155.235 0
i 9.366 155.249 0.001 1 49 127
i 8.991 155.249 0.001 1 49 127
i 9.367 155.312 0.001 1 49 127
i 8.992 155.375 0.001 1 49 127
i 9.368 155.375 0.001 1 49 127
i 9.369 155.437 0.001 1 49 127
i 4.150 155.500 0.001 1 37 127
i 7.119 155.500 0.001 1 39 127
i 8.993 155.500 0.001 1 49 127
i 9.370 155.500 0.001 1 49 127
i -11.221 155.523 0
i 11.222 155.523 -1.000 1 43 89
i 9.371 155.561 0.001 1 49 127
i 9.372 155.624 0.001 1 49 127
i 8.994 155.624 0.001 1 49 127
i 9.373 155.687 0.001 1 49 127
i 8.995 155.749 0.001 1 49 127
i 5.093 155.749 0.001 1 37 127
i 6.093 155.749 0.001 1 37 127
i 9.374 155.749 0.001 1 49 127
i 9.375 155.812 0.001 1 49 127
i 8.996 155.875 0.001 1 49 113
i 9.376 155.875 0.001 1 49 127
i 9.377 155.937 0.001 1 49 127
i -11.222 155.997 0
i 11.223 155.997 -1.000 1 41 97
i 4.151 156.000 0.001 1 37 127
i 5.094 156.000 0.001 1 37 127
i 6.094 156.000 0.001 1 37 127
i 8.997 156.000 0.001 1 49 127
i -10.155 155.999 0
i -10.156 155.999 0
i 9.378 156.000 0.001 1 49 127
i 9.379 156.061 0.001 1 49 127
i 8.998 156.124 0.001 1 49 127
i 9.380 156.124 0.001 1 49 127
i 9.381 156.187 0.001 1 49 127
i 8.999 156.249 0.001 1 49 127
i 9.382 156.249 0.001 1 49 127
i 9.383 156.312 0.001 1 49 127
i 9.384 156.375 0.001 1 49 127
i 8.001 156.375 0.001 1 49 127
i 9.385 156.437 0.001 1 49 127
i 4.152 156.500 0.001 1 37 127
i 7.120 156.500 0.001 1 39 127
i 9.386 156.500 0.001 1 49 127
i 8.002 156.500 0.001 1 49 127
i 9.387 156.561 0.001 1 49 127
i 8.003 156.624 0.001 1 49 127
i 9.388 156.624 0.001 1 49 127
i 9.389 156.687 0.001 1 49 127
i 9.390 156.749 0.001 1 49 127
i 8.004 156.749 0.001 1 49 127
i -11.223 156.756 0
i 11.224 156.759 -1.000 1 38 80
i 9.391 156.812 0.001 1 49 127
i 9.392 156.875 0.001 1 49 127
i 8.005 156.875 0.001 1 49 127
i 9.393 156.937 0.001 1 49 127
i 4.153 157.000 0.001 1 37 127
i 8.006 157.000 0.001 1 49 127
i 9.394 157.000 0.001 1 49 127
i 10.157 157.000 -1.000 1 72 127
i 10.158 157.000 -1.000 1 76 127
i 9.395 157.061 0.001 1 49 127
i 9.396 157.124 0.001 1 49 127
i 8.007 157.124 0.001 1 49 127
i 9.397 157.187 0.001 1 49 127
i 11.225 157.205 -1.000 1 33 79
i -11.224 157.229 0
i 8.008 157.249 0.001 1 49 127
i 9.398 157.249 0.001 1 49 127
i 9.399 157.312 0.001 1 49 127
i 8.009 157.375 0.001 1 49 127
i 9.400 157.375 0.001 1 49 127
i 9.401 157.437 0.001 1 49 127
i 8.010 157.500 0.001 1 49 127
i 7.121 157.500 0.001 1 39 127
i 9.402 157.500 0.001 1 49 127
i 4.154 157.500 0.001 1 37 127
i -15.036 157.499 0
i 11.226 157.507 -1.000 1 36 89
i -11.225 157.508 0
i 9.403 157.561 0.001 1 49 127
i 8.011 157.624 0.001 1 49 127
i 9.404 157.624 0.001 1 49 127
i 9.405 157.687 0.001 1 49 127
i 8.012 157.749 0.001 1 49 127
i 9.406 157.749 0.001 1 49 127
i 5.095 157.749 0.001 1 37 127
i 6.095 157.749 0.001 1 37 127
i 9.407 157.812 0.001 1 49 127
i 8.013 157.875 0.001 1 49 113
i 9.408 157.875 0.001 1 49 127
i 9.409 157.937 0.001 1 49 127
i 15.037 157.988 -1.000 1 53 74
i 14.049 157.988 -1.000 1 65 94
i 14.050 157.989 -1.000 1 62 76
i 4.155 158.000 0.001 1 37 127
i 13.171 158.000 -1.000 1 91 127
i -11.226 157.999 0
i 11.227 158.000 -1.000 1 38 81
i 6.096 158.000 0.001 1 37 127
i 8.014 158.000 0.001 1 49 127
i 9.410 158.000 0.001 1 49 127
i 5.096 158.000 0.001 1 37 127
i -10.157 158.000 0
i -10.158 158.000 0
i 9.411 158.061 0.001 1 49 127
i -14.047 158.059 0
i -14.048 158.059 0
i 8.015 158.124 0.001 1 49 127
i 9.412 158.124 0.001 1 49 127
i -13.171 158.124 0
i 13.172 158.124 -1.000 1 93 127
i 9.413 158.187 0.001 1 49 127
i -13.172 158.249 0
i 13.173 158.249 -1.000 1 89 127
i 8.016 158.249 0.001 1 49 127
i 9.414 158.249 0.001 1 49 127
i 9.415 158.312 0.001 1 49 127
i 8.017 158.375 0.001 1 49 127
i -13.173 158.375 0
i 9.416 158.375 0.001 1 49 127
i 13.174 158.375 -1.000 1 91 127
i 9.417 158.437 0.001 1 49 127
i 4.156 158.500 0.001 1 37 127
i -13.174 158.500 0
i 13.175 158.500 -1.000 1 93 127
i 7.122 158.500 0.001 1 39 127
i 8.018 158.500 0.001 1 49 127
i 9.418 158.500 0.001 1 49 127
i 9.419 158.561 0.001 1 49 127
i -13.175 158.624 0
i 13.176 158.624 -1.000 1 89 127
i 8.019 158.624 0.001 1 49 127
i 9.420 158.624 0.001 1 49 127
i 9.421 158.687 0.001 1 49 127
i 11.228 158.737 -1.000 1 41 89
i -11.227 158.744 0
i 8.020 158.749 0.001 1 49 127
i 9.422 158.749 0.001 1 49 127
i -13.176 158.749 0
i 13.177 158.749 -1.000 1 91 127
i 9.423 158.812 0.001 1 49 127
i 8.021 158.875 0.001 1 49 127
i 9.424 158.875 0.001 1 49 127
i -13.177 158.875 0
i 13.178 158.875 -1.000 1 93 127
i 9.425 158.937 0.001 1 49 127
i 4.157 159.000 0.001 1 37 127
i 9.426 159.000 0.001 1 49 127
i 8.022 159.000 0.001 1 49 127
i -13.178 159.000 0
i 10.159 159.000 -1.000 1 72 127
i 13.179 159.000 -1.000 1 89 127
i 10.160 159.000 -1.000 1 76 127
i 9.427 159.061 0.001 1 49 127
i -13.179 159.124 0
i 13.180 159.124 -1.000 1 91 127
i 8.023 159.124 0.001 1 49 127
i 9.428 159.124 0.001 1 49 127
i 9.429 159.187 0.001 1 49 127
i 8.024 159.249 0.001 1 49 127
i -13.180 159.249 0
i 9.430 159.249 0.001 1 49 127
i 13.181 159.249 -1.000 1 93 127
i 11.229 159.255 -1.000 1 38 68
i -11.228 159.260 0
i 9.431 159.312 0.001 1 49 127
i 8.025 159.375 0.001 1 49 127
i -13.181 159.375 0
i 9.432 159.375 0.001 1 49 127
i 13.182 159.375 -1.000 1 89 127
i 9.433 159.437 0.001 1 49 127
i 8.026 159.500 0.001 1 49 127
i 9.434 159.500 0.001 1 49 127
i 11.230 159.501 -1.000 1 41 78
i -13.182 159.500 0
i 13.183 159.500 -1.000 1 91 127
i 4.158 159.500 0.001 1 37 127
i 7.123 159.500 0.001 1 39 127
i -11.229 159.509 0
i 9.435 159.561 0.001 1 49 127
i 9.436 159.624 0.001 1 49 127
i 8.027 159.624 0.001 1 49 127
i -13.183 159.624 0
i 13.184 159.624 -1.000 1 93 127
i 9.437 159.687 0.001 1 49 127
i 6.097 159.749 0.001 1 37 127
i 8.028 159.749 0.001 1 49 127
i 5.097 159.749 0.001 1 37 127
i 9.438 159.749 0.001 1 49 127
i -13.184 159.749 0
i 13.185 159.749 -1.000 1 89 127
i 9.439 159.812 0.001 1 49 127
i -13.185 159.875 0
i 13.186 159.875 -1.000 1 91 127
i 8.029 159.875 0.001 1 49 113
i 9.440 159.875 0.001 1 49 127
i 9.441 159.937 0.001 1 49 127
i 15.038 159.973 -1.000 1 55 101
i 14.051 159.988 -1.000 1 67 78
i 14.052 159.989 -1.000 1 64 89
i -15.037 160.000 0
i 5.098 160.000 0.001 1 37 127
i 4.159 160.000 0.001 1 37 127
i 6.098 160.000 0.001 1 37 127
i 8.030 160.000 0.001 1 49 127
i -13.186 160.000 0
i 13.187 160.000 -1.000 1 93 127
i 9.442 160.000 0.001 1 49 127
i -10.159 159.999 0
i -10.160 159.999 0
i 11.231 160.012 -1.000 1 38 78
i -11.230 160.031 0
i 9.443 160.061 0.001 1 49 127
i -14.049 160.067 0
i -14.050 160.067 0
i -13.187 160.124 0
i 8.031 160.124 0.001 1 49 127
i 9.444 160.124 0.001 1 49 127
i 9.445 160.187 0.001 1 49 127
i 8.032 160.249 0.001 1 49 127
i 9.446 160.249 0.001 1 49 127
i 9.447 160.312 0.001 1 49 127
i 9.448 160.375 0.001 1 49 127
i 8.033 160.375 0.001 1 49 127
i 9.449 160.437 0.001 1 49 127
i 4.160 160.500 0.001 1 37 127
i 8.034 160.500 0.001 1 49 127
i 7.124 160.500 0.001 1 39 127
i 9.450 160.500 0.001 1 49 127
i 9.451 160.561 0.001 1 49 127
i 8.035 160.624 0.001 1 49 127
i 9.452 160.624 0.001 1 49 127
i 9.453 160.687 0.001 1 49 127
i 8.036 160.749 0.001 1 49 127
i 9.454 160.749 0.001 1 49 127
i 11.232 160.760 -1.000 1 36 86
i -11.231 160.768 0
i 9.455 160.812 0.001 1 49 127
i 8.037 160.875 0.001 1 49 127
i 9.456 160.875 0.001 1 49 127
i 9.457 160.937 0.001 1 49 127
i 10.161 161.000 -1.000 1 72 127
i 8.038 161.000 0.001 1 49 127
i 9.458 161.000 0.001 1 49 127
i 10.162 161.000 -1.000 1 76 127
i 4.161 161.000 0.001 1 37 127
i 9.459 161.061 0.001 1 49 127
i 9.460 161.124 0.001 1 49 127
i 8.039 161.124 0.001 1 49 127
i 9.461 161.187 0.001 1 49 127
i 9.462 161.249 0.001 1 49 127
i 8.040 161.249 0.001 1 49 127
i -11.232 161.257 0
i 11.233 161.259 -1.000 1 33 74
i 9.463 161.312 0.001 1 49 127
i 9.464 161.375 0.001 1 49 127
i 8.041 161.375 0.001 1 49 127
i 9.465 161.437 0.001 1 49 127
i 4.162 161.500 0.001 1 37 127
i 7.125 161.500 0.001 1 39 127
i 8.042 161.500 0.001 1 49 127
i 9.466 161.500 0.001 1 49 127
i 11.234 161.508 -1.000 1 36 91
i -11.233 161.517 0
i 9.467 161.561 0.001 1 49 127
i 8.043 161.624 0.001 1 49 127
i 9.468 161.624 0.001 1 49 127
i 9.469 161.687 0.001 1 49 127
i 8.044 161.749 0.001 1 49 127
i 9.470 161.749 0.001 1 49 127
i 5.099 161.749 0.001 1 37 127
i 6.099 161.749 0.001 1 37 127
i 9.471 161.812 0.001 1 49 127
i 8.045 161.875 0.001 1 49 113
i 9.472 161.875 0.001 1 49 127
i 9.473 161.937 0.001 1 49 127
i 15.039 161.984 -1.000 1 57 100
i 14.053 161.985 -1.000 1 65 83
i 14.054 161.987 -1.000 1 69 76
i 9.474 162.000 0.001 1 49 127
i 8.046 162.000 0.001 1 49 127
i 6.100 162.000 0.001 1 37 127
i -10.161 162.000 0
i -10.162 162.000 0
i -11.234 161.999 0
i 4.163 162.000 0.001 1 37 127
i 11.235 162.000 -1.000 1 38 83
i 5.100 162.000 0.001 1 37 127
i -15.038 161.996 0
i 9.475 162.061 0.001 1 49 127
i -14.051 162.092 0
i -14.052 162.092 0
i 8.047 162.124 0.001 1 49 127
i 9.476 162.124 0.001 1 49 127
i 9.477 162.187 0.001 1 49 127
i 8.048 162.249 0.001 1 49 127
i 9.478 162.249 0.001 1 49 127
i 9.479 162.312 0.001 1 49 127
i 8.049 162.375 0.001 1 49 127
i 9.480 162.375 0.001 1 49 127
i 9.481 162.437 0.001 1 49 127
i 4.164 162.500 0.001 1 37 127
i 8.050 162.500 0.001 1 49 127
i 7.126 162.500 0.001 1 39 127
i 9.482 162.500 0.001 1 49 127
i 9.483 162.561 0.001 1 49 127
i 8.051 162.624 0.001 1 49 127
i 9.484 162.624 0.001 1 49 127
i 9.485 162.687 0.001 1 49 127
i 11.236 162.737 -1.000 1 41 103
i -11.235 162.756 0
i 8.052 162.749 0.001 1 49 127
i 9.486 162.749 0.001 1 49 127
i 9.487 162.812 0.001 1 49 127
i 9.488 162.875 0.001 1 49 127
i 8.053 162.875 0.001 1 49 127
i 9.489 162.937 0.001 1 49 127
i 9.490 163.000 0.001 1 49 127
i 8.054 163.000 0.001 1 49 127
i 10.163 163.000 -1.000 1 72 127
i 4.165 163.000 0.001 1 37 127
i 10.164 163.000 -1.000 1 76 127
i 9.491 163.061 0.001 1 49 127
i 8.055 163.124 0.001 1 49 127
i 9.492 163.124 0.001 1 49 127
i 9.493 163.187 0.001 1 49 127
i 11.237 163.223 -1.000 1 44 76
i -11.236 163.235 0
i 8.056 163.249 0.001 1 49 127
i 9.494 163.249 0.001 1 49 127
i 9.495 163.312 0.001 1 49 127
i 8.057 163.375 0.001 1 49 127
i 9.496 163.375 0.001 1 49 127
i 9.497 163.437 0.001 1 49 127
i 9.498 163.500 0.001 1 49 127
i 8.058 163.500 0.001 1 49 127
i 4.166 163.500 0.001 1 37 127
i 7.127 163.500 0.001 1 39 127
i -11.237 163.523 0
i 11.238 163.523 -1.000 1 43 89
i 9.499 163.561 0.001 1 49 127
i 8.059 163.624 0.001 1 49 127
i 9.500 163.624 0.001 1 49 127
i 9.501 163.687 0.001 1 49 127
i 9.502 163.749 0.001 1 49 127
i 6.101 163.749 0.001 1 37 127
i 5.101 163.749 0.001 1 37 127
i 8.060 163.749 0.001 1 49 127
i 9.503 163.812 0.001 1 49 127
i 9.504 163.875 0.001 1 49 127
i 8.061 163.875 0.001 1 49 113
i 9.505 163.937 0.001 1 49 127
i 14.055 163.980 -1.000 1 69 78
i 15.040 163.979 -1.000 1 55 78
i 14.056 163.985 -1.000 1 64 85
i -15.039 164.000 0
i -10.163 163.999 0
i -10.164 163.999 0
i -11.238 163.997 0
i 5.102 164.000 0.001 1 37 127
i 11.239 163.997 -1.000 1 41 97
i 6.102 164.000 0.001 1 37 127
i 4.167 164.000 0.001 1 37 127
i 8.062 164.000 0.001 1 49 127
i 9.506 164.000 0.001 1 49 127
i -14.053 164.009 0
i -14.054 164.009 0
i 9.507 164.061 0.001 1 49 127
i 8.063 164.124 0.001 1 49 127
i 9.508 164.124 0.001 1 49 127
i 9.509 164.187 0.001 1 49 127
i 8.064 164.249 0.001 1 49 127
i 9.510 164.249 0.001 1 49 127
i 9.511 164.312 0.001 1 49 127
i 8.065 164.375 0.001 1 49 127
i 9.512 164.375 0.001 1 49 127
i 9.513 164.437 0.001 1 49 127
i 9.514 164.500 0.001 1 49 127
i 8.066 164.500 0.001 1 49 127
i 7.128 164.500 0.001 1 39 127
i 4.168 164.500 0.001 1 37 127
i 9.515 164.561 0.001 1 49 127
i 8.067 164.624 0.001 1 49 127
i 9.516 164.624 0.001 1 49 127
i 9.517 164.687 0.001 1 49 127
i 8.068 164.749 0.001 1 49 127
i 9.518 164.749 0.001 1 49 127
i -11.239 164.756 0
i 11.240 164.759 -1.000 1 38 80
i 9.519 164.812 0.001 1 49 127
i 8.069 164.875 0.001 1 49 127
i 9.520 164.875 0.001 1 49 127
i 9.521 164.937 0.001 1 49 127
i 15.041 164.984 -1.000 1 57 79
i 14.057 164.996 -1.000 1 65 86
i 14.058 164.996 -1.000 1 60 75
i 4.169 165.000 0.001 1 37 127
i -15.040 165.000 0
i 8.070 165.000 0.001 1 49 127
i 9.522 165.000 0.001 1 49 127
i 10.165 165.000 -1.000 1 72 127
i 10.166 165.000 -1.000 1 76 127
i 9.523 165.061 0.001 1 49 127
i -14.055 165.067 0
i -14.056 165.067 0
i 8.071 165.124 0.001 1 49 127
i 9.524 165.124 0.001 1 49 127
i 9.525 165.187 0.001 1 49 127
i 11.241 165.205 -1.000 1 33 79
i -11.240 165.229 0
i 8.072 165.249 0.001 1 49 127
i 9.526 165.249 0.001 1 49 127
i 9.527 165.312 0.001 1 49 127
i 8.073 165.375 0.001 1 49 127
i 9.528 165.375 0.001 1 49 127
i 9.529 165.437 0.001 1 49 127
i 8.074 165.500 0.001 1 49 127
i 7.129 165.500 0.001 1 39 127
i 9.530 165.500 0.001 1 49 127
i 4.170 165.500 0.001 1 37 127
i 11.242 165.507 -1.000 1 36 89
i -11.241 165.508 0
i 9.531 165.561 0.001 1 49 127
i 9.532 165.624 0.001 1 49 127
i 8.075 165.624 0.001 1 49 127
i 9.533 165.687 0.001 1 49 127
i 9.534 165.749 0.001 1 49 127
i 8.076 165.749 0.001 1 49 127
i 5.103 165.749 0.001 1 37 127
i 6.103 165.749 0.001 1 37 127
i 9.535 165.812 0.001 1 49 127
i 9.536 165.875 0.001 1 49 127
i 8.077 165.875 0.001 1 49 113
i 9.537 165.937 0.001 1 49 127
i 15.042 165.972 -1.000 1 55 82
i 14.059 165.985 -1.000 1 67 88
i 14.060 165.987 -1.000 1 62 78
i 8.078 166.000 0.001 1 49 127
i 9.538 166.000 0.001 1 49 127
i 5.104 166.000 0.001 1 37 127
i 4.171 166.000 0.001 1 37 127
i -10.165 166.000 0
i -10.166 166.000 0
i 6.104 166.000 0.001 1 37 127
i 13.188 166.000 -1.000 1 91 127
i -15.041 166.000 0
i -11.242 165.999 0
i 11.243 166.000 -1.000 1 38 81
i -14.057 166.025 0
i -14.058 166.025 0
i 9.539 166.061 0.001 1 49 127
i -13.188 166.124 0
i 13.189 166.124 -1.000 1 93 127
i 8.079 166.124 0.001 1 49 127
i 9.540 166.124 0.001 1 49 127
i 9.541 166.187 0.001 1 49 127
i -13.189 166.249 0
i 13.190 166.249 -1.000 1 89 127
i 8.080 166.249 0.001 1 49 127
i 9.542 166.249 0.001 1 49 127
i 9.543 166.312 0.001 1 49 127
i -13.190 166.375 0
i 13.191 166.375 -1.000 1 91 127
i 8.081 166.375 0.001 1 49 127
i 9.544 166.375 0.001 1 49 127
i 9.545 166.437 0.001 1 49 127
i 8.082 166.500 0.001 1 49 127
i 7.130 166.500 0.001 1 39 127
i 9.546 166.500 0.001 1 49 127
i 4.172 166.500 0.001 1 37 127
i -13.191 166.500 0
i 13.192 166.500 -1.000 1 93 127
i 9.547 166.561 0.001 1 49 127
i -13.192 166.624 0
i 13.193 166.624 -1.000 1 89 127
i 8.083 166.624 0.001 1 49 127
i 9.548 166.624 0.001 1 49 127
i 9.549 166.687 0.001 1 49 127
i 11.244 166.737 -1.000 1 41 89
i -11.243 166.744 0
i 8.084 166.749 0.001 1 49 127
i 9.550 166.749 0.001 1 49 127
i -13.193 166.749 0
i 13.194 166.749 -1.000 1 91 127
i 9.551 166.812 0.001 1 49 127
i -13.194 166.875 0
i 13.195 166.875 -1.000 1 93 127
i 8.085 166.875 0.001 1 49 127
i 9.552 166.875 0.001 1 49 127
i 9.553 166.937 0.001 1 49 127
i 8.086 167.000 0.001 1 49 127
i 9.554 167.000 0.001 1 49 127
i -13.195 167.000 0
i 13.196 167.000 -1.000 1 89 127
i 4.173 167.000 0.001 1 37 127
i 10.167 167.000 -1.000 1 72 127
i 10.168 167.000 -1.000 1 76 127
i 9.555 167.061 0.001 1 49 127
i 8.087 167.124 0.001 1 49 127
i 9.556 167.124 0.001 1 49 127
i -13.196 167.124 0
i 13.197 167.124 -1.000 1 91 127
i 9.557 167.187 0.001 1 49 127
i 8.088 167.249 0.001 1 49 127
i 9.558 167.249 0.001 1 49 127
i -13.197 167.249 0
i 13.198 167.249 -1.000 1 93 127
i 11.245 167.255 -1.000 1 38 68
i -11.244 167.260 0
i 9.559 167.312 0.001 1 49 127
i -13.198 167.375 0
i 13.199 167.375 -1.000 1 89 127
i 9.560 167.375 0.001 1 49 127
i 8.089 167.375 0.001 1 49 127
i 9.561 167.437 0.001 1 49 127
i 11.246 167.501 -1.000 1 41 78
i -13.199 167.500 0
i 13.200 167.500 -1.000 1 91 127
i 4.174 167.500 0.001 1 37 127
i 8.090 167.500 0.001 1 49 127
i 7.131 167.500 0.001 1 39 127
i 9.562 167.500 0.001 1 49 127
i -11.245 167.509 0
i 9.563 167.561 0.001 1 49 127
i 8.091 167.624 0.001 1 49 127
i 9.564 167.624 0.001 1 49 127
i -13.200 167.624 0
i 13.201 167.624 -1.000 1 93 127
i 9.565 167.687 0.001 1 49 127
i 5.105 167.749 0.001 1 37 127
i -13.201 167.749 0
i 13.202 167.749 -1.000 1 89 127
i 8.092 167.749 0.001 1 49 127
i 6.105 167.749 0.001 1 37 127
i 9.566 167.749 0.001 1 49 127
i 9.567 167.812 0.001 1 49 127
i 8.093 167.875 0.001 1 49 113
i 9.568 167.875 0.001 1 49 127
i -13.202 167.875 0
i 13.203 167.875 -1.000 1 91 127
i 9.569 167.937 0.001 1 49 127
i 6.106 168.000 0.001 1 37 127
i 5.106 168.000 0.001 1 37 127
i 4.175 168.000 0.001 1 37 127
i 9.570 168.000 0.001 1 49 127
i -10.167 167.999 0
i -10.168 167.999 0
i 8.094 168.000 0.001 1 49 127
i -13.203 168.000 0
i 13.204 168.000 -1.000 1 93 127
i 11.247 168.012 -1.000 1 38 78
i -11.246 168.031 0
i 9.571 168.061 0.001 1 49 127
i 8.095 168.124 0.001 1 49 127
i 9.572 168.124 0.001 1 49 127
i -13.204 168.124 0
i 9.573 168.187 0.001 1 49 127
i 8.096 168.249 0.001 1 49 127
i 9.574 168.249 0.001 1 49 127
i 9.575 168.312 0.001 1 49 127
i 8.097 168.375 0.001 1 49 127
i 9.576 168.375 0.001 1 49 127
i 9.577 168.437 0.001 1 49 127
i 8.098 168.500 0.001 1 49 127
i 9.578 168.500 0.001 1 49 127
i 4.176 168.500 0.001 1 37 127
i 7.132 168.500 0.001 1 39 127
i 9.579 168.561 0.001 1 49 127
i 9.580 168.624 0.001 1 49 127
i 8.099 168.624 0.001 1 49 127
i 9.581 168.687 0.001 1 49 127
i 8.100 168.749 0.001 1 49 127
i 9.582 168.749 0.001 1 49 127
i 11.248 168.760 -1.000 1 36 86
i -11.247 168.768 0
i 9.583 168.812 0.001 1 49 127
i 8.101 168.875 0.001 1 49 127
i 9.584 168.875 0.001 1 49 127
i 9.585 168.937 0.001 1 49 127
i 9.586 169.000 0.001 1 49 127
i 10.169 169.000 -1.000 1 72 127
i 4.177 169.000 0.001 1 37 127
i 10.170 169.000 -1.000 1 76 127
i 8.102 169.000 0.001 1 49 127
i 9.587 169.061 0.001 1 49 127
i 9.588 169.124 0.001 1 49 127
i 8.103 169.124 0.001 1 49 127
i 9.589 169.187 0.001 1 49 127
i 8.104 169.249 0.001 1 49 127
i 9.590 169.249 0.001 1 49 127
i -11.248 169.257 0
i 11.249 169.259 -1.000 1 33 74
i 9.591 169.312 0.001 1 49 127
i 8.105 169.375 0.001 1 49 127
i 9.592 169.375 0.001 1 49 127
i 9.593 169.437 0.001 1 49 127
i 4.178 169.500 0.001 1 37 127
i 7.133 169.500 0.001 1 39 127
i 8.106 169.500 0.001 1 49 127
i 9.594 169.500 0.001 1 49 127
i 11.250 169.508 -1.000 1 36 91
i -11.249 169.517 0
i 9.595 169.561 0.001 1 49 127
i 8.107 169.624 0.001 1 49 127
i 9.596 169.624 0.001 1 49 127
i 9.597 169.687 0.001 1 49 127
i 9.598 169.749 0.001 1 49 127
i 8.108 169.749 0.001 1 49 127
i 6.107 169.749 0.001 1 37 127
i 5.107 169.749 0.001 1 37 127
i 9.599 169.812 0.001 1 49 127
i 8.109 169.875 0.001 1 49 113
i 9.600 169.875 0.001 1 49 127
i 9.601 169.937 0.001 1 49 127
i 8.110 170.000 0.001 1 49 127
i 4.179 170.000 0.001 1 37 127
i 9.602 170.000 0.001 1 49 127
i 6.108 170.000 0.001 1 37 127
i 5.108 170.000 0.001 1 37 127
i -11.250 169.999 0
i 11.251 170.000 -1.000 1 38 83
i -10.169 170.000 0
i -10.170 170.000 0
i 9.603 170.061 0.001 1 49 127
i 8.111 170.124 0.001 1 49 127
i 9.604 170.124 0.001 1 49 127
i 9.605 170.187 0.001 1 49 127
i 8.112 170.249 0.001 1 49 127
i 9.606 170.249 0.001 1 49 127
i 9.607 170.312 0.001 1 49 127
i 8.113 170.375 0.001 1 49 127
i 9.608 170.375 0.001 1 49 127
i 9.609 170.437 0.001 1 49 127
i 8.114 170.500 0.001 1 49 127
i 9.610 170.500 0.001 1 49 127
i 4.180 170.500 0.001 1 37 127
i 7.134 170.500 0.001 1 39 127
i 9.611 170.561 0.001 1 49 127
i 8.115 170.624 0.001 1 49 127
i 9.612 170.624 0.001 1 49 127
i 9.613 170.687 0.001 1 49 127
i 11.252 170.737 -1.000 1 41 103
i 8.116 170.749 0.001 1 49 127
i 9.614 170.749 0.001 1 49 127
i -11.251 170.756 0
i 9.615 170.812 0.001 1 49 127
i 8.117 170.875 0.001 1 49 127
i 9.616 170.875 0.001 1 49 127
i 9.617 170.937 0.001 1 49 127
i 4.181 171.000 0.001 1 37 127
i 8.118 171.000 0.001 1 49 127
i 9.618 171.000 0.001 1 49 127
i 10.171 171.000 -1.000 1 72 127
i 10.172 171.000 -1.000 1 76 127
i 9.619 171.061 0.001 1 49 127
i 8.119 171.124 0.001 1 49 127
i 9.620 171.124 0.001 1 49 127
i 9.621 171.187 0.001 1 49 127
i 11.253 171.223 -1.000 1 44 76
i -11.252 171.235 0
i 8.120 171.249 0.001 1 49 127
i 9.622 171.249 0.001 1 49 127
i 9.623 171.312 0.001 1 49 127
i 8.121 171.375 0.001 1 49 127
i 9.624 171.375 0.001 1 49 127
i 9.625 171.437 0.001 1 49 127
i 4.182 171.500 0.001 1 37 127
i 7.135 171.500 0.001 1 39 127
i 8.122 171.500 0.001 1 49 127
i 9.626 171.500 0.001 1 49 127
i -11.253 171.523 0
i 11.254 171.523 -1.000 1 43 89
i 9.627 171.561 0.001 1 49 127
i 8.123 171.624 0.001 1 49 127
i 9.628 171.624 0.001 1 49 127
i 9.629 171.687 0.001 1 49 127
i 6.109 171.749 0.001 1 37 127
i 8.124 171.749 0.001 1 49 127
i 5.109 171.749 0.001 1 37 127
i 9.630 171.749 0.001 1 49 127
i 9.631 171.812 0.001 1 49 127
i 9.632 171.875 0.001 1 49 127
i 8.125 171.875 0.001 1 49 113
i 9.633 171.937 0.001 1 49 127
i -11.254 171.997 0
i 4.183 172.000 0.001 1 37 127
i 11.255 171.997 -1.000 1 41 97
i 9.634 172.000 0.001 1 49 127
i -10.171 171.999 0
i 8.126 172.000 0.001 1 49 127
i 5.110 172.000 0.001 1 37 127
i 6.110 172.000 0.001 1 37 127
i -10.172 171.999 0
i 9.635 172.061 0.001 1 49 127
i 8.127 172.124 0.001 1 49 127
i 9.636 172.124 0.001 1 49 127
i 9.637 172.187 0.001 1 49 127
i 8.128 172.249 0.001 1 49 127
i 9.638 172.249 0.001 1 49 127
i 9.639 172.312 0.001 1 49 127
i 9.640 172.375 0.001 1 49 127
i 8.129 172.375 0.001 1 49 127
i 9.641 172.437 0.001 1 49 127
i 4.184 172.500 0.001 1 37 127
i 9.642 172.500 0.001 1 49 127
i 7.136 172.500 0.001 1 39 127
i 8.130 172.500 0.001 1 49 127
i 9.643 172.561 0.001 1 49 127
i 8.131 172.624 0.001 1 49 127
i 9.644 172.624 0.001 1 49 127
i 9.645 172.687 0.001 1 49 127
i 8.132 172.749 0.001 1 49 127
i 9.646 172.749 0.001 1 49 127
i -11.255 172.756 0
i 11.256 172.759 -1.000 1 38 80
i 9.647 172.812 0.001 1 49 127
i 8.133 172.875 0.001 1 49 127
i 9.648 172.875 0.001 1 49 127
i 9.649 172.937 0.001 1 49 127
i -16.007 172.999 0
i -16.008 172.999 0
i -16.009 172.999 0
i 4.185 173.000 0.001 1 37 127
i 8.134 173.000 0.001 1 49 127
i 9.650 173.000 0.001 1 49 127
i 10.173 173.000 -1.000 1 72 127
i 10.174 173.000 -1.000 1 76 127
i 9.651 173.061 0.001 1 49 127
i 9.652 173.124 0.001 1 49 127
i 8.135 173.124 0.001 1 49 127
i 9.653 173.187 0.001 1 49 127
i 11.257 173.205 -1.000 1 33 79
i -11.256 173.229 0
i 8.136 173.249 0.001 1 49 127
i 9.654 173.249 0.001 1 49 127
i 9.655 173.312 0.001 1 49 127
i 9.656 173.375 0.001 1 49 127
i 8.137 173.375 0.001 1 49 127
i 9.657 173.437 0.001 1 49 127
i -15.042 173.499 0
i 4.186 173.500 0.001 1 37 127
i 8.138 173.500 0.001 1 49 127
i 7.137 173.500 0.001 1 39 127
i 9.658 173.500 0.001 1 49 127
i 11.258 173.507 -1.000 1 36 89
i -11.257 173.508 0
i 9.659 173.561 0.001 1 49 127
i 8.139 173.624 0.001 1 49 127
i 9.660 173.624 0.001 1 49 127
i 9.661 173.687 0.001 1 49 127
i 6.111 173.749 0.001 1 37 127
i 8.140 173.749 0.001 1 49 127
i 9.662 173.749 0.001 1 49 127
i 5.111 173.749 0.001 1 37 127
i 9.663 173.812 0.001 1 49 127
i 8.141 173.875 0.001 1 49 113
i 9.664 173.875 0.001 1 49 127
i 9.665 173.937 0.001 1 49 127
i 14.061 173.991 -1.000 1 62 78
i 14.062 173.991 -1.000 1 65 94
i 8.142 174.000 0.001 1 49 127
i 4.187 174.000 0.001 1 37 127
i 6.112 174.000 0.001 1 37 127
i -10.173 174.000 0
i -10.174 174.000 0
i 15.043 173.992 -1.000 1 53 80
i 16 173.993 1 4 12 3.00
i -11.258 173.999 0
i 9.666 174.000 0.001 1 49 127
i 13.205 174.000 -1.000 1 91 127
i 5.112 174.000 0.001 1 37 127
i 11.259 174.000 -1.000 1 38 81
i 16.010 174.000 -1.000 1 98 127
i 16.011 174.000 -1.000 1 101 127
i 16.012 174.000 -1.000 1 105 127
i -14.059 174.044 0
i -14.060 174.044 0
i 9.667 174.061 0.001 1 49 127
i 9.668 174.124 0.001 1 49 127
i 8.143 174.124 0.001 1 49 127
i -13.205 174.124 0
i 13.206 174.124 -1.000 1 93 127
i 9.669 174.187 0.001 1 49 127
i 8.144 174.249 0.001 1 49 127
i 9.670 174.249 0.001 1 49 127
i -13.206 174.249 0
i 13.207 174.249 -1.000 1 89 127
i 9.671 174.312 0.001 1 49 127
i 8.145 174.375 0.001 1 49 127
i -13.207 174.375 0
i 9.672 174.375 0.001 1 49 127
i 13.208 174.375 -1.000 1 91 127
i 9.673 174.437 0.001 1 49 127
i 9.674 174.500 0.001 1 49 127
i 8.146 174.500 0.001 1 49 127
i -13.208 174.500 0
i 13.209 174.500 -1.000 1 93 127
i 4.188 174.500 0.001 1 37 127
i 7.138 174.500 0.001 1 39 127
i 9.675 174.561 0.001 1 49 127
i 8.147 174.624 0.001 1 49 127
i 9.676 174.624 0.001 1 49 127
i -13.209 174.624 0
i 13.210 174.624 -1.000 1 89 127
i 9.677 174.687 0.001 1 49 127
i 11.260 174.737 -1.000 1 41 89
i -11.259 174.744 0
i -13.210 174.749 0
i 13.211 174.749 -1.000 1 91 127
i 8.148 174.749 0.001 1 49 127
i 9.678 174.749 0.001 1 49 127
i 9.679 174.812 0.001 1 49 127
i -13.211 174.875 0
i 8.149 174.875 0.001 1 49 127
i 13.212 174.875 -1.000 1 93 127
i 9.680 174.875 0.001 1 49 127
i 9.681 174.937 0.001 1 49 127
i 9.682 175.000 0.001 1 49 127
i 8.150 175.000 0.001 1 49 127
i 10.175 175.000 -1.000 1 72 127
i 4.189 175.000 0.001 1 37 127
i 10.176 175.000 -1.000 1 76 127
i -13.212 175.000 0
i 13.213 175.000 -1.000 1 89 127
i 9.683 175.061 0.001 1 49 127
i 8.151 175.124 0.001 1 49 127
i 9.684 175.124 0.001 1 49 127
i -13.213 175.124 0
i 13.214 175.124 -1.000 1 91 127
i 9.685 175.187 0.001 1 49 127
i 8.152 175.249 0.001 1 49 127
i 9.686 175.249 0.001 1 49 127
i -13.214 175.249 0
i 13.215 175.249 -1.000 1 93 127
i 11.261 175.255 -1.000 1 38 68
i -11.260 175.260 0
i 9.687 175.312 0.001 1 49 127
i -13.215 175.375 0
i 13.216 175.375 -1.000 1 89 127
i 9.688 175.375 0.001 1 49 127
i 8.153 175.375 0.001 1 49 127
i 9.689 175.437 0.001 1 49 127
i 8.154 175.500 0.001 1 49 127
i 9.690 175.500 0.001 1 49 127
i 11.262 175.501 -1.000 1 41 78
i -13.216 175.500 0
i 13.217 175.500 -1.000 1 91 127
i 4.190 175.500 0.001 1 37 127
i 7.139 175.500 0.001 1 39 127
i -11.261 175.509 0
i 9.691 175.561 0.001 1 49 127
i 8.155 175.624 0.001 1 49 127
i 9.692 175.624 0.001 1 49 127
i -13.217 175.624 0
i 13.218 175.624 -1.000 1 93 127
i 9.693 175.687 0.001 1 49 127
i 8.156 175.749 0.001 1 49 127
i 5.113 175.749 0.001 1 37 127
i 6.113 175.749 0.001 1 37 127
i 9.694 175.749 0.001 1 49 127
i -13.218 175.749 0
i 13.219 175.749 -1.000 1 89 127
i 9.695 175.812 0.001 1 49 127
i -13.219 175.875 0
i 13.220 175.875 -1.000 1 91 127
i 8.157 175.875 0.001 1 49 113
i 9.696 175.875 0.001 1 49 127
i 9.697 175.937 0.001 1 49 127
i 14.063 175.983 -1.000 1 64 85
i 14.064 175.984 -1.000 1 67 78
i 15.044 175.988 -1.000 1 55 103
i 6.114 176.000 0.001 1 37 127
i 5.114 176.000 0.001 1 37 127
i -13.220 176.000 0
i 8.158 176.000 0.001 1 49 127
i -15.043 176.000 0
i 13.221 176.000 -1.000 1 93 127
i 4.191 176.000 0.001 1 37 127
i -10.175 175.999 0
i -10.176 175.999 0
i 9.698 176.000 0.001 1 49 127
i 11.263 176.012 -1.000 1 38 78
i -11.262 176.031 0
i -14.061 176.045 0
i -14.062 176.045 0
i 9.699 176.061 0.001 1 49 127
i -13.221 176.124 0
i 8.159 176.124 0.001 1 49 127
i 9.700 176.124 0.001 1 49 127
i 9.701 176.187 0.001 1 49 127
i 8.160 176.249 0.001 1 49 127
i 9.702 176.249 0.001 1 49 127
i 9.703 176.312 0.001 1 49 127
i 8.161 176.375 0.001 1 49 127
i 9.704 176.375 0.001 1 49 127
i 9.705 176.437 0.001 1 49 127
i 4.192 176.500 0.001 1 37 127
i 7.140 176.500 0.001 1 39 127
i 8.162 176.500 0.001 1 49 127
i 9.706 176.500 0.001 1 49 127
i 9.707 176.561 0.001 1 49 127
i 9.708 176.624 0.001 1 49 127
i 8.163 176.624 0.001 1 49 127
i 9.709 176.687 0.001 1 49 127
i 8.164 176.749 0.001 1 49 127
i 9.710 176.749 0.001 1 49 127
i 11.264 176.760 -1.000 1 36 86
i -11.263 176.768 0
i 9.711 176.812 0.001 1 49 127
i 9.712 176.875 0.001 1 49 127
i 8.165 176.875 0.001 1 49 127
i 9.713 176.937 0.001 1 49 127
i 4.193 177.000 0.001 1 37 127
i 8.166 177.000 0.001 1 49 127
i 10.177 177.000 -1.000 1 72 127
i 10.178 177.000 -1.000 1 76 127
i 9.714 177.000 0.001 1 49 127
i 9.715 177.061 0.001 1 49 127
i 8.167 177.124 0.001 1 49 127
i 9.716 177.124 0.001 1 49 127
i 9.717 177.187 0.001 1 49 127
i 8.168 177.249 0.001 1 49 127
i 9.718 177.249 0.001 1 49 127
i -11.264 177.257 0
i 11.265 177.259 -1.000 1 33 74
i 9.719 177.312 0.001 1 49 127
i 8.169 177.375 0.001 1 49 127
i 9.720 177.375 0.001 1 49 127
i 9.721 177.437 0.001 1 49 127
i 9.722 177.500 0.001 1 49 127
i 8.170 177.500 0.001 1 49 127
i 4.194 177.500 0.001 1 37 127
i 7.141 177.500 0.001 1 39 127
i 11.266 177.508 -1.000 1 36 91
i -11.265 177.517 0
i 9.723 177.561 0.001 1 49 127
i 8.171 177.624 0.001 1 49 127
i 9.724 177.624 0.001 1 49 127
i 9.725 177.687 0.001 1 49 127
i 5.115 177.749 0.001 1 37 127
i 6.115 177.749 0.001 1 37 127
i 8.172 177.749 0.001 1 49 127
i 9.726 177.749 0.001 1 49 127
i 9.727 177.812 0.001 1 49 127
i 9.728 177.875 0.001 1 49 127
i 8.173 177.875 0.001 1 49 113
i 9.729 177.937 0.001 1 49 127
i 14.065 177.975 -1.000 1 69 79
i 14.066 177.975 -1.000 1 65 90
i 15.045 177.985 -1.000 1 57 99
i 9.730 178.000 0.001 1 49 127
i 8.174 178.000 0.001 1 49 127
i -15.044 178.000 0
i -10.177 178.000 0
i -11.266 177.999 0
i -10.178 178.000 0
i 11.267 178.000 -1.000 1 38 83
i 4.195 178.000 0.001 1 37 127
i 5.116 178.000 0.001 1 37 127
i 6.116 178.000 0.001 1 37 127
i -14.063 178.017 0
i -14.064 178.017 0
i 9.731 178.061 0.001 1 49 127
i 9.732 178.124 0.001 1 49 127
i 8.175 178.124 0.001 1 49 127
i 9.733 178.187 0.001 1 49 127
i 8.176 178.249 0.001 1 49 127
i 9.734 178.249 0.001 1 49 127
i 9.735 178.312 0.001 1 49 127
i 8.177 178.375 0.001 1 49 127
i 9.736 178.375 0.001 1 49 127
i 9.737 178.437 0.001 1 49 127
i 4.196 178.500 0.001 1 37 127
i 7.142 178.500 0.001 1 39 127
i 8.178 178.500 0.001 1 49 127
i 9.738 178.500 0.001 1 49 127
i 9.739 178.561 0.001 1 49 127
i 9.740 178.624 0.001 1 49 127
i 8.179 178.624 0.001 1 49 127
i 9.741 178.687 0.001 1 49 127
i 11.268 178.737 -1.000 1 41 103
i 8.180 178.749 0.001 1 49 127
i 9.742 178.749 0.001 1 49 127
i -11.267 178.756 0
i 9.743 178.812 0.001 1 49 127
i 8.181 178.875 0.001 1 49 127
i 9.744 178.875 0.001 1 49 127
i 9.745 178.937 0.001 1 49 127
i 4.197 179.000 0.001 1 37 127
i 8.182 179.000 0.001 1 49 127
i 9.746 179.000 0.001 1 49 127
i 10.179 179.000 -1.000 1 72 127
i 10.180 179.000 -1.000 1 76 127
i 9.747 179.061 0.001 1 49 127
i 8.183 179.124 0.001 1 49 127
i 9.748 179.124 0.001 1 49 127
i 9.749 179.187 0.001 1 49 127
i 11.269 179.223 -1.000 1 44 76
i -11.268 179.235 0
i 8.184 179.249 0.001 1 49 127
i 9.750 179.249 0.001 1 49 127
i 9.751 179.312 0.001 1 49 127
i 8.185 179.375 0.001 1 49 127
i 9.752 179.375 0.001 1 49 127
i 9.753 179.437 0.001 1 49 127
i 9.754 179.500 0.001 1 49 127
i 8.186 179.500 0.001 1 49 127
i 4.198 179.500 0.001 1 37 127
i 7.143 179.500 0.001 1 39 127
i -11.269 179.523 0
i 11.270 179.523 -1.000 1 43 89
i 9.755 179.561 0.001 1 49 127
i 8.187 179.624 0.001 1 49 127
i 9.756 179.624 0.001 1 49 127
i 9.757 179.687 0.001 1 49 127
i 6.117 179.749 0.001 1 37 127
i 5.117 179.749 0.001 1 37 127
i 8.188 179.749 0.001 1 49 127
i 9.758 179.749 0.001 1 49 127
i 9.759 179.812 0.001 1 49 127
i 8.189 179.875 0.001 1 49 113
i 9.760 179.875 0.001 1 49 127
i 9.761 179.937 0.001 1 49 127
i 14.067 179.985 -1.000 1 69 92
i 14.068 179.985 -1.000 1 72 81
i 15.046 179.987 -1.000 1 60 78
i -14.065 179.991 0
i 8.190 180.000 0.001 1 49 127
i -15.045 180.000 0
i -10.179 179.999 0
i -10.180 179.999 0
i 4.199 180.000 0.001 1 37 127
i 6.118 180.000 0.001 1 37 127
i 9.762 180.000 0.001 1 49 127
i -14.066 180.000 0
i -11.270 179.997 0
i 11.271 179.997 -1.000 1 41 97
i 5.118 180.000 0.001 1 37 127
i 9.763 180.061 0.001 1 49 127
i 8.191 180.124 0.001 1 49 127
i 9.764 180.124 0.001 1 49 127
i 9.765 180.187 0.001 1 49 127
i 9.766 180.249 0.001 1 49 127
i 8.192 180.249 0.001 1 49 127
i 9.767 180.312 0.001 1 49 127
i 8.193 180.375 0.001 1 49 127
i 9.768 180.375 0.001 1 49 127
i 9.769 180.437 0.001 1 49 127
i 8.194 180.500 0.001 1 49 127
i 4.200 180.500 0.001 1 37 127
i 9.770 180.500 0.001 1 49 127
i 7.144 180.500 0.001 1 39 127
i 9.771 180.561 0.001 1 49 127
i 8.195 180.624 0.001 1 49 127
i 9.772 180.624 0.001 1 49 127
i 9.773 180.687 0.001 1 49 127
i 8.196 180.749 0.001 1 49 127
i 9.774 180.749 0.001 1 49 127
i -11.271 180.756 0
i 11.272 180.759 -1.000 1 38 80
i 9.775 180.812 0.001 1 49 127
i 8.197 180.875 0.001 1 49 127
i 9.776 180.875 0.001 1 49 127
i 9.777 180.937 0.001 1 49 127
i 15.047 180.981 -1.000 1 55 79
i 14.069 180.991 -1.000 1 64 78
i 14.070 180.991 -1.000 1 60 74
i -15.046 181.000 0
i 4.201 181.000 0.001 1 37 127
i 9.778 181.000 0.001 1 49 127
i 10.181 181.000 -1.000 1 72 127
i 8.198 181.000 0.001 1 49 127
i 10.182 181.000 -1.000 1 76 127
i 9.779 181.061 0.001 1 49 127
i 9.780 181.124 0.001 1 49 127
i 8.199 181.124 0.001 1 49 127
i -14.067 181.187 0
i 9.781 181.187 0.001 1 49 127
i 11.273 181.205 -1.000 1 33 79
i -11.272 181.229 0
i 9.782 181.249 0.001 1 49 127
i 8.200 181.249 0.001 1 49 127
i 9.783 181.312 0.001 1 49 127
i 8.201 181.375 0.001 1 49 127
i 9.784 181.375 0.001 1 49 127
i 9.785 181.437 0.001 1 49 127
i 7.145 181.500 0.001 1 39 127
i 8.202 181.500 0.001 1 49 127
i 4.202 181.500 0.001 1 37 127
i 9.786 181.500 0.001 1 49 127
i 11.274 181.507 -1.000 1 36 89
i -11.273 181.508 0
i 9.787 181.561 0.001 1 49 127
i 8.203 181.624 0.001 1 49 127
i 9.788 181.624 0.001 1 49 127
i 9.789 181.687 0.001 1 49 127
i 6.119 181.749 0.001 1 37 127
i 9.790 181.749 0.001 1 49 127
i 8.204 181.749 0.001 1 49 127
i 5.119 181.749 0.001 1 37 127
i 9.791 181.812 0.001 1 49 127
i 8.205 181.875 0.001 1 49 113
i 9.792 181.875 0.001 1 49 127
i 9.793 181.937 0.001 1 49 127
i 15.048 181.969 -1.000 1 57 84
i 14.071 181.989 -1.000 1 65 76
i 14.072 181.992 -1.000 1 62 78
i 8.206 182.000 0.001 1 49 127
i 9.794 182.000 0.001 1 49 127
i 13.222 182.000 -1.000 1 91 127
i -10.181 182.000 0
i -11.274 181.999 0
i -10.182 182.000 0
i 11.275 182.000 -1.000 1 38 81
i -15.047 182.000 0
i 4.203 182.000 0.001 1 37 127
i 5.120 182.000 0.001 1 37 127
i 6.120 182.000 0.001 1 37 127
i 9.795 182.061 0.001 1 49 127
i 9.796 182.124 0.001 1 49 127
i 8.207 182.124 0.001 1 49 127
i -13.222 182.124 0
i 13.223 182.124 -1.000 1 93 127
i -14.068 182.132 0
i -14.069 182.132 0
i -14.070 182.132 0
i 9.797 182.187 0.001 1 49 127
i -13.223 182.249 0
i 13.224 182.249 -1.000 1 89 127
i 8.208 182.249 0.001 1 49 127
i 9.798 182.249 0.001 1 49 127
i 9.799 182.312 0.001 1 49 127
i -13.224 182.375 0
i 13.225 182.375 -1.000 1 91 127
i 8.209 182.375 0.001 1 49 127
i 9.800 182.375 0.001 1 49 127
i 9.801 182.437 0.001 1 49 127
i 7.146 182.500 0.001 1 39 127
i 8.210 182.500 0.001 1 49 127
i 4.204 182.500 0.001 1 37 127
i 9.802 182.500 0.001 1 49 127
i -13.225 182.500 0
i 13.226 182.500 -1.000 1 93 127
i 9.803 182.561 0.001 1 49 127
i 9.804 182.624 0.001 1 49 127
i 8.211 182.624 0.001 1 49 127
i -13.226 182.624 0
i 13.227 182.624 -1.000 1 89 127
i 9.805 182.687 0.001 1 49 127
i 11.276 182.737 -1.000 1 41 89
i -11.275 182.744 0
i -13.227 182.749 0
i 13.228 182.749 -1.000 1 91 127
i 8.212 182.749 0.001 1 49 127
i 9.806 182.749 0.001 1 49 127
i 9.807 182.812 0.001 1 49 127
i 8.213 182.875 0.001 1 49 127
i 9.808 182.875 0.001 1 49 127
i -13.228 182.875 0
i 13.229 182.875 -1.000 1 93 127
i 9.809 182.937 0.001 1 49 127
i 4.205 183.000 0.001 1 37 127
i -13.229 183.000 0
i 13.230 183.000 -1.000 1 89 127
i 8.214 183.000 0.001 1 49 127
i 9.810 183.000 0.001 1 49 127
i 10.183 183.000 -1.000 1 72 127
i 10.184 183.000 -1.000 1 76 127
i 9.811 183.061 0.001 1 49 127
i -13.230 183.124 0
i 13.231 183.124 -1.000 1 91 127
i 8.215 183.124 0.001 1 49 127
i 9.812 183.124 0.001 1 49 127
i 9.813 183.187 0.001 1 49 127
i -13.231 183.249 0
i 8.216 183.249 0.001 1 49 127
i 13.232 183.249 -1.000 1 93 127
i 9.814 183.249 0.001 1 49 127
i 11.277 183.255 -1.000 1 38 68
i -11.276 183.260 0
i 9.815 183.312 0.001 1 49 127
i 9.816 183.375 0.001 1 49 127
i 8.217 183.375 0.001 1 49 127
i -13.232 183.375 0
i 13.233 183.375 -1.000 1 89 127
i 9.817 183.437 0.001 1 49 127
i 7.147 183.500 0.001 1 39 127
i 8.218 183.500 0.001 1 49 127
i 4.206 183.500 0.001 1 37 127
i -13.233 183.500 0
i 13.234 183.500 -1.000 1 91 127
i 9.818 183.500 0.001 1 49 127
i 11.278 183.501 -1.000 1 41 78
i -11.277 183.509 0
i 9.819 183.561 0.001 1 49 127
i -13.234 183.624 0
i 13.235 183.624 -1.000 1 93 127
i 8.219 183.624 0.001 1 49 127
i 9.820 183.624 0.001 1 49 127
i 9.821 183.687 0.001 1 49 127
i 8.220 183.749 0.001 1 49 127
i 6.121 183.749 0.001 1 37 127
i 9.822 183.749 0.001 1 49 127
i 5.121 183.749 0.001 1 37 127
i -13.235 183.749 0
i 13.236 183.749 -1.000 1 89 127
i 9.823 183.812 0.001 1 49 127
i 9.824 183.875 0.001 1 49 127
i 8.221 183.875 0.001 1 49 113
i -13.236 183.875 0
i 13.237 183.875 -1.000 1 91 127
i 9.825 183.937 0.001 1 49 127
i 4.207 184.000 0.001 1 37 127
i -13.237 184.000 0
i 13.238 184.000 -1.000 1 93 127
i 5.122 184.000 0.001 1 37 127
i 6.122 184.000 0.001 1 37 127
i 8.222 184.000 0.001 1 49 127
i 9.826 184.000 0.001 1 49 127
i -10.183 183.999 0
i -10.184 183.999 0
i 11.279 184.012 -1.000 1 38 78
i -11.278 184.031 0
i 9.827 184.061 0.001 1 49 127
i -13.238 184.124 0
i 8.223 184.124 0.001 1 49 127
i 9.828 184.124 0.001 1 49 127
i 9.829 184.187 0.001 1 49 127
i 9.830 184.249 0.001 1 49 127
i 8.224 184.249 0.001 1 49 127
i 9.831 184.312 0.001 1 49 127
i 8.225 184.375 0.001 1 49 127
i 9.832 184.375 0.001 1 49 127
i 9.833 184.437 0.001 1 49 127
i 4.208 184.500 0.001 1 37 127
i 7.148 184.500 0.001 1 39 127
i 8.226 184.500 0.001 1 49 127
i 9.834 184.500 0.001 1 49 127
i 9.835 184.561 0.001 1 49 127
i 8.227 184.624 0.001 1 49 127
i 9.836 184.624 0.001 1 49 127
i 9.837 184.687 0.001 1 49 127
i 8.228 184.749 0.001 1 49 127
i 9.838 184.749 0.001 1 49 127
i 11.280 184.760 -1.000 1 36 86
i -11.279 184.768 0
i 9.839 184.812 0.001 1 49 127
i 8.229 184.875 0.001 1 49 127
i 9.840 184.875 0.001 1 49 127
i 9.841 184.937 0.001 1 49 127
i 4.209 185.000 0.001 1 37 127
i 9.842 185.000 0.001 1 49 127
i 10.185 185.000 -1.000 1 72 127
i 8.230 185.000 0.001 1 49 127
i 10.186 185.000 -1.000 1 76 127
i 9.843 185.061 0.001 1 49 127
i 8.231 185.124 0.001 1 49 127
i 9.844 185.124 0.001 1 49 127
i 9.845 185.187 0.001 1 49 127
i 8.232 185.249 0.001 1 49 127
i 9.846 185.249 0.001 1 49 127
i -11.280 185.257 0
i 11.281 185.259 -1.000 1 33 74
i 9.847 185.312 0.001 1 49 127
i 8.233 185.375 0.001 1 49 127
i 9.848 185.375 0.001 1 49 127
i 9.849 185.437 0.001 1 49 127
i 4.210 185.500 0.001 1 37 127
i 7.149 185.500 0.001 1 39 127
i 8.234 185.500 0.001 1 49 127
i 9.850 185.500 0.001 1 49 127
i 11.282 185.508 -1.000 1 36 91
i -11.281 185.517 0
i 9.851 185.561 0.001 1 49 127
i 9.852 185.624 0.001 1 49 127
i 8.235 185.624 0.001 1 49 127
i 9.853 185.687 0.001 1 49 127
i 8.236 185.749 0.001 1 49 127
i 5.123 185.749 0.001 1 37 127
i 6.123 185.749 0.001 1 37 127
i 9.854 185.749 0.001 1 49 127
i 9.855 185.812 0.001 1 49 127
i 8.237 185.875 0.001 1 49 113
i 9.856 185.875 0.001 1 49 127
i 9.857 185.937 0.001 1 49 127
i 14.073 185.979 -1.000 1 62 66
i 14.074 185.980 -1.000 1 65 72
i 4.211 186.000 0.001 1 37 127
i 5.124 186.000 0.001 1 37 127
i -11.282 185.999 0
i 11.283 186.000 -1.000 1 38 83
i 8.238 186.000 0.001 1 49 127
i 6.124 186.000 0.001 1 37 127
i -10.185 186.000 0
i -10.186 186.000 0
i 9.858 186.000 0.001 1 49 127
i -14.071 186.056 0
i -14.072 186.056 0
i 9.859 186.061 0.001 1 49 127
i 9.860 186.124 0.001 1 49 127
i 8.239 186.124 0.001 1 49 127
i 9.861 186.187 0.001 1 49 127
i 8.240 186.249 0.001 1 49 127
i 9.862 186.249 0.001 1 49 127
i 9.863 186.312 0.001 1 49 127
i 8.241 186.375 0.001 1 49 127
i 9.864 186.375 0.001 1 49 127
i 9.865 186.437 0.001 1 49 127
i 4.212 186.500 0.001 1 37 127
i 7.150 186.500 0.001 1 39 127
i 8.242 186.500 0.001 1 49 127
i 9.866 186.500 0.001 1 49 127
i 9.867 186.561 0.001 1 49 127
i 8.243 186.624 0.001 1 49 127
i 9.868 186.624 0.001 1 49 127
i 9.869 186.687 0.001 1 49 127
i 11.284 186.737 -1.000 1 41 103
i 8.244 186.749 0.001 1 49 127
i 9.870 186.749 0.001 1 49 127
i -11.283 186.756 0
i 9.871 186.812 0.001 1 49 127
i 9.872 186.875 0.001 1 49 127
i 8.245 186.875 0.001 1 49 127
i 9.873 186.937 0.001 1 49 127
i 8.246 187.000 0.001 1 49 127
i 4.213 187.000 0.001 1 37 127
i 9.874 187.000 0.001 1 49 127
i 10.187 187.000 -1.000 1 72 127
i 10.188 187.000 -1.000 1 76 127
i 9.875 187.061 0.001 1 49 127
i 9.876 187.124 0.001 1 49 127
i 8.247 187.124 0.001 1 49 127
i 9.877 187.187 0.001 1 49 127
i 11.285 187.223 -1.000 1 44 76
i -11.284 187.235 0
i 8.248 187.249 0.001 1 49 127
i 9.878 187.249 0.001 1 49 127
i 9.879 187.312 0.001 1 49 127
i 8.249 187.375 0.001 1 49 127
i 9.880 187.375 0.001 1 49 127
i 9.881 187.437 0.001 1 49 127
i 7.151 187.500 0.001 1 39 127
i 8.250 187.500 0.001 1 49 127
i 9.882 187.500 0.001 1 49 127
i 4.214 187.500 0.001 1 37 127
i -11.285 187.523 0
i 11.286 187.523 -1.000 1 43 89
i 9.883 187.561 0.001 1 49 127
i 8.251 187.624 0.001 1 49 127
i 9.884 187.624 0.001 1 49 127
i 9.885 187.687 0.001 1 49 127
i 5.125 187.749 0.001 1 37 127
i 6.125 187.749 0.001 1 37 127
i 8.252 187.749 0.001 1 49 127
i 9.886 187.749 0.001 1 49 127
i 9.887 187.812 0.001 1 49 127
i 8.253 187.875 0.001 1 49 113
i 9.888 187.875 0.001 1 49 127
i 9.889 187.937 0.001 1 49 127
i -11.286 187.997 0
i 11.287 187.997 -1.000 1 41 97
i 6.126 188.000 0.001 1 37 127
i 9.890 188.000 0.001 1 49 127
i -10.187 187.999 0
i -10.188 187.999 0
i 8.254 188.000 0.001 1 49 127
i 4.215 188.000 0.001 1 37 127
i 5.126 188.000 0.001 1 37 127
i 9.891 188.061 0.001 1 49 127
i 8.255 188.124 0.001 1 49 127
i 9.892 188.124 0.001 1 49 127
i 9.893 188.187 0.001 1 49 127
i 9.894 188.249 0.001 1 49 127
i 8.256 188.249 0.001 1 49 127
i 9.895 188.312 0.001 1 49 127
i 8.257 188.375 0.001 1 49 127
i 9.896 188.375 0.001 1 49 127
i 9.897 188.437 0.001 1 49 127
i 8.258 188.500 0.001 1 49 127
i 7.152 188.500 0.001 1 39 127
i 4.216 188.500 0.001 1 37 127
i 9.898 188.500 0.001 1 49 127
i 9.899 188.561 0.001 1 49 127
i 8.259 188.624 0.001 1 49 127
i 9.900 188.624 0.001 1 49 127
i 9.901 188.687 0.001 1 49 127
i 9.902 188.749 0.001 1 49 127
i 8.260 188.749 0.001 1 49 127
i -11.287 188.756 0
i 11.288 188.759 -1.000 1 38 80
i 9.903 188.812 0.001 1 49 127
i 8.261 188.875 0.001 1 49 127
i 9.904 188.875 0.001 1 49 127
i 9.905 188.937 0.001 1 49 127
i 4.217 189.000 0.001 1 37 127
i 9.906 189.000 0.001 1 49 127
i 8.262 189.000 0.001 1 49 127
i 10.189 189.000 -1.000 1 72 127
i 10.190 189.000 -1.000 1 76 127
i 9.907 189.061 0.001 1 49 127
i 8.263 189.124 0.001 1 49 127
i 9.908 189.124 0.001 1 49 127
i 9.909 189.187 0.001 1 49 127
i 11.289 189.205 -1.000 1 33 79
i -11.288 189.229 0
i 8.264 189.249 0.001 1 49 127
i 9.910 189.249 0.001 1 49 127
i 9.911 189.312 0.001 1 49 127
i 8.265 189.375 0.001 1 49 127
i 9.912 189.375 0.001 1 49 127
i 9.913 189.437 0.001 1 49 127
i 4.218 189.500 0.001 1 37 127
i 7.153 189.500 0.001 1 39 127
i 8.266 189.500 0.001 1 49 127
i 9.914 189.500 0.001 1 49 127
i 11.290 189.507 -1.000 1 36 89
i -11.289 189.508 0
i 9.915 189.561 0.001 1 49 127
i 8.267 189.624 0.001 1 49 127
i 9.916 189.624 0.001 1 49 127
i 9.917 189.687 0.001 1 49 127
i 9.918 189.749 0.001 1 49 127
i 8.268 189.749 0.001 1 49 127
i 5.127 189.749 0.001 1 37 127
i 6.127 189.749 0.001 1 37 127
i 9.919 189.812 0.001 1 49 127
i 8.269 189.875 0.001 1 49 113
i 9.920 189.875 0.001 1 49 127
i 9.921 189.937 0.001 1 49 127
i 14.075 189.960 -1.000 1 62 70
i 14.076 189.971 -1.000 1 65 72
i 13.239 190.000 -1.000 1 91 127
i 5.128 190.000 0.001 1 37 127
i 9.922 190.000 0.001 1 49 127
i -10.189 190.000 0
i 6.128 190.000 0.001 1 37 127
i -10.190 190.000 0
i -11.290 189.999 0
i 11.291 190.000 -1.000 1 38 83
i -14.073 190.012 0
i -14.074 190.012 0
i 9.923 190.061 0.001 1 49 127
i -13.239 190.124 0
i 13.240 190.124 -1.000 1 93 127
i 9.924 190.124 0.001 1 49 127
i 9.925 190.187 0.001 1 49 127
i -13.240 190.249 0
i 9.926 190.249 0.001 1 49 127
i 13.241 190.249 -1.000 1 89 127
i -11.291 190.312 0
i 9.927 190.312 0.001 1 49 127
i -13.241 190.375 0
i 13.242 190.375 -1.000 1 91 127
i 9.928 190.375 0.001 1 49 127
i 9.929 190.437 0.001 1 49 127
i 9.930 190.500 0.001 1 49 127
i -13.242 190.500 0
i 13.243 190.500 -1.000 1 93 127
i 9.931 190.561 0.001 1 49 127
i -13.243 190.624 0
i 13.244 190.624 -1.000 1 89 127
i 9.932 190.624 0.001 1 49 127
i 9.933 190.687 0.001 1 49 127
i 9.934 190.749 0.001 1 49 127
i -13.244 190.749 0
i 13.245 190.749 -1.000 1 91 127
i 9.935 190.812 0.001 1 49 127
i 9.936 190.875 0.001 1 49 127
i -13.245 190.875 0
i 13.246 190.875 -1.000 1 93 127
i 9.937 190.937 0.001 1 49 127
i -13.246 191.000 0
i 13.247 191.000 -1.000 1 89 127
i 9.938 191.000 0.001 1 49 127
i 10.191 191.000 -1.000 1 72 127
i 10.192 191.000 -1.000 1 76 127
i 9.939 191.061 0.001 1 49 127
i 9.940 191.124 0.001 1 49 127
i -13.247 191.124 0
i 13.248 191.124 -1.000 1 91 127
i 9.941 191.187 0.001 1 49 127
i 9.942 191.249 0.001 1 49 127
i -13.248 191.249 0
i 13.249 191.249 -1.000 1 93 127
i 9.943 191.312 0.001 1 49 127
i 9.944 191.375 0.001 1 49 127
i -13.249 191.375 0
i 13.250 191.375 -1.000 1 89 127
i 9.945 191.437 0.001 1 49 127
i -13.250 191.500 0
i 13.251 191.500 -1.000 1 91 127
i 9.946 191.500 0.001 1 49 127
i 9.947 191.561 0.001 1 49 127
i -13.251 191.624 0
i 13.252 191.624 -1.000 1 93 127
i 9.948 191.624 0.001 1 49 127
i 9.949 191.687 0.001 1 49 127
i -13.252 191.749 0
i 13.253 191.749 -1.000 1 89 127
i 6.129 191.749 0.001 1 37 127
i 5.129 191.749 0.001 1 37 127
i 9.950 191.749 0.001 1 49 127
i 9.951 191.812 0.001 1 49 127
i 9.952 191.875 0.001 1 49 127
i -13.253 191.875 0
i 13.254 191.875 -1.000 1 91 127
i 9.953 191.937 0.001 1 49 127
i 5.130 192.000 0.001 1 37 127
i -13.254 192.000 0
i 13.255 192.000 -1.000 1 93 127
i -10.191 191.999 0
i 6.130 192.000 0.001 1 37 127
i -10.192 191.999 0
i 9.954 192.000 0.001 1 49 127
i 9.955 192.061 0.001 1 49 127
i -13.255 192.124 0
i 9.956 192.124 0.001 1 49 127
i 9.957 192.187 0.001 1 49 127
i 9.958 192.249 0.001 1 49 127
i 9.959 192.312 0.001 1 49 127
i 9.960 192.375 0.001 1 49 127
i 9.961 192.437 0.001 1 49 127
i 9.962 192.500 0.001 1 49 127
i 9.963 192.561 0.001 1 49 127
i 9.964 192.624 0.001 1 49 127
i 9.965 192.687 0.001 1 49 127
i 9.966 192.749 0.001 1 49 127
i 9.967 192.812 0.001 1 49 127
i 9.968 192.875 0.001 1 49 127
i 9.969 192.937 0.001 1 49 127
i 10.193 193.000 -1.000 1 72 127
i 10.194 193.000 -1.000 1 76 127
i 9.970 193.000 0.001 1 49 127
i 9.971 193.061 0.001 1 49 127
i 9.972 193.124 0.001 1 49 127
i 9.973 193.187 0.001 1 49 127
i 9.974 193.249 0.001 1 49 127
i 9.975 193.312 0.001 1 49 127
i 9.976 193.375 0.001 1 49 127
i 9.977 193.437 0.001 1 49 127
i -15.048 193.499 0
i 9.978 193.500 0.001 1 49 127
i 9.979 193.561 0.001 1 49 127
i 9.980 193.624 0.001 1 49 127
i 9.981 193.687 0.001 1 49 127
i 9.982 193.749 0.001 1 49 127
i 9.983 193.812 0.001 1 49 127
i 9.984 193.875 0.001 1 49 127
i 9.985 193.937 0.001 1 49 127
i 14.077 193.981 -1.000 1 62 66
i 14.078 193.981 -1.000 1 65 69
i 6.131 194.000 0.001 1 37 127
i 5.131 194.000 0.001 1 37 127
i 9.986 194.000 0.001 1 49 127
i -10.193 194.000 0
i -10.194 194.000 0
i 9.987 194.061 0.001 1 49 127
i 9.988 194.124 0.001 1 49 127
i 9.989 194.187 0.001 1 49 127
i -14.075 194.213 0
i -14.076 194.213 0
i 9.990 194.249 0.001 1 49 127
i 9.991 194.312 0.001 1 49 127
i 9.992 194.375 0.001 1 49 127
i 9.993 194.437 0.001 1 49 127
i 9.994 194.500 0.001 1 49 127
i 9.995 194.561 0.001 1 49 127
i 9.996 194.624 0.001 1 49 127
i 9.997 194.687 0.001 1 49 127
i 9.998 194.749 0.001 1 49 127
i 9.999 194.812 0.001 1 49 127
i 9.001 194.875 0.001 1 49 127
i 9.002 194.937 0.001 1 49 127
i 9.003 195.000 0.001 1 49 127
i 10.195 195.000 -1.000 1 72 127
i 10.196 195.000 -1.000 1 76 127
i 9.004 195.061 0.001 1 49 127
i 9.005 195.124 0.001 1 49 127
i 9.006 195.187 0.001 1 49 127
i 9.007 195.249 0.001 1 49 127
i 9.008 195.312 0.001 1 49 127
i 9.009 195.375 0.001 1 49 127
i 9.010 195.437 0.001 1 49 127
i 9.011 195.500 0.001 1 49 127
i 9.012 195.561 0.001 1 49 127
i 9.013 195.624 0.001 1 49 127
i 9.014 195.687 0.001 1 49 127
i 6.132 195.749 0.001 1 37 127
i 5.132 195.749 0.001 1 37 127
i 9.015 195.749 0.001 1 49 127
i 9.016 195.812 0.001 1 49 127
i 9.017 195.875 0.001 1 49 127
i 9.018 195.937 0.001 1 49 127
i -10.195 195.999 0
i 9.019 196.000 0.001 1 49 127
i 5.133 196.000 0.001 1 37 127
i 6.133 196.000 0.001 1 37 127
i -10.196 195.999 0
i -16.010 195.999 0
i -16.011 195.999 0
i -16.012 195.999 0
i 9.020 196.061 0.001 1 49 127
i 9.021 196.124 0.001 1 49 127
i 9.022 196.187 0.001 1 49 127
i 9.023 196.249 0.001 1 49 127
i 9.024 196.312 0.001 1 49 127
i 9.025 196.375 0.001 1 49 127
i 9.026 196.437 0.001 1 49 127
i 9.027 196.500 0.001 1 49 127
i 9.028 196.561 0.001 1 49 127
i 9.029 196.624 0.001 1 49 127
i 9.030 196.687 0.001 1 49 127
i 9.031 196.749 0.001 1 49 127
i 9.032 196.812 0.001 1 49 127
i 9.033 196.875 0.001 1 49 127
i 9.034 196.937 0.001 1 49 127
i 10.197 197.000 -1.000 1 72 127
i 10.198 197.000 -1.000 1 76 127
i 9.035 197.000 0.001 1 49 127
i 9.036 197.061 0.001 1 49 127
i 9.037 197.124 0.001 1 49 127
i 9.038 197.187 0.001 1 49 127
i 9.039 197.249 0.001 1 49 127
i 9.040 197.312 0.001 1 49 127
i 9.041 197.375 0.001 1 49 127
i 9.042 197.437 0.001 1 49 127
i 9.043 197.500 0.001 1 49 127
i 9.044 197.561 0.001 1 49 127
i 9.045 197.624 0.001 1 49 127
i 9.046 197.687 0.001 1 49 127
i 9.047 197.749 0.001 1 49 127
i 9.048 197.812 0.001 1 49 127
i 9.049 197.875 0.001 1 49 127
i 9.050 197.937 0.001 1 49 127
i -10.197 197.999 0
i -10.198 197.999 0
i 16 211.220 1 4 12 1.00
i -14.077 211.243 0
i -14.078 211.243 0
s
i "SendEndedMessage" 5 -1
#ifdef IS_GENERATING_JSON
i "GenerateJson" 0 1
#else
e 6
#end
</CsScore>
</CsoundSynthesizer>
`

export default csdText
