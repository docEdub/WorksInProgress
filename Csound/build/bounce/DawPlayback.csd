



// The first 2 instruments in the playback csd are for initialization and clearing.

<CsoundSynthesizer>
<CsOptions>

--messagelevel=0
; --messagelevel=134
--midi-device=0
--nodisplays
-+rtmidi=null




--nosound


</CsOptions>
<CsInstruments>

giPresetUuidPreallocationCount[] = fillarray( 9, /* instr 4 -- DistanceDelaySynth */ 9, /* instr 5 -- PointSynth */ 0 /* instr 6 -- PowerLineSynth */ )





 #ifndef OUTPUT_CHANNEL_COUNT
 #define OUTPUT_CHANNEL_COUNT #2#
 #end

 #ifndef INTERNAL_CHANNEL_COUNT
 #define INTERNAL_CHANNEL_COUNT #6#
 #end

 #ifndef IS_ANIMATIONS_ONLY
    sr = 48000
    kr = 200
 #else
    sr = 30
    kr = 30
 #end

nchnls = $OUTPUT_CHANNEL_COUNT
0dbfs = 1






 #define INSTANCE_NAME #"TestSynth playback"#






// TODO: This include order is wack. Files starting with af_spatial should be including files starting with af_, not ...
// vice-versa.



//----------------------------------------------------------------------------------------------------------------------
// File: core_global.orc
// 
// Csound globals used in Cabbage plugins and the DAW service.
//----------------------------------------------------------------------------------------------------------------------

 #ifndef CSD_FILE_PATH
    #define CSD_FILE_PATH #"undefined"#
 #end

 #ifndef INSTANCE_NAME
    #define INSTANCE_NAME #"undefined"#
 #end

gS_csdFileName = "undefined"
gS_csdFilePath = $CSD_FILE_PATH
gS_instanceName = $INSTANCE_NAME

gk_i init -1




//----------------------------------------------------------------------------------------------------------------------
// File: log.orc
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------------------------------
// File: string.orc
//
// N.B. The opcodes in log.orc are not available in this file because log.orc includes it.
//----------------------------------------------------------------------------------------------------------------------







opcode string_begins_with, k, SS
    S_string, S_string_beginning xin
    S_substring = strsubk(S_string, 0, strlenk(S_string_beginning))
    k_result = 0
    if (strcmpk(strsubk(S_string, 0, strlenk(S_string_beginning)), S_string_beginning) == 0) then
        k_result = 1
    endif
    xout k_result
endop

opcode filename_from_full_path_i, S, S
    S_fullPath xin
    i_fullPathLength = strlen(S_fullPath)
    ii = i_fullPathLength - 1
    i_found = 0
    while (i_found == 0 && 0 < ii) do
        i_char = strchar(S_fullPath, ii)
        if (i_char == 47 || i_char == 92) then
            i_found = 1
        else
            ii -= 1
        endif
    od
    S_filename = strsub(S_fullPath, ii + 1, i_fullPathLength)
    xout S_filename
endop

opcode filename_from_full_path_k, S, S
    S_fullPath xin
    k_fullPathLength = strlenk(S_fullPath)
    ki = k_fullPathLength - 1
    k_found = 0
    while (k_found == 0 && k(0) < ki) do
        k_char = strchark(S_fullPath, ki)
        if (k_char == 47 || k_char == 92) then
            k_found = 1
        else
            ki -= 1
        endif
    od
    S_filename = strsubk(S_fullPath, ki + 1, k_fullPathLength)
    xout S_filename
endop



//----------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------











//---------------------------------------------------------------------------------------------------------------------
// File: af_spatial_tables.orc
//---------------------------------------------------------------------------------------------------------------------


// Pre-computed lookup tables for encoding ambisonic sources.
/*
 * The resonance audio lookup tables were copied from https://github.com/resonance-audio/resonance-audio-web-sdk.
 * The original resonance audio file was authored by Andrew Allen <bitllama@google.com>.
 */
// In the resonance audio web sdk the azimuth and elevation tables are in a multidimensional javascript array with each
// row having a different number of columns. In Csound we separate the azimuth and elevation tables because
// multidimensional arrays can't have a different number of columns.
//
// The azimuth table is split in two to stay under the Csound |fillarray| opcode's 1999 value limit.

gi_AF_3D_Audio_SphericalHarmonicsAzimuthLookupTable_000_179[][] init 180, 6
gi_AF_3D_Audio_SphericalHarmonicsAzimuthLookupTable_180_359[][] init 180, 6
gi_AF_3D_Audio_SphericalHarmonicsElevationLookupTable[][] init 180, 9
gi_AF_3D_Audio_MaxReWeightsLookupTable[][] init 360, 4

// Pre-computed Spherical Harmonics Coefficients.
//
// This function generates an efficient lookup table of SH coefficients. It
// exploits the way SHs are generated (i.e. Ylm = Nlm * Plm * Em). Since Nlm
// & Plm coefficients only depend on theta, and Em only depends on phi, we
// can separate the equation along these lines. Em does not depend on
// degree, so we only need to compute (2 * l) per azimuth Em total and
// Nlm * Plm is symmetrical across indexes, so only positive indexes are
// computed ((l + 1) * (l + 2) / 2 - 1) per elevation.
//
gi_AF_3D_Audio_SphericalHarmonicsAzimuthLookupTable_000_179 fillarray \
0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000,
0.052336, 0.034899, 0.017452, 0.999848, 0.999391, 0.998630,
0.104528, 0.069756, 0.034899, 0.999391, 0.997564, 0.994522,
0.156434, 0.104528, 0.052336, 0.998630, 0.994522, 0.987688,
0.207912, 0.139173, 0.069756, 0.997564, 0.990268, 0.978148,
0.258819, 0.173648, 0.087156, 0.996195, 0.984808, 0.965926,
0.309017, 0.207912, 0.104528, 0.994522, 0.978148, 0.951057,
0.358368, 0.241922, 0.121869, 0.992546, 0.970296, 0.933580,
0.406737, 0.275637, 0.139173, 0.990268, 0.961262, 0.913545,
0.453990, 0.309017, 0.156434, 0.987688, 0.951057, 0.891007,
0.500000, 0.342020, 0.173648, 0.984808, 0.939693, 0.866025,
0.544639, 0.374607, 0.190809, 0.981627, 0.927184, 0.838671,
0.587785, 0.406737, 0.207912, 0.978148, 0.913545, 0.809017,
0.629320, 0.438371, 0.224951, 0.974370, 0.898794, 0.777146,
0.669131, 0.469472, 0.241922, 0.970296, 0.882948, 0.743145,
0.707107, 0.500000, 0.258819, 0.965926, 0.866025, 0.707107,
0.743145, 0.529919, 0.275637, 0.961262, 0.848048, 0.669131,
0.777146, 0.559193, 0.292372, 0.956305, 0.829038, 0.629320,
0.809017, 0.587785, 0.309017, 0.951057, 0.809017, 0.587785,
0.838671, 0.615661, 0.325568, 0.945519, 0.788011, 0.544639,
0.866025, 0.642788, 0.342020, 0.939693, 0.766044, 0.500000,
0.891007, 0.669131, 0.358368, 0.933580, 0.743145, 0.453990,
0.913545, 0.694658, 0.374607, 0.927184, 0.719340, 0.406737,
0.933580, 0.719340, 0.390731, 0.920505, 0.694658, 0.358368,
0.951057, 0.743145, 0.406737, 0.913545, 0.669131, 0.309017,
0.965926, 0.766044, 0.422618, 0.906308, 0.642788, 0.258819,
0.978148, 0.788011, 0.438371, 0.898794, 0.615661, 0.207912,
0.987688, 0.809017, 0.453990, 0.891007, 0.587785, 0.156434,
0.994522, 0.829038, 0.469472, 0.882948, 0.559193, 0.104528,
0.998630, 0.848048, 0.484810, 0.874620, 0.529919, 0.052336,
1.000000, 0.866025, 0.500000, 0.866025, 0.500000, 0.000000,
0.998630, 0.882948, 0.515038, 0.857167, 0.469472, -0.052336,
0.994522, 0.898794, 0.529919, 0.848048, 0.438371, -0.104528,
0.987688, 0.913545, 0.544639, 0.838671, 0.406737, -0.156434,
0.978148, 0.927184, 0.559193, 0.829038, 0.374607, -0.207912,
0.965926, 0.939693, 0.573576, 0.819152, 0.342020, -0.258819,
0.951057, 0.951057, 0.587785, 0.809017, 0.309017, -0.309017,
0.933580, 0.961262, 0.601815, 0.798636, 0.275637, -0.358368,
0.913545, 0.970296, 0.615661, 0.788011, 0.241922, -0.406737,
0.891007, 0.978148, 0.629320, 0.777146, 0.207912, -0.453990,
0.866025, 0.984808, 0.642788, 0.766044, 0.173648, -0.500000,
0.838671, 0.990268, 0.656059, 0.754710, 0.139173, -0.544639,
0.809017, 0.994522, 0.669131, 0.743145, 0.104528, -0.587785,
0.777146, 0.997564, 0.681998, 0.731354, 0.069756, -0.629320,
0.743145, 0.999391, 0.694658, 0.719340, 0.034899, -0.669131,
0.707107, 1.000000, 0.707107, 0.707107, 0.000000, -0.707107,
0.669131, 0.999391, 0.719340, 0.694658, -0.034899, -0.743145,
0.629320, 0.997564, 0.731354, 0.681998, -0.069756, -0.777146,
0.587785, 0.994522, 0.743145, 0.669131, -0.104528, -0.809017,
0.544639, 0.990268, 0.754710, 0.656059, -0.139173, -0.838671,
0.500000, 0.984808, 0.766044, 0.642788, -0.173648, -0.866025,
0.453990, 0.978148, 0.777146, 0.629320, -0.207912, -0.891007,
0.406737, 0.970296, 0.788011, 0.615661, -0.241922, -0.913545,
0.358368, 0.961262, 0.798636, 0.601815, -0.275637, -0.933580,
0.309017, 0.951057, 0.809017, 0.587785, -0.309017, -0.951057,
0.258819, 0.939693, 0.819152, 0.573576, -0.342020, -0.965926,
0.207912, 0.927184, 0.829038, 0.559193, -0.374607, -0.978148,
0.156434, 0.913545, 0.838671, 0.544639, -0.406737, -0.987688,
0.104528, 0.898794, 0.848048, 0.529919, -0.438371, -0.994522,
0.052336, 0.882948, 0.857167, 0.515038, -0.469472, -0.998630,
0.000000, 0.866025, 0.866025, 0.500000, -0.500000, -1.000000,
-0.052336, 0.848048, 0.874620, 0.484810, -0.529919, -0.998630,
-0.104528, 0.829038, 0.882948, 0.469472, -0.559193, -0.994522,
-0.156434, 0.809017, 0.891007, 0.453990, -0.587785, -0.987688,
-0.207912, 0.788011, 0.898794, 0.438371, -0.615661, -0.978148,
-0.258819, 0.766044, 0.906308, 0.422618, -0.642788, -0.965926,
-0.309017, 0.743145, 0.913545, 0.406737, -0.669131, -0.951057,
-0.358368, 0.719340, 0.920505, 0.390731, -0.694658, -0.933580,
-0.406737, 0.694658, 0.927184, 0.374607, -0.719340, -0.913545,
-0.453990, 0.669131, 0.933580, 0.358368, -0.743145, -0.891007,
-0.500000, 0.642788, 0.939693, 0.342020, -0.766044, -0.866025,
-0.544639, 0.615661, 0.945519, 0.325568, -0.788011, -0.838671,
-0.587785, 0.587785, 0.951057, 0.309017, -0.809017, -0.809017,
-0.629320, 0.559193, 0.956305, 0.292372, -0.829038, -0.777146,
-0.669131, 0.529919, 0.961262, 0.275637, -0.848048, -0.743145,
-0.707107, 0.500000, 0.965926, 0.258819, -0.866025, -0.707107,
-0.743145, 0.469472, 0.970296, 0.241922, -0.882948, -0.669131,
-0.777146, 0.438371, 0.974370, 0.224951, -0.898794, -0.629320,
-0.809017, 0.406737, 0.978148, 0.207912, -0.913545, -0.587785,
-0.838671, 0.374607, 0.981627, 0.190809, -0.927184, -0.544639,
-0.866025, 0.342020, 0.984808, 0.173648, -0.939693, -0.500000,
-0.891007, 0.309017, 0.987688, 0.156434, -0.951057, -0.453990,
-0.913545, 0.275637, 0.990268, 0.139173, -0.961262, -0.406737,
-0.933580, 0.241922, 0.992546, 0.121869, -0.970296, -0.358368,
-0.951057, 0.207912, 0.994522, 0.104528, -0.978148, -0.309017,
-0.965926, 0.173648, 0.996195, 0.087156, -0.984808, -0.258819,
-0.978148, 0.139173, 0.997564, 0.069756, -0.990268, -0.207912,
-0.987688, 0.104528, 0.998630, 0.052336, -0.994522, -0.156434,
-0.994522, 0.069756, 0.999391, 0.034899, -0.997564, -0.104528,
-0.998630, 0.034899, 0.999848, 0.017452, -0.999391, -0.052336,
-1.000000, 0.000000, 1.000000, 0.000000, -1.000000, 0.000000,
-0.998630, -0.034899, 0.999848, -0.017452, -0.999391, 0.052336,
-0.994522, -0.069756, 0.999391, -0.034899, -0.997564, 0.104528,
-0.987688, -0.104528, 0.998630, -0.052336, -0.994522, 0.156434,
-0.978148, -0.139173, 0.997564, -0.069756, -0.990268, 0.207912,
-0.965926, -0.173648, 0.996195, -0.087156, -0.984808, 0.258819,
-0.951057, -0.207912, 0.994522, -0.104528, -0.978148, 0.309017,
-0.933580, -0.241922, 0.992546, -0.121869, -0.970296, 0.358368,
-0.913545, -0.275637, 0.990268, -0.139173, -0.961262, 0.406737,
-0.891007, -0.309017, 0.987688, -0.156434, -0.951057, 0.453990,
-0.866025, -0.342020, 0.984808, -0.173648, -0.939693, 0.500000,
-0.838671, -0.374607, 0.981627, -0.190809, -0.927184, 0.544639,
-0.809017, -0.406737, 0.978148, -0.207912, -0.913545, 0.587785,
-0.777146, -0.438371, 0.974370, -0.224951, -0.898794, 0.629320,
-0.743145, -0.469472, 0.970296, -0.241922, -0.882948, 0.669131,
-0.707107, -0.500000, 0.965926, -0.258819, -0.866025, 0.707107,
-0.669131, -0.529919, 0.961262, -0.275637, -0.848048, 0.743145,
-0.629320, -0.559193, 0.956305, -0.292372, -0.829038, 0.777146,
-0.587785, -0.587785, 0.951057, -0.309017, -0.809017, 0.809017,
-0.544639, -0.615661, 0.945519, -0.325568, -0.788011, 0.838671,
-0.500000, -0.642788, 0.939693, -0.342020, -0.766044, 0.866025,
-0.453990, -0.669131, 0.933580, -0.358368, -0.743145, 0.891007,
-0.406737, -0.694658, 0.927184, -0.374607, -0.719340, 0.913545,
-0.358368, -0.719340, 0.920505, -0.390731, -0.694658, 0.933580,
-0.309017, -0.743145, 0.913545, -0.406737, -0.669131, 0.951057,
-0.258819, -0.766044, 0.906308, -0.422618, -0.642788, 0.965926,
-0.207912, -0.788011, 0.898794, -0.438371, -0.615661, 0.978148,
-0.156434, -0.809017, 0.891007, -0.453990, -0.587785, 0.987688,
-0.104528, -0.829038, 0.882948, -0.469472, -0.559193, 0.994522,
-0.052336, -0.848048, 0.874620, -0.484810, -0.529919, 0.998630,
0.000000, -0.866025, 0.866025, -0.500000, -0.500000, 1.000000,
0.052336, -0.882948, 0.857167, -0.515038, -0.469472, 0.998630,
0.104528, -0.898794, 0.848048, -0.529919, -0.438371, 0.994522,
0.156434, -0.913545, 0.838671, -0.544639, -0.406737, 0.987688,
0.207912, -0.927184, 0.829038, -0.559193, -0.374607, 0.978148,
0.258819, -0.939693, 0.819152, -0.573576, -0.342020, 0.965926,
0.309017, -0.951057, 0.809017, -0.587785, -0.309017, 0.951057,
0.358368, -0.961262, 0.798636, -0.601815, -0.275637, 0.933580,
0.406737, -0.970296, 0.788011, -0.615661, -0.241922, 0.913545,
0.453990, -0.978148, 0.777146, -0.629320, -0.207912, 0.891007,
0.500000, -0.984808, 0.766044, -0.642788, -0.173648, 0.866025,
0.544639, -0.990268, 0.754710, -0.656059, -0.139173, 0.838671,
0.587785, -0.994522, 0.743145, -0.669131, -0.104528, 0.809017,
0.629320, -0.997564, 0.731354, -0.681998, -0.069756, 0.777146,
0.669131, -0.999391, 0.719340, -0.694658, -0.034899, 0.743145,
0.707107, -1.000000, 0.707107, -0.707107, 0.000000, 0.707107,
0.743145, -0.999391, 0.694658, -0.719340, 0.034899, 0.669131,
0.777146, -0.997564, 0.681998, -0.731354, 0.069756, 0.629320,
0.809017, -0.994522, 0.669131, -0.743145, 0.104528, 0.587785,
0.838671, -0.990268, 0.656059, -0.754710, 0.139173, 0.544639,
0.866025, -0.984808, 0.642788, -0.766044, 0.173648, 0.500000,
0.891007, -0.978148, 0.629320, -0.777146, 0.207912, 0.453990,
0.913545, -0.970296, 0.615661, -0.788011, 0.241922, 0.406737,
0.933580, -0.961262, 0.601815, -0.798636, 0.275637, 0.358368,
0.951057, -0.951057, 0.587785, -0.809017, 0.309017, 0.309017,
0.965926, -0.939693, 0.573576, -0.819152, 0.342020, 0.258819,
0.978148, -0.927184, 0.559193, -0.829038, 0.374607, 0.207912,
0.987688, -0.913545, 0.544639, -0.838671, 0.406737, 0.156434,
0.994522, -0.898794, 0.529919, -0.848048, 0.438371, 0.104528,
0.998630, -0.882948, 0.515038, -0.857167, 0.469472, 0.052336,
1.000000, -0.866025, 0.500000, -0.866025, 0.500000, 0.000000,
0.998630, -0.848048, 0.484810, -0.874620, 0.529919, -0.052336,
0.994522, -0.829038, 0.469472, -0.882948, 0.559193, -0.104528,
0.987688, -0.809017, 0.453990, -0.891007, 0.587785, -0.156434,
0.978148, -0.788011, 0.438371, -0.898794, 0.615661, -0.207912,
0.965926, -0.766044, 0.422618, -0.906308, 0.642788, -0.258819,
0.951057, -0.743145, 0.406737, -0.913545, 0.669131, -0.309017,
0.933580, -0.719340, 0.390731, -0.920505, 0.694658, -0.358368,
0.913545, -0.694658, 0.374607, -0.927184, 0.719340, -0.406737,
0.891007, -0.669131, 0.358368, -0.933580, 0.743145, -0.453990,
0.866025, -0.642788, 0.342020, -0.939693, 0.766044, -0.500000,
0.838671, -0.615661, 0.325568, -0.945519, 0.788011, -0.544639,
0.809017, -0.587785, 0.309017, -0.951057, 0.809017, -0.587785,
0.777146, -0.559193, 0.292372, -0.956305, 0.829038, -0.629320,
0.743145, -0.529919, 0.275637, -0.961262, 0.848048, -0.669131,
0.707107, -0.500000, 0.258819, -0.965926, 0.866025, -0.707107,
0.669131, -0.469472, 0.241922, -0.970296, 0.882948, -0.743145,
0.629320, -0.438371, 0.224951, -0.974370, 0.898794, -0.777146,
0.587785, -0.406737, 0.207912, -0.978148, 0.913545, -0.809017,
0.544639, -0.374607, 0.190809, -0.981627, 0.927184, -0.838671,
0.500000, -0.342020, 0.173648, -0.984808, 0.939693, -0.866025,
0.453990, -0.309017, 0.156434, -0.987688, 0.951057, -0.891007,
0.406737, -0.275637, 0.139173, -0.990268, 0.961262, -0.913545,
0.358368, -0.241922, 0.121869, -0.992546, 0.970296, -0.933580,
0.309017, -0.207912, 0.104528, -0.994522, 0.978148, -0.951057,
0.258819, -0.173648, 0.087156, -0.996195, 0.984808, -0.965926,
0.207912, -0.139173, 0.069756, -0.997564, 0.990268, -0.978148,
0.156434, -0.104528, 0.052336, -0.998630, 0.994522, -0.987688,
0.104528, -0.069756, 0.034899, -0.999391, 0.997564, -0.994522,
0.052336, -0.034899, 0.017452, -0.999848, 0.999391, -0.998630

gi_AF_3D_Audio_SphericalHarmonicsAzimuthLookupTable_180_359 fillarray \
0.000000, 0.000000, 0.000000, -1.000000, 1.000000, -1.000000,
-0.052336, 0.034899, -0.017452, -0.999848, 0.999391, -0.998630,
-0.104528, 0.069756, -0.034899, -0.999391, 0.997564, -0.994522,
-0.156434, 0.104528, -0.052336, -0.998630, 0.994522, -0.987688,
-0.207912, 0.139173, -0.069756, -0.997564, 0.990268, -0.978148,
-0.258819, 0.173648, -0.087156, -0.996195, 0.984808, -0.965926,
-0.309017, 0.207912, -0.104528, -0.994522, 0.978148, -0.951057,
-0.358368, 0.241922, -0.121869, -0.992546, 0.970296, -0.933580,
-0.406737, 0.275637, -0.139173, -0.990268, 0.961262, -0.913545,
-0.453990, 0.309017, -0.156434, -0.987688, 0.951057, -0.891007,
-0.500000, 0.342020, -0.173648, -0.984808, 0.939693, -0.866025,
-0.544639, 0.374607, -0.190809, -0.981627, 0.927184, -0.838671,
-0.587785, 0.406737, -0.207912, -0.978148, 0.913545, -0.809017,
-0.629320, 0.438371, -0.224951, -0.974370, 0.898794, -0.777146,
-0.669131, 0.469472, -0.241922, -0.970296, 0.882948, -0.743145,
-0.707107, 0.500000, -0.258819, -0.965926, 0.866025, -0.707107,
-0.743145, 0.529919, -0.275637, -0.961262, 0.848048, -0.669131,
-0.777146, 0.559193, -0.292372, -0.956305, 0.829038, -0.629320,
-0.809017, 0.587785, -0.309017, -0.951057, 0.809017, -0.587785,
-0.838671, 0.615661, -0.325568, -0.945519, 0.788011, -0.544639,
-0.866025, 0.642788, -0.342020, -0.939693, 0.766044, -0.500000,
-0.891007, 0.669131, -0.358368, -0.933580, 0.743145, -0.453990,
-0.913545, 0.694658, -0.374607, -0.927184, 0.719340, -0.406737,
-0.933580, 0.719340, -0.390731, -0.920505, 0.694658, -0.358368,
-0.951057, 0.743145, -0.406737, -0.913545, 0.669131, -0.309017,
-0.965926, 0.766044, -0.422618, -0.906308, 0.642788, -0.258819,
-0.978148, 0.788011, -0.438371, -0.898794, 0.615661, -0.207912,
-0.987688, 0.809017, -0.453990, -0.891007, 0.587785, -0.156434,
-0.994522, 0.829038, -0.469472, -0.882948, 0.559193, -0.104528,
-0.998630, 0.848048, -0.484810, -0.874620, 0.529919, -0.052336,
-1.000000, 0.866025, -0.500000, -0.866025, 0.500000, 0.000000,
-0.998630, 0.882948, -0.515038, -0.857167, 0.469472, 0.052336,
-0.994522, 0.898794, -0.529919, -0.848048, 0.438371, 0.104528,
-0.987688, 0.913545, -0.544639, -0.838671, 0.406737, 0.156434,
-0.978148, 0.927184, -0.559193, -0.829038, 0.374607, 0.207912,
-0.965926, 0.939693, -0.573576, -0.819152, 0.342020, 0.258819,
-0.951057, 0.951057, -0.587785, -0.809017, 0.309017, 0.309017,
-0.933580, 0.961262, -0.601815, -0.798636, 0.275637, 0.358368,
-0.913545, 0.970296, -0.615661, -0.788011, 0.241922, 0.406737,
-0.891007, 0.978148, -0.629320, -0.777146, 0.207912, 0.453990,
-0.866025, 0.984808, -0.642788, -0.766044, 0.173648, 0.500000,
-0.838671, 0.990268, -0.656059, -0.754710, 0.139173, 0.544639,
-0.809017, 0.994522, -0.669131, -0.743145, 0.104528, 0.587785,
-0.777146, 0.997564, -0.681998, -0.731354, 0.069756, 0.629320,
-0.743145, 0.999391, -0.694658, -0.719340, 0.034899, 0.669131,
-0.707107, 1.000000, -0.707107, -0.707107, 0.000000, 0.707107,
-0.669131, 0.999391, -0.719340, -0.694658, -0.034899, 0.743145,
-0.629320, 0.997564, -0.731354, -0.681998, -0.069756, 0.777146,
-0.587785, 0.994522, -0.743145, -0.669131, -0.104528, 0.809017,
-0.544639, 0.990268, -0.754710, -0.656059, -0.139173, 0.838671,
-0.500000, 0.984808, -0.766044, -0.642788, -0.173648, 0.866025,
-0.453990, 0.978148, -0.777146, -0.629320, -0.207912, 0.891007,
-0.406737, 0.970296, -0.788011, -0.615661, -0.241922, 0.913545,
-0.358368, 0.961262, -0.798636, -0.601815, -0.275637, 0.933580,
-0.309017, 0.951057, -0.809017, -0.587785, -0.309017, 0.951057,
-0.258819, 0.939693, -0.819152, -0.573576, -0.342020, 0.965926,
-0.207912, 0.927184, -0.829038, -0.559193, -0.374607, 0.978148,
-0.156434, 0.913545, -0.838671, -0.544639, -0.406737, 0.987688,
-0.104528, 0.898794, -0.848048, -0.529919, -0.438371, 0.994522,
-0.052336, 0.882948, -0.857167, -0.515038, -0.469472, 0.998630,
0.000000, 0.866025, -0.866025, -0.500000, -0.500000, 1.000000,
0.052336, 0.848048, -0.874620, -0.484810, -0.529919, 0.998630,
0.104528, 0.829038, -0.882948, -0.469472, -0.559193, 0.994522,
0.156434, 0.809017, -0.891007, -0.453990, -0.587785, 0.987688,
0.207912, 0.788011, -0.898794, -0.438371, -0.615661, 0.978148,
0.258819, 0.766044, -0.906308, -0.422618, -0.642788, 0.965926,
0.309017, 0.743145, -0.913545, -0.406737, -0.669131, 0.951057,
0.358368, 0.719340, -0.920505, -0.390731, -0.694658, 0.933580,
0.406737, 0.694658, -0.927184, -0.374607, -0.719340, 0.913545,
0.453990, 0.669131, -0.933580, -0.358368, -0.743145, 0.891007,
0.500000, 0.642788, -0.939693, -0.342020, -0.766044, 0.866025,
0.544639, 0.615661, -0.945519, -0.325568, -0.788011, 0.838671,
0.587785, 0.587785, -0.951057, -0.309017, -0.809017, 0.809017,
0.629320, 0.559193, -0.956305, -0.292372, -0.829038, 0.777146,
0.669131, 0.529919, -0.961262, -0.275637, -0.848048, 0.743145,
0.707107, 0.500000, -0.965926, -0.258819, -0.866025, 0.707107,
0.743145, 0.469472, -0.970296, -0.241922, -0.882948, 0.669131,
0.777146, 0.438371, -0.974370, -0.224951, -0.898794, 0.629320,
0.809017, 0.406737, -0.978148, -0.207912, -0.913545, 0.587785,
0.838671, 0.374607, -0.981627, -0.190809, -0.927184, 0.544639,
0.866025, 0.342020, -0.984808, -0.173648, -0.939693, 0.500000,
0.891007, 0.309017, -0.987688, -0.156434, -0.951057, 0.453990,
0.913545, 0.275637, -0.990268, -0.139173, -0.961262, 0.406737,
0.933580, 0.241922, -0.992546, -0.121869, -0.970296, 0.358368,
0.951057, 0.207912, -0.994522, -0.104528, -0.978148, 0.309017,
0.965926, 0.173648, -0.996195, -0.087156, -0.984808, 0.258819,
0.978148, 0.139173, -0.997564, -0.069756, -0.990268, 0.207912,
0.987688, 0.104528, -0.998630, -0.052336, -0.994522, 0.156434,
0.994522, 0.069756, -0.999391, -0.034899, -0.997564, 0.104528,
0.998630, 0.034899, -0.999848, -0.017452, -0.999391, 0.052336,
1.000000, 0.000000, -1.000000, 0.000000, -1.000000, 0.000000,
0.998630, -0.034899, -0.999848, 0.017452, -0.999391, -0.052336,
0.994522, -0.069756, -0.999391, 0.034899, -0.997564, -0.104528,
0.987688, -0.104528, -0.998630, 0.052336, -0.994522, -0.156434,
0.978148, -0.139173, -0.997564, 0.069756, -0.990268, -0.207912,
0.965926, -0.173648, -0.996195, 0.087156, -0.984808, -0.258819,
0.951057, -0.207912, -0.994522, 0.104528, -0.978148, -0.309017,
0.933580, -0.241922, -0.992546, 0.121869, -0.970296, -0.358368,
0.913545, -0.275637, -0.990268, 0.139173, -0.961262, -0.406737,
0.891007, -0.309017, -0.987688, 0.156434, -0.951057, -0.453990,
0.866025, -0.342020, -0.984808, 0.173648, -0.939693, -0.500000,
0.838671, -0.374607, -0.981627, 0.190809, -0.927184, -0.544639,
0.809017, -0.406737, -0.978148, 0.207912, -0.913545, -0.587785,
0.777146, -0.438371, -0.974370, 0.224951, -0.898794, -0.629320,
0.743145, -0.469472, -0.970296, 0.241922, -0.882948, -0.669131,
0.707107, -0.500000, -0.965926, 0.258819, -0.866025, -0.707107,
0.669131, -0.529919, -0.961262, 0.275637, -0.848048, -0.743145,
0.629320, -0.559193, -0.956305, 0.292372, -0.829038, -0.777146,
0.587785, -0.587785, -0.951057, 0.309017, -0.809017, -0.809017,
0.544639, -0.615661, -0.945519, 0.325568, -0.788011, -0.838671,
0.500000, -0.642788, -0.939693, 0.342020, -0.766044, -0.866025,
0.453990, -0.669131, -0.933580, 0.358368, -0.743145, -0.891007,
0.406737, -0.694658, -0.927184, 0.374607, -0.719340, -0.913545,
0.358368, -0.719340, -0.920505, 0.390731, -0.694658, -0.933580,
0.309017, -0.743145, -0.913545, 0.406737, -0.669131, -0.951057,
0.258819, -0.766044, -0.906308, 0.422618, -0.642788, -0.965926,
0.207912, -0.788011, -0.898794, 0.438371, -0.615661, -0.978148,
0.156434, -0.809017, -0.891007, 0.453990, -0.587785, -0.987688,
0.104528, -0.829038, -0.882948, 0.469472, -0.559193, -0.994522,
0.052336, -0.848048, -0.874620, 0.484810, -0.529919, -0.998630,
0.000000, -0.866025, -0.866025, 0.500000, -0.500000, -1.000000,
-0.052336, -0.882948, -0.857167, 0.515038, -0.469472, -0.998630,
-0.104528, -0.898794, -0.848048, 0.529919, -0.438371, -0.994522,
-0.156434, -0.913545, -0.838671, 0.544639, -0.406737, -0.987688,
-0.207912, -0.927184, -0.829038, 0.559193, -0.374607, -0.978148,
-0.258819, -0.939693, -0.819152, 0.573576, -0.342020, -0.965926,
-0.309017, -0.951057, -0.809017, 0.587785, -0.309017, -0.951057,
-0.358368, -0.961262, -0.798636, 0.601815, -0.275637, -0.933580,
-0.406737, -0.970296, -0.788011, 0.615661, -0.241922, -0.913545,
-0.453990, -0.978148, -0.777146, 0.629320, -0.207912, -0.891007,
-0.500000, -0.984808, -0.766044, 0.642788, -0.173648, -0.866025,
-0.544639, -0.990268, -0.754710, 0.656059, -0.139173, -0.838671,
-0.587785, -0.994522, -0.743145, 0.669131, -0.104528, -0.809017,
-0.629320, -0.997564, -0.731354, 0.681998, -0.069756, -0.777146,
-0.669131, -0.999391, -0.719340, 0.694658, -0.034899, -0.743145,
-0.707107, -1.000000, -0.707107, 0.707107, 0.000000, -0.707107,
-0.743145, -0.999391, -0.694658, 0.719340, 0.034899, -0.669131,
-0.777146, -0.997564, -0.681998, 0.731354, 0.069756, -0.629320,
-0.809017, -0.994522, -0.669131, 0.743145, 0.104528, -0.587785,
-0.838671, -0.990268, -0.656059, 0.754710, 0.139173, -0.544639,
-0.866025, -0.984808, -0.642788, 0.766044, 0.173648, -0.500000,
-0.891007, -0.978148, -0.629320, 0.777146, 0.207912, -0.453990,
-0.913545, -0.970296, -0.615661, 0.788011, 0.241922, -0.406737,
-0.933580, -0.961262, -0.601815, 0.798636, 0.275637, -0.358368,
-0.951057, -0.951057, -0.587785, 0.809017, 0.309017, -0.309017,
-0.965926, -0.939693, -0.573576, 0.819152, 0.342020, -0.258819,
-0.978148, -0.927184, -0.559193, 0.829038, 0.374607, -0.207912,
-0.987688, -0.913545, -0.544639, 0.838671, 0.406737, -0.156434,
-0.994522, -0.898794, -0.529919, 0.848048, 0.438371, -0.104528,
-0.998630, -0.882948, -0.515038, 0.857167, 0.469472, -0.052336,
-1.000000, -0.866025, -0.500000, 0.866025, 0.500000, 0.000000,
-0.998630, -0.848048, -0.484810, 0.874620, 0.529919, 0.052336,
-0.994522, -0.829038, -0.469472, 0.882948, 0.559193, 0.104528,
-0.987688, -0.809017, -0.453990, 0.891007, 0.587785, 0.156434,
-0.978148, -0.788011, -0.438371, 0.898794, 0.615661, 0.207912,
-0.965926, -0.766044, -0.422618, 0.906308, 0.642788, 0.258819,
-0.951057, -0.743145, -0.406737, 0.913545, 0.669131, 0.309017,
-0.933580, -0.719340, -0.390731, 0.920505, 0.694658, 0.358368,
-0.913545, -0.694658, -0.374607, 0.927184, 0.719340, 0.406737,
-0.891007, -0.669131, -0.358368, 0.933580, 0.743145, 0.453990,
-0.866025, -0.642788, -0.342020, 0.939693, 0.766044, 0.500000,
-0.838671, -0.615661, -0.325568, 0.945519, 0.788011, 0.544639,
-0.809017, -0.587785, -0.309017, 0.951057, 0.809017, 0.587785,
-0.777146, -0.559193, -0.292372, 0.956305, 0.829038, 0.629320,
-0.743145, -0.529919, -0.275637, 0.961262, 0.848048, 0.669131,
-0.707107, -0.500000, -0.258819, 0.965926, 0.866025, 0.707107,
-0.669131, -0.469472, -0.241922, 0.970296, 0.882948, 0.743145,
-0.629320, -0.438371, -0.224951, 0.974370, 0.898794, 0.777146,
-0.587785, -0.406737, -0.207912, 0.978148, 0.913545, 0.809017,
-0.544639, -0.374607, -0.190809, 0.981627, 0.927184, 0.838671,
-0.500000, -0.342020, -0.173648, 0.984808, 0.939693, 0.866025,
-0.453990, -0.309017, -0.156434, 0.987688, 0.951057, 0.891007,
-0.406737, -0.275637, -0.139173, 0.990268, 0.961262, 0.913545,
-0.358368, -0.241922, -0.121869, 0.992546, 0.970296, 0.933580,
-0.309017, -0.207912, -0.104528, 0.994522, 0.978148, 0.951057,
-0.258819, -0.173648, -0.087156, 0.996195, 0.984808, 0.965926,
-0.207912, -0.139173, -0.069756, 0.997564, 0.990268, 0.978148,
-0.156434, -0.104528, -0.052336, 0.998630, 0.994522, 0.987688,
-0.104528, -0.069756, -0.034899, 0.999391, 0.997564, 0.994522,
-0.052336, -0.034899, -0.017452, 0.999848, 0.999391, 0.998630

gi_AF_3D_Audio_SphericalHarmonicsElevationLookupTable fillarray \
-1.000000, 0.000000, 1.000000, 0.000000, 0.000000, -1.000000, 0.000000, 0.000000, 0.000000,
-0.999848, 0.017452, 0.999543, -0.030224, 0.000264, -0.999086, 0.042733, -0.000590, 0.000004,
-0.999391, 0.034899, 0.998173, -0.060411, 0.001055, -0.996348, 0.085356, -0.002357, 0.000034,
-0.998630, 0.052336, 0.995891, -0.090524, 0.002372, -0.991791, 0.127757, -0.005297, 0.000113,
-0.997564, 0.069756, 0.992701, -0.120527, 0.004214, -0.985429, 0.169828, -0.009400, 0.000268,
-0.996195, 0.087156, 0.988606, -0.150384, 0.006578, -0.977277, 0.211460, -0.014654, 0.000523,
-0.994522, 0.104528, 0.983611, -0.180057, 0.009462, -0.967356, 0.252544, -0.021043, 0.000903,
-0.992546, 0.121869, 0.977722, -0.209511, 0.012862, -0.955693, 0.292976, -0.028547, 0.001431,
-0.990268, 0.139173, 0.970946, -0.238709, 0.016774, -0.942316, 0.332649, -0.037143, 0.002131,
-0.987688, 0.156434, 0.963292, -0.267617, 0.021193, -0.927262, 0.371463, -0.046806, 0.003026,
-0.984808, 0.173648, 0.954769, -0.296198, 0.026114, -0.910569, 0.409317, -0.057505, 0.004140,
-0.981627, 0.190809, 0.945388, -0.324419, 0.031530, -0.892279, 0.446114, -0.069209, 0.005492,
-0.978148, 0.207912, 0.935159, -0.352244, 0.037436, -0.872441, 0.481759, -0.081880, 0.007105,
-0.974370, 0.224951, 0.924096, -0.379641, 0.043823, -0.851105, 0.516162, -0.095481, 0.008999,
-0.970296, 0.241922, 0.912211, -0.406574, 0.050685, -0.828326, 0.549233, -0.109969, 0.011193,
-0.965926, 0.258819, 0.899519, -0.433013, 0.058013, -0.804164, 0.580889, -0.125300, 0.013707,
-0.961262, 0.275637, 0.886036, -0.458924, 0.065797, -0.778680, 0.611050, -0.141427, 0.016556,
-0.956305, 0.292372, 0.871778, -0.484275, 0.074029, -0.751940, 0.639639, -0.158301, 0.019758,
-0.951057, 0.309017, 0.856763, -0.509037, 0.082698, -0.724012, 0.666583, -0.175868, 0.023329,
-0.945519, 0.325568, 0.841008, -0.533178, 0.091794, -0.694969, 0.691816, -0.194075, 0.027281,
-0.939693, 0.342020, 0.824533, -0.556670, 0.101306, -0.664885, 0.715274, -0.212865, 0.031630,
-0.933580, 0.358368, 0.807359, -0.579484, 0.111222, -0.633837, 0.736898, -0.232180, 0.036385,
-0.927184, 0.374607, 0.789505, -0.601592, 0.121529, -0.601904, 0.756637, -0.251960, 0.041559,
-0.920505, 0.390731, 0.770994, -0.622967, 0.132217, -0.569169, 0.774442, -0.272143, 0.047160,
-0.913545, 0.406737, 0.751848, -0.643582, 0.143271, -0.535715, 0.790270, -0.292666, 0.053196,
-0.906308, 0.422618, 0.732091, -0.663414, 0.154678, -0.501627, 0.804083, -0.313464, 0.059674,
-0.898794, 0.438371, 0.711746, -0.682437, 0.166423, -0.466993, 0.815850, -0.334472, 0.066599,
-0.891007, 0.453990, 0.690839, -0.700629, 0.178494, -0.431899, 0.825544, -0.355623, 0.073974,
-0.882948, 0.469472, 0.669395, -0.717968, 0.190875, -0.396436, 0.833145, -0.376851, 0.081803,
-0.874620, 0.484810, 0.647439, -0.734431, 0.203551, -0.360692, 0.838638, -0.398086, 0.090085,
-0.866025, 0.500000, 0.625000, -0.750000, 0.216506, -0.324760, 0.842012, -0.419263, 0.098821,
-0.857167, 0.515038, 0.602104, -0.764655, 0.229726, -0.288728, 0.843265, -0.440311, 0.108009,
-0.848048, 0.529919, 0.578778, -0.778378, 0.243192, -0.252688, 0.842399, -0.461164, 0.117644,
-0.838671, 0.544639, 0.555052, -0.791154, 0.256891, -0.216730, 0.839422, -0.481753, 0.127722,
-0.829038, 0.559193, 0.530955, -0.802965, 0.270803, -0.180944, 0.834347, -0.502011, 0.138237,
-0.819152, 0.573576, 0.506515, -0.813798, 0.284914, -0.145420, 0.827194, -0.521871, 0.149181,
-0.809017, 0.587785, 0.481763, -0.823639, 0.299204, -0.110246, 0.817987, -0.541266, 0.160545,
-0.798636, 0.601815, 0.456728, -0.832477, 0.313658, -0.075508, 0.806757, -0.560132, 0.172317,
-0.788011, 0.615661, 0.431441, -0.840301, 0.328257, -0.041294, 0.793541, -0.578405, 0.184487,
-0.777146, 0.629320, 0.405934, -0.847101, 0.342984, -0.007686, 0.778379, -0.596021, 0.197040,
-0.766044, 0.642788, 0.380236, -0.852869, 0.357821, 0.025233, 0.761319, -0.612921, 0.209963,
-0.754710, 0.656059, 0.354380, -0.857597, 0.372749, 0.057383, 0.742412, -0.629044, 0.223238,
-0.743145, 0.669131, 0.328396, -0.861281, 0.387751, 0.088686, 0.721714, -0.644334, 0.236850,
-0.731354, 0.681998, 0.302317, -0.863916, 0.402807, 0.119068, 0.699288, -0.658734, 0.250778,
-0.719340, 0.694658, 0.276175, -0.865498, 0.417901, 0.148454, 0.675199, -0.672190, 0.265005,
-0.707107, 0.707107, 0.250000, -0.866025, 0.433013, 0.176777, 0.649519, -0.684653, 0.279508,
-0.694658, 0.719340, 0.223825, -0.865498, 0.448125, 0.203969, 0.622322, -0.696073, 0.294267,
-0.681998, 0.731354, 0.197683, -0.863916, 0.463218, 0.229967, 0.593688, -0.706405, 0.309259,
-0.669131, 0.743145, 0.171604, -0.861281, 0.478275, 0.254712, 0.563700, -0.715605, 0.324459,
-0.656059, 0.754710, 0.145620, -0.857597, 0.493276, 0.278147, 0.532443, -0.723633, 0.339844,
-0.642788, 0.766044, 0.119764, -0.852869, 0.508205, 0.300221, 0.500009, -0.730451, 0.355387,
-0.629320, 0.777146, 0.094066, -0.847101, 0.523041, 0.320884, 0.466490, -0.736025, 0.371063,
-0.615661, 0.788011, 0.068559, -0.840301, 0.537768, 0.340093, 0.431982, -0.740324, 0.386845,
-0.601815, 0.798636, 0.043272, -0.832477, 0.552367, 0.357807, 0.396584, -0.743320, 0.402704,
-0.587785, 0.809017, 0.018237, -0.823639, 0.566821, 0.373991, 0.360397, -0.744989, 0.418613,
-0.573576, 0.819152, -0.006515, -0.813798, 0.581112, 0.388612, 0.323524, -0.745308, 0.434544,
-0.559193, 0.829038, -0.030955, -0.802965, 0.595222, 0.401645, 0.286069, -0.744262, 0.450467,
-0.544639, 0.838671, -0.055052, -0.791154, 0.609135, 0.413066, 0.248140, -0.741835, 0.466352,
-0.529919, 0.848048, -0.078778, -0.778378, 0.622833, 0.422856, 0.209843, -0.738017, 0.482171,
-0.515038, 0.857167, -0.102104, -0.764655, 0.636300, 0.431004, 0.171288, -0.732801, 0.497894,
-0.500000, 0.866025, -0.125000, -0.750000, 0.649519, 0.437500, 0.132583, -0.726184, 0.513490,
-0.484810, 0.874620, -0.147439, -0.734431, 0.662474, 0.442340, 0.093837, -0.718167, 0.528929,
-0.469472, 0.882948, -0.169395, -0.717968, 0.675150, 0.445524, 0.055160, -0.708753, 0.544183,
-0.453990, 0.891007, -0.190839, -0.700629, 0.687531, 0.447059, 0.016662, -0.697950, 0.559220,
-0.438371, 0.898794, -0.211746, -0.682437, 0.699602, 0.446953, -0.021550, -0.685769, 0.574011,
-0.422618, 0.906308, -0.232091, -0.663414, 0.711348, 0.445222, -0.059368, -0.672226, 0.588528,
-0.406737, 0.913545, -0.251848, -0.643582, 0.722755, 0.441884, -0.096684, -0.657339, 0.602741,
-0.390731, 0.920505, -0.270994, -0.622967, 0.733809, 0.436964, -0.133395, -0.641130, 0.616621,
-0.374607, 0.927184, -0.289505, -0.601592, 0.744496, 0.430488, -0.169397, -0.623624, 0.630141,
-0.358368, 0.933580, -0.307359, -0.579484, 0.754804, 0.422491, -0.204589, -0.604851, 0.643273,
-0.342020, 0.939693, -0.324533, -0.556670, 0.764720, 0.413008, -0.238872, -0.584843, 0.655990,
-0.325568, 0.945519, -0.341008, -0.533178, 0.774231, 0.402081, -0.272150, -0.563635, 0.668267,
-0.309017, 0.951057, -0.356763, -0.509037, 0.783327, 0.389754, -0.304329, -0.541266, 0.680078,
-0.292372, 0.956305, -0.371778, -0.484275, 0.791997, 0.376077, -0.335319, -0.517778, 0.691399,
-0.275637, 0.961262, -0.386036, -0.458924, 0.800228, 0.361102, -0.365034, -0.493216, 0.702207,
-0.258819, 0.965926, -0.399519, -0.433013, 0.808013, 0.344885, -0.393389, -0.467627, 0.712478,
-0.241922, 0.970296, -0.412211, -0.406574, 0.815340, 0.327486, -0.420306, -0.441061, 0.722191,
-0.224951, 0.974370, -0.424096, -0.379641, 0.822202, 0.308969, -0.445709, -0.413572, 0.731327,
-0.207912, 0.978148, -0.435159, -0.352244, 0.828589, 0.289399, -0.469527, -0.385215, 0.739866,
-0.190809, 0.981627, -0.445388, -0.324419, 0.834495, 0.268846, -0.491693, -0.356047, 0.747790,
-0.173648, 0.984808, -0.454769, -0.296198, 0.839912, 0.247382, -0.512145, -0.326129, 0.755082,
-0.156434, 0.987688, -0.463292, -0.267617, 0.844832, 0.225081, -0.530827, -0.295521, 0.761728,
-0.139173, 0.990268, -0.470946, -0.238709, 0.849251, 0.202020, -0.547684, -0.264287, 0.767712,
-0.121869, 0.992546, -0.477722, -0.209511, 0.853163, 0.178279, -0.562672, -0.232494, 0.773023,
-0.104528, 0.994522, -0.483611, -0.180057, 0.856563, 0.153937, -0.575747, -0.200207, 0.777648,
-0.087156, 0.996195, -0.488606, -0.150384, 0.859447, 0.129078, -0.586872, -0.167494, 0.781579,
-0.069756, 0.997564, -0.492701, -0.120527, 0.861811, 0.103786, -0.596018, -0.134426, 0.784806,
-0.052336, 0.998630, -0.495891, -0.090524, 0.863653, 0.078146, -0.603158, -0.101071, 0.787324,
-0.034899, 0.999391, -0.498173, -0.060411, 0.864971, 0.052243, -0.608272, -0.067500, 0.789126,
-0.017452, 0.999848, -0.499543, -0.030224, 0.865762, 0.026165, -0.611347, -0.033786, 0.790208,
0.000000, 1.000000, -0.500000, 0.000000, 0.866025, 0.000000, -0.612372, 0.000000, 0.790569,
0.017452, 0.999848, -0.499543, 0.030224, 0.865762, -0.026165, -0.611347, 0.033786, 0.790208,
0.034899, 0.999391, -0.498173, 0.060411, 0.864971, -0.052243, -0.608272, 0.067500, 0.789126,
0.052336, 0.998630, -0.495891, 0.090524, 0.863653, -0.078146, -0.603158, 0.101071, 0.787324,
0.069756, 0.997564, -0.492701, 0.120527, 0.861811, -0.103786, -0.596018, 0.134426, 0.784806,
0.087156, 0.996195, -0.488606, 0.150384, 0.859447, -0.129078, -0.586872, 0.167494, 0.781579,
0.104528, 0.994522, -0.483611, 0.180057, 0.856563, -0.153937, -0.575747, 0.200207, 0.777648,
0.121869, 0.992546, -0.477722, 0.209511, 0.853163, -0.178279, -0.562672, 0.232494, 0.773023,
0.139173, 0.990268, -0.470946, 0.238709, 0.849251, -0.202020, -0.547684, 0.264287, 0.767712,
0.156434, 0.987688, -0.463292, 0.267617, 0.844832, -0.225081, -0.530827, 0.295521, 0.761728,
0.173648, 0.984808, -0.454769, 0.296198, 0.839912, -0.247382, -0.512145, 0.326129, 0.755082,
0.190809, 0.981627, -0.445388, 0.324419, 0.834495, -0.268846, -0.491693, 0.356047, 0.747790,
0.207912, 0.978148, -0.435159, 0.352244, 0.828589, -0.289399, -0.469527, 0.385215, 0.739866,
0.224951, 0.974370, -0.424096, 0.379641, 0.822202, -0.308969, -0.445709, 0.413572, 0.731327,
0.241922, 0.970296, -0.412211, 0.406574, 0.815340, -0.327486, -0.420306, 0.441061, 0.722191,
0.258819, 0.965926, -0.399519, 0.433013, 0.808013, -0.344885, -0.393389, 0.467627, 0.712478,
0.275637, 0.961262, -0.386036, 0.458924, 0.800228, -0.361102, -0.365034, 0.493216, 0.702207,
0.292372, 0.956305, -0.371778, 0.484275, 0.791997, -0.376077, -0.335319, 0.517778, 0.691399,
0.309017, 0.951057, -0.356763, 0.509037, 0.783327, -0.389754, -0.304329, 0.541266, 0.680078,
0.325568, 0.945519, -0.341008, 0.533178, 0.774231, -0.402081, -0.272150, 0.563635, 0.668267,
0.342020, 0.939693, -0.324533, 0.556670, 0.764720, -0.413008, -0.238872, 0.584843, 0.655990,
0.358368, 0.933580, -0.307359, 0.579484, 0.754804, -0.422491, -0.204589, 0.604851, 0.643273,
0.374607, 0.927184, -0.289505, 0.601592, 0.744496, -0.430488, -0.169397, 0.623624, 0.630141,
0.390731, 0.920505, -0.270994, 0.622967, 0.733809, -0.436964, -0.133395, 0.641130, 0.616621,
0.406737, 0.913545, -0.251848, 0.643582, 0.722755, -0.441884, -0.096684, 0.657339, 0.602741,
0.422618, 0.906308, -0.232091, 0.663414, 0.711348, -0.445222, -0.059368, 0.672226, 0.588528,
0.438371, 0.898794, -0.211746, 0.682437, 0.699602, -0.446953, -0.021550, 0.685769, 0.574011,
0.453990, 0.891007, -0.190839, 0.700629, 0.687531, -0.447059, 0.016662, 0.697950, 0.559220,
0.469472, 0.882948, -0.169395, 0.717968, 0.675150, -0.445524, 0.055160, 0.708753, 0.544183,
0.484810, 0.874620, -0.147439, 0.734431, 0.662474, -0.442340, 0.093837, 0.718167, 0.528929,
0.500000, 0.866025, -0.125000, 0.750000, 0.649519, -0.437500, 0.132583, 0.726184, 0.513490,
0.515038, 0.857167, -0.102104, 0.764655, 0.636300, -0.431004, 0.171288, 0.732801, 0.497894,
0.529919, 0.848048, -0.078778, 0.778378, 0.622833, -0.422856, 0.209843, 0.738017, 0.482171,
0.544639, 0.838671, -0.055052, 0.791154, 0.609135, -0.413066, 0.248140, 0.741835, 0.466352,
0.559193, 0.829038, -0.030955, 0.802965, 0.595222, -0.401645, 0.286069, 0.744262, 0.450467,
0.573576, 0.819152, -0.006515, 0.813798, 0.581112, -0.388612, 0.323524, 0.745308, 0.434544,
0.587785, 0.809017, 0.018237, 0.823639, 0.566821, -0.373991, 0.360397, 0.744989, 0.418613,
0.601815, 0.798636, 0.043272, 0.832477, 0.552367, -0.357807, 0.396584, 0.743320, 0.402704,
0.615661, 0.788011, 0.068559, 0.840301, 0.537768, -0.340093, 0.431982, 0.740324, 0.386845,
0.629320, 0.777146, 0.094066, 0.847101, 0.523041, -0.320884, 0.466490, 0.736025, 0.371063,
0.642788, 0.766044, 0.119764, 0.852869, 0.508205, -0.300221, 0.500009, 0.730451, 0.355387,
0.656059, 0.754710, 0.145620, 0.857597, 0.493276, -0.278147, 0.532443, 0.723633, 0.339844,
0.669131, 0.743145, 0.171604, 0.861281, 0.478275, -0.254712, 0.563700, 0.715605, 0.324459,
0.681998, 0.731354, 0.197683, 0.863916, 0.463218, -0.229967, 0.593688, 0.706405, 0.309259,
0.694658, 0.719340, 0.223825, 0.865498, 0.448125, -0.203969, 0.622322, 0.696073, 0.294267,
0.707107, 0.707107, 0.250000, 0.866025, 0.433013, -0.176777, 0.649519, 0.684653, 0.279508,
0.719340, 0.694658, 0.276175, 0.865498, 0.417901, -0.148454, 0.675199, 0.672190, 0.265005,
0.731354, 0.681998, 0.302317, 0.863916, 0.402807, -0.119068, 0.699288, 0.658734, 0.250778,
0.743145, 0.669131, 0.328396, 0.861281, 0.387751, -0.088686, 0.721714, 0.644334, 0.236850,
0.754710, 0.656059, 0.354380, 0.857597, 0.372749, -0.057383, 0.742412, 0.629044, 0.223238,
0.766044, 0.642788, 0.380236, 0.852869, 0.357821, -0.025233, 0.761319, 0.612921, 0.209963,
0.777146, 0.629320, 0.405934, 0.847101, 0.342984, 0.007686, 0.778379, 0.596021, 0.197040,
0.788011, 0.615661, 0.431441, 0.840301, 0.328257, 0.041294, 0.793541, 0.578405, 0.184487,
0.798636, 0.601815, 0.456728, 0.832477, 0.313658, 0.075508, 0.806757, 0.560132, 0.172317,
0.809017, 0.587785, 0.481763, 0.823639, 0.299204, 0.110246, 0.817987, 0.541266, 0.160545,
0.819152, 0.573576, 0.506515, 0.813798, 0.284914, 0.145420, 0.827194, 0.521871, 0.149181,
0.829038, 0.559193, 0.530955, 0.802965, 0.270803, 0.180944, 0.834347, 0.502011, 0.138237,
0.838671, 0.544639, 0.555052, 0.791154, 0.256891, 0.216730, 0.839422, 0.481753, 0.127722,
0.848048, 0.529919, 0.578778, 0.778378, 0.243192, 0.252688, 0.842399, 0.461164, 0.117644,
0.857167, 0.515038, 0.602104, 0.764655, 0.229726, 0.288728, 0.843265, 0.440311, 0.108009,
0.866025, 0.500000, 0.625000, 0.750000, 0.216506, 0.324760, 0.842012, 0.419263, 0.098821,
0.874620, 0.484810, 0.647439, 0.734431, 0.203551, 0.360692, 0.838638, 0.398086, 0.090085,
0.882948, 0.469472, 0.669395, 0.717968, 0.190875, 0.396436, 0.833145, 0.376851, 0.081803,
0.891007, 0.453990, 0.690839, 0.700629, 0.178494, 0.431899, 0.825544, 0.355623, 0.073974,
0.898794, 0.438371, 0.711746, 0.682437, 0.166423, 0.466993, 0.815850, 0.334472, 0.066599,
0.906308, 0.422618, 0.732091, 0.663414, 0.154678, 0.501627, 0.804083, 0.313464, 0.059674,
0.913545, 0.406737, 0.751848, 0.643582, 0.143271, 0.535715, 0.790270, 0.292666, 0.053196,
0.920505, 0.390731, 0.770994, 0.622967, 0.132217, 0.569169, 0.774442, 0.272143, 0.047160,
0.927184, 0.374607, 0.789505, 0.601592, 0.121529, 0.601904, 0.756637, 0.251960, 0.041559,
0.933580, 0.358368, 0.807359, 0.579484, 0.111222, 0.633837, 0.736898, 0.232180, 0.036385,
0.939693, 0.342020, 0.824533, 0.556670, 0.101306, 0.664885, 0.715274, 0.212865, 0.031630,
0.945519, 0.325568, 0.841008, 0.533178, 0.091794, 0.694969, 0.691816, 0.194075, 0.027281,
0.951057, 0.309017, 0.856763, 0.509037, 0.082698, 0.724012, 0.666583, 0.175868, 0.023329,
0.956305, 0.292372, 0.871778, 0.484275, 0.074029, 0.751940, 0.639639, 0.158301, 0.019758,
0.961262, 0.275637, 0.886036, 0.458924, 0.065797, 0.778680, 0.611050, 0.141427, 0.016556,
0.965926, 0.258819, 0.899519, 0.433013, 0.058013, 0.804164, 0.580889, 0.125300, 0.013707,
0.970296, 0.241922, 0.912211, 0.406574, 0.050685, 0.828326, 0.549233, 0.109969, 0.011193,
0.974370, 0.224951, 0.924096, 0.379641, 0.043823, 0.851105, 0.516162, 0.095481, 0.008999,
0.978148, 0.207912, 0.935159, 0.352244, 0.037436, 0.872441, 0.481759, 0.081880, 0.007105,
0.981627, 0.190809, 0.945388, 0.324419, 0.031530, 0.892279, 0.446114, 0.069209, 0.005492,
0.984808, 0.173648, 0.954769, 0.296198, 0.026114, 0.910569, 0.409317, 0.057505, 0.004140,
0.987688, 0.156434, 0.963292, 0.267617, 0.021193, 0.927262, 0.371463, 0.046806, 0.003026,
0.990268, 0.139173, 0.970946, 0.238709, 0.016774, 0.942316, 0.332649, 0.037143, 0.002131,
0.992546, 0.121869, 0.977722, 0.209511, 0.012862, 0.955693, 0.292976, 0.028547, 0.001431,
0.994522, 0.104528, 0.983611, 0.180057, 0.009462, 0.967356, 0.252544, 0.021043, 0.000903,
0.996195, 0.087156, 0.988606, 0.150384, 0.006578, 0.977277, 0.211460, 0.014654, 0.000523,
0.997564, 0.069756, 0.992701, 0.120527, 0.004214, 0.985429, 0.169828, 0.009400, 0.000268,
0.998630, 0.052336, 0.995891, 0.090524, 0.002372, 0.991791, 0.127757, 0.005297, 0.000113,
0.999391, 0.034899, 0.998173, 0.060411, 0.001055, 0.996348, 0.085356, 0.002357, 0.000034,
0.999848, 0.017452, 0.999543, 0.030224, 0.000264, 0.999086, 0.042733, 0.000590, 0.000004,
1.000000, 0.000000, 1.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000


// Pre-computed per-band weighting coefficients for producing energy-preserving
// Max-Re sources.
//
gi_AF_3D_Audio_MaxReWeightsLookupTable fillarray \
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000,
1.003236, 1.002156, 0.999152, 0.990038,
1.032370, 1.021194, 0.990433, 0.898572,
1.062694, 1.040231, 0.979161, 0.799806,
1.093999, 1.058954, 0.964976, 0.693603,
1.126003, 1.077006, 0.947526, 0.579890,
1.158345, 1.093982, 0.926474, 0.458690,
1.190590, 1.109437, 0.901512, 0.330158,
1.222228, 1.122890, 0.872370, 0.194621,
1.252684, 1.133837, 0.838839, 0.052614,
1.281987, 1.142358, 0.801199, 0.000000,
1.312073, 1.150207, 0.760839, 0.000000,
1.343011, 1.157424, 0.717799, 0.000000,
1.374649, 1.163859, 0.671999, 0.000000,
1.406809, 1.169354, 0.623371, 0.000000,
1.439286, 1.173739, 0.571868, 0.000000,
1.471846, 1.176837, 0.517465, 0.000000,
1.504226, 1.178465, 0.460174, 0.000000,
1.536133, 1.178438, 0.400043, 0.000000,
1.567253, 1.176573, 0.337165, 0.000000,
1.597247, 1.172695, 0.271688, 0.000000,
1.625766, 1.166645, 0.203815, 0.000000,
1.652455, 1.158285, 0.133806, 0.000000,
1.676966, 1.147506, 0.061983, 0.000000,
1.699006, 1.134261, 0.000000, 0.000000,
1.720224, 1.119789, 0.000000, 0.000000,
1.741631, 1.104810, 0.000000, 0.000000,
1.763183, 1.089330, 0.000000, 0.000000,
1.784837, 1.073356, 0.000000, 0.000000,
1.806548, 1.056898, 0.000000, 0.000000,
1.828269, 1.039968, 0.000000, 0.000000,
1.849952, 1.022580, 0.000000, 0.000000,
1.871552, 1.004752, 0.000000, 0.000000,
1.893018, 0.986504, 0.000000, 0.000000,
1.914305, 0.967857, 0.000000, 0.000000,
1.935366, 0.948837, 0.000000, 0.000000,
1.956154, 0.929471, 0.000000, 0.000000,
1.976625, 0.909790, 0.000000, 0.000000,
1.996736, 0.889823, 0.000000, 0.000000,
2.016448, 0.869607, 0.000000, 0.000000,
2.035721, 0.849175, 0.000000, 0.000000,
2.054522, 0.828565, 0.000000, 0.000000,
2.072818, 0.807816, 0.000000, 0.000000,
2.090581, 0.786964, 0.000000, 0.000000,
2.107785, 0.766051, 0.000000, 0.000000,
2.124411, 0.745115, 0.000000, 0.000000,
2.140439, 0.724196, 0.000000, 0.000000,
2.155856, 0.703332, 0.000000, 0.000000,
2.170653, 0.682561, 0.000000, 0.000000,
2.184823, 0.661921, 0.000000, 0.000000,
2.198364, 0.641445, 0.000000, 0.000000,
2.211275, 0.621169, 0.000000, 0.000000,
2.223562, 0.601125, 0.000000, 0.000000,
2.235230, 0.581341, 0.000000, 0.000000,
2.246289, 0.561847, 0.000000, 0.000000,
2.256751, 0.542667, 0.000000, 0.000000,
2.266631, 0.523826, 0.000000, 0.000000,
2.275943, 0.505344, 0.000000, 0.000000,
2.284707, 0.487239, 0.000000, 0.000000,
2.292939, 0.469528, 0.000000, 0.000000,
2.300661, 0.452225, 0.000000, 0.000000,
2.307892, 0.435342, 0.000000, 0.000000,
2.314654, 0.418888, 0.000000, 0.000000,
2.320969, 0.402870, 0.000000, 0.000000,
2.326858, 0.387294, 0.000000, 0.000000,
2.332343, 0.372164, 0.000000, 0.000000,
2.337445, 0.357481, 0.000000, 0.000000,
2.342186, 0.343246, 0.000000, 0.000000,
2.346585, 0.329458, 0.000000, 0.000000,
2.350664, 0.316113, 0.000000, 0.000000,
2.354442, 0.303208, 0.000000, 0.000000,
2.357937, 0.290738, 0.000000, 0.000000,
2.361168, 0.278698, 0.000000, 0.000000,
2.364152, 0.267080, 0.000000, 0.000000,
2.366906, 0.255878, 0.000000, 0.000000,
2.369446, 0.245082, 0.000000, 0.000000,
2.371786, 0.234685, 0.000000, 0.000000,
2.373940, 0.224677, 0.000000, 0.000000,
2.375923, 0.215048, 0.000000, 0.000000,
2.377745, 0.205790, 0.000000, 0.000000,
2.379421, 0.196891, 0.000000, 0.000000,
2.380959, 0.188342, 0.000000, 0.000000,
2.382372, 0.180132, 0.000000, 0.000000,
2.383667, 0.172251, 0.000000, 0.000000,
2.384856, 0.164689, 0.000000, 0.000000,
2.385945, 0.157435, 0.000000, 0.000000,
2.386943, 0.150479, 0.000000, 0.000000,
2.387857, 0.143811, 0.000000, 0.000000,
2.388694, 0.137421, 0.000000, 0.000000,
2.389460, 0.131299, 0.000000, 0.000000,
2.390160, 0.125435, 0.000000, 0.000000,
2.390801, 0.119820, 0.000000, 0.000000,
2.391386, 0.114445, 0.000000, 0.000000,
2.391921, 0.109300, 0.000000, 0.000000,
2.392410, 0.104376, 0.000000, 0.000000,
2.392857, 0.099666, 0.000000, 0.000000,
2.393265, 0.095160, 0.000000, 0.000000,
2.393637, 0.090851, 0.000000, 0.000000,
2.393977, 0.086731, 0.000000, 0.000000,
2.394288, 0.082791, 0.000000, 0.000000,
2.394571, 0.079025, 0.000000, 0.000000,
2.394829, 0.075426, 0.000000, 0.000000,
2.395064, 0.071986, 0.000000, 0.000000,
2.395279, 0.068699, 0.000000, 0.000000,
2.395475, 0.065558, 0.000000, 0.000000,
2.395653, 0.062558, 0.000000, 0.000000,
2.395816, 0.059693, 0.000000, 0.000000,
2.395964, 0.056955, 0.000000, 0.000000,
2.396099, 0.054341, 0.000000, 0.000000,
2.396222, 0.051845, 0.000000, 0.000000,
2.396334, 0.049462, 0.000000, 0.000000,
2.396436, 0.047186, 0.000000, 0.000000,
2.396529, 0.045013, 0.000000, 0.000000,
2.396613, 0.042939, 0.000000, 0.000000,
2.396691, 0.040959, 0.000000, 0.000000,
2.396761, 0.039069, 0.000000, 0.000000,
2.396825, 0.037266, 0.000000, 0.000000,
2.396883, 0.035544, 0.000000, 0.000000,
2.396936, 0.033901, 0.000000, 0.000000,
2.396984, 0.032334, 0.000000, 0.000000,
2.397028, 0.030838, 0.000000, 0.000000,
2.397068, 0.029410, 0.000000, 0.000000,
2.397104, 0.028048, 0.000000, 0.000000,
2.397137, 0.026749, 0.000000, 0.000000,
2.397167, 0.025509, 0.000000, 0.000000,
2.397194, 0.024326, 0.000000, 0.000000,
2.397219, 0.023198, 0.000000, 0.000000,
2.397242, 0.022122, 0.000000, 0.000000,
2.397262, 0.021095, 0.000000, 0.000000,
2.397281, 0.020116, 0.000000, 0.000000,
2.397298, 0.019181, 0.000000, 0.000000,
2.397314, 0.018290, 0.000000, 0.000000,
2.397328, 0.017441, 0.000000, 0.000000,
2.397341, 0.016630, 0.000000, 0.000000,
2.397352, 0.015857, 0.000000, 0.000000,
2.397363, 0.015119, 0.000000, 0.000000,
2.397372, 0.014416, 0.000000, 0.000000,
2.397381, 0.013745, 0.000000, 0.000000,
2.397389, 0.013106, 0.000000, 0.000000,
2.397396, 0.012496, 0.000000, 0.000000,
2.397403, 0.011914, 0.000000, 0.000000,
2.397409, 0.011360, 0.000000, 0.000000,
2.397414, 0.010831, 0.000000, 0.000000,
2.397419, 0.010326, 0.000000, 0.000000,
2.397424, 0.009845, 0.000000, 0.000000,
2.397428, 0.009387, 0.000000, 0.000000,
2.397432, 0.008949, 0.000000, 0.000000,
2.397435, 0.008532, 0.000000, 0.000000,
2.397438, 0.008135, 0.000000, 0.000000,
2.397441, 0.007755, 0.000000, 0.000000,
2.397443, 0.007394, 0.000000, 0.000000,
2.397446, 0.007049, 0.000000, 0.000000,
2.397448, 0.006721, 0.000000, 0.000000,
2.397450, 0.006407, 0.000000, 0.000000,
2.397451, 0.006108, 0.000000, 0.000000,
2.397453, 0.005824, 0.000000, 0.000000,
2.397454, 0.005552, 0.000000, 0.000000,
2.397456, 0.005293, 0.000000, 0.000000,
2.397457, 0.005046, 0.000000, 0.000000,
2.397458, 0.004811, 0.000000, 0.000000,
2.397459, 0.004586, 0.000000, 0.000000,
2.397460, 0.004372, 0.000000, 0.000000,
2.397461, 0.004168, 0.000000, 0.000000,
2.397461, 0.003974, 0.000000, 0.000000,
2.397462, 0.003788, 0.000000, 0.000000,
2.397463, 0.003611, 0.000000, 0.000000,
2.397463, 0.003443, 0.000000, 0.000000,
2.397464, 0.003282, 0.000000, 0.000000,
2.397464, 0.003129, 0.000000, 0.000000,
2.397465, 0.002983, 0.000000, 0.000000,
2.397465, 0.002844, 0.000000, 0.000000,
2.397465, 0.002711, 0.000000, 0.000000,
2.397466, 0.002584, 0.000000, 0.000000,
2.397466, 0.002464, 0.000000, 0.000000,
2.397466, 0.002349, 0.000000, 0.000000,
2.397466, 0.002239, 0.000000, 0.000000,
2.397467, 0.002135, 0.000000, 0.000000,
2.397467, 0.002035, 0.000000, 0.000000,
2.397467, 0.001940, 0.000000, 0.000000,
2.397467, 0.001849, 0.000000, 0.000000,
2.397467, 0.001763, 0.000000, 0.000000,
2.397467, 0.001681, 0.000000, 0.000000,
2.397468, 0.001602, 0.000000, 0.000000,
2.397468, 0.001527, 0.000000, 0.000000,
2.397468, 0.001456, 0.000000, 0.000000,
2.397468, 0.001388, 0.000000, 0.000000,
2.397468, 0.001323, 0.000000, 0.000000,
2.397468, 0.001261, 0.000000, 0.000000,
2.397468, 0.001202, 0.000000, 0.000000,
2.397468, 0.001146, 0.000000, 0.000000,
2.397468, 0.001093, 0.000000, 0.000000,
2.397468, 0.001042, 0.000000, 0.000000,
2.397468, 0.000993, 0.000000, 0.000000,
2.397468, 0.000947, 0.000000, 0.000000,
2.397468, 0.000902, 0.000000, 0.000000,
2.397468, 0.000860, 0.000000, 0.000000,
2.397468, 0.000820, 0.000000, 0.000000,
2.397469, 0.000782, 0.000000, 0.000000,
2.397469, 0.000745, 0.000000, 0.000000,
2.397469, 0.000710, 0.000000, 0.000000,
2.397469, 0.000677, 0.000000, 0.000000,
2.397469, 0.000646, 0.000000, 0.000000,
2.397469, 0.000616, 0.000000, 0.000000,
2.397469, 0.000587, 0.000000, 0.000000,
2.397469, 0.000559, 0.000000, 0.000000,
2.397469, 0.000533, 0.000000, 0.000000,
2.397469, 0.000508, 0.000000, 0.000000,
2.397469, 0.000485, 0.000000, 0.000000,
2.397469, 0.000462, 0.000000, 0.000000,
2.397469, 0.000440, 0.000000, 0.000000,
2.397469, 0.000420, 0.000000, 0.000000,
2.397469, 0.000400, 0.000000, 0.000000,
2.397469, 0.000381, 0.000000, 0.000000,
2.397469, 0.000364, 0.000000, 0.000000,
2.397469, 0.000347, 0.000000, 0.000000,
2.397469, 0.000330, 0.000000, 0.000000,
2.397469, 0.000315, 0.000000, 0.000000,
2.397469, 0.000300, 0.000000, 0.000000,
2.397469, 0.000286, 0.000000, 0.000000,
2.397469, 0.000273, 0.000000, 0.000000,
2.397469, 0.000260, 0.000000, 0.000000,
2.397469, 0.000248, 0.000000, 0.000000,
2.397469, 0.000236, 0.000000, 0.000000,
2.397469, 0.000225, 0.000000, 0.000000,
2.397469, 0.000215, 0.000000, 0.000000,
2.397469, 0.000205, 0.000000, 0.000000,
2.397469, 0.000195, 0.000000, 0.000000,
2.397469, 0.000186, 0.000000, 0.000000,
2.397469, 0.000177, 0.000000, 0.000000,
2.397469, 0.000169, 0.000000, 0.000000,
2.397469, 0.000161, 0.000000, 0.000000,
2.397469, 0.000154, 0.000000, 0.000000,
2.397469, 0.000147, 0.000000, 0.000000,
2.397469, 0.000140, 0.000000, 0.000000,
2.397469, 0.000133, 0.000000, 0.000000,
2.397469, 0.000127, 0.000000, 0.000000,
2.397469, 0.000121, 0.000000, 0.000000,
2.397469, 0.000115, 0.000000, 0.000000,
2.397469, 0.000110, 0.000000, 0.000000,
2.397469, 0.000105, 0.000000, 0.000000,
2.397469, 0.000100, 0.000000, 0.000000,
2.397469, 0.000095, 0.000000, 0.000000,
2.397469, 0.000091, 0.000000, 0.000000,
2.397469, 0.000087, 0.000000, 0.000000,
2.397469, 0.000083, 0.000000, 0.000000,
2.397469, 0.000079, 0.000000, 0.000000,
2.397469, 0.000075, 0.000000, 0.000000,
2.397469, 0.000071, 0.000000, 0.000000,
2.397469, 0.000068, 0.000000, 0.000000,
2.397469, 0.000065, 0.000000, 0.000000,
2.397469, 0.000062, 0.000000, 0.000000,
2.397469, 0.000059, 0.000000, 0.000000,
2.397469, 0.000056, 0.000000, 0.000000,
2.397469, 0.000054, 0.000000, 0.000000,
2.397469, 0.000051, 0.000000, 0.000000,
2.397469, 0.000049, 0.000000, 0.000000,
2.397469, 0.000046, 0.000000, 0.000000,
2.397469, 0.000044, 0.000000, 0.000000,
2.397469, 0.000042, 0.000000, 0.000000,
2.397469, 0.000040, 0.000000, 0.000000,
2.397469, 0.000038, 0.000000, 0.000000,
2.397469, 0.000037, 0.000000, 0.000000,
2.397469, 0.000035, 0.000000, 0.000000,
2.397469, 0.000033, 0.000000, 0.000000,
2.397469, 0.000032, 0.000000, 0.000000,
2.397469, 0.000030, 0.000000, 0.000000,
2.397469, 0.000029, 0.000000, 0.000000,
2.397469, 0.000027, 0.000000, 0.000000,
2.397469, 0.000026, 0.000000, 0.000000,
2.397469, 0.000025, 0.000000, 0.000000,
2.397469, 0.000024, 0.000000, 0.000000,
2.397469, 0.000023, 0.000000, 0.000000,
2.397469, 0.000022, 0.000000, 0.000000,
2.397469, 0.000021, 0.000000, 0.000000,
2.397469, 0.000020, 0.000000, 0.000000,
2.397469, 0.000019, 0.000000, 0.000000,
2.397469, 0.000018, 0.000000, 0.000000,
2.397469, 0.000017, 0.000000, 0.000000,
2.397469, 0.000016, 0.000000, 0.000000,
2.397469, 0.000015, 0.000000, 0.000000,
2.397469, 0.000015, 0.000000, 0.000000,
2.397469, 0.000014, 0.000000, 0.000000,
2.397469, 0.000013, 0.000000, 0.000000,
2.397469, 0.000013, 0.000000, 0.000000,
2.397469, 0.000012, 0.000000, 0.000000,
2.397469, 0.000012, 0.000000, 0.000000,
2.397469, 0.000011, 0.000000, 0.000000,
2.397469, 0.000011, 0.000000, 0.000000,
2.397469, 0.000010, 0.000000, 0.000000,
2.397469, 0.000010, 0.000000, 0.000000,
2.397469, 0.000009, 0.000000, 0.000000,
2.397469, 0.000009, 0.000000, 0.000000,
2.397469, 0.000008, 0.000000, 0.000000,
2.397469, 0.000008, 0.000000, 0.000000,
2.397469, 0.000008, 0.000000, 0.000000,
2.397469, 0.000007, 0.000000, 0.000000,
2.397469, 0.000007, 0.000000, 0.000000,
2.397469, 0.000007, 0.000000, 0.000000,
2.397469, 0.000006, 0.000000, 0.000000,
2.397469, 0.000006, 0.000000, 0.000000,
2.397469, 0.000006, 0.000000, 0.000000,
2.397469, 0.000005, 0.000000, 0.000000,
2.397469, 0.000005, 0.000000, 0.000000,
2.397469, 0.000005, 0.000000, 0.000000,
2.397469, 0.000005, 0.000000, 0.000000,
2.397469, 0.000004, 0.000000, 0.000000,
2.397469, 0.000004, 0.000000, 0.000000,
2.397469, 0.000004, 0.000000, 0.000000,
2.397469, 0.000004, 0.000000, 0.000000,
2.397469, 0.000004, 0.000000, 0.000000,
2.397469, 0.000004, 0.000000, 0.000000,
2.397469, 0.000003, 0.000000, 0.000000,
2.397469, 0.000003, 0.000000, 0.000000,
2.397469, 0.000003, 0.000000, 0.000000,
2.397469, 0.000003, 0.000000, 0.000000,
2.397469, 0.000003, 0.000000, 0.000000,
2.397469, 0.000003, 0.000000, 0.000000,
2.397469, 0.000003, 0.000000, 0.000000,
2.397469, 0.000002, 0.000000, 0.000000,
2.397469, 0.000002, 0.000000, 0.000000,
2.397469, 0.000002, 0.000000, 0.000000,
2.397469, 0.000002, 0.000000, 0.000000,
2.397469, 0.000002, 0.000000, 0.000000,
2.397469, 0.000002, 0.000000, 0.000000,
2.397469, 0.000002, 0.000000, 0.000000,
2.397469, 0.000002, 0.000000, 0.000000,
2.397469, 0.000002, 0.000000, 0.000000,
2.397469, 0.000002, 0.000000, 0.000000,
2.397469, 0.000001, 0.000000, 0.000000,
2.397469, 0.000001, 0.000000, 0.000000,
2.397469, 0.000001, 0.000000, 0.000000

gi_AF_3D_HrirChannel1TableNumber = ftgen(0, 0, 256, -2, -0.00006103515625, -0.00030517578125, -0.000152587890625, -0.00006103515625, -0.00006103515625, -0.000030517578125, -0.000152587890625, 0.0002441480755805969, -0.000244140625, 0.0007324442267417908, -0.00054931640625, -0.000152587890625, -0.0015869140625, -0.015716552734375, -0.030364990234375, 0.015167699195444584, 0.10705892741680145, 0.009491256438195705, -0.083709716796875, -0.0228271484375, -0.080078125, -0.020263671875, -0.088134765625, -0.195709228515625, -0.0167236328125, 0.018860438838601112, 0.22006897628307343, 0.1908627599477768, -0.02325439453125, 0.0949125662446022, 0.028321176767349243, 0.04104739427566528, 0.040162358433008194, 0.028901029378175735, 0.07693716138601303, 0.0013733329251408577, 0.011474959552288055, -0.056976318359375, -0.051513671875, -0.040557861328125, -0.0338134765625, 0.03588976711034775, 0.04699850454926491, 0.04666280001401901, -0.003173828125, 0.03308206424117088, 0.011749626137316227, 0.0014954069629311562, 0.024384289979934692, -0.007965087890625, 0.013733329251408577, -0.006927490234375, 0.0009765923023223877, -0.015899658203125, -0.01373291015625, 0.005920590832829475, -0.00872802734375, 0.006012146361172199, -0.011199951171875, -0.011810302734375, -0.01763916015625, -0.0096435546875, -0.010955810546875, -0.00994873046875, 0.0029908139258623123, -0.01617431640625, -0.011810302734375, -0.01617431640625, -0.01251220703125, -0.00775146484375, -0.002777099609375, -0.0096435546875, -0.016326904296875, -0.011810302734375, -0.021270751953125, -0.006500244140625, -0.0087890625, -0.00970458984375, -0.0089111328125, -0.01385498046875, -0.0135498046875, -0.01348876953125, -0.00848388671875, -0.0126953125, -0.003448486328125, -0.0123291015625, -0.014404296875, -0.00885009765625, -0.014862060546875, -0.008941650390625, -0.009307861328125, -0.01025390625, -0.012664794921875, -0.00958251953125, -0.014739990234375, -0.011627197265625, -0.007904052734375, -0.014312744140625, -0.006256103515625, -0.010711669921875, -0.011688232421875, -0.008697509765625, -0.01055908203125, -0.011138916015625, -0.0087890625, -0.00982666015625, -0.012939453125, -0.00750732421875, -0.01220703125, -0.009368896484375, -0.0068359375, -0.01116943359375, -0.00750732421875, -0.00762939453125, -0.00946044921875, -0.007843017578125, -0.006805419921875, -0.0107421875, -0.0069580078125, -0.007232666015625, -0.009307861328125, -0.00482177734375, -0.007568359375, -0.00665283203125, -0.00482177734375, -0.006683349609375, -0.0067138671875, -0.00494384765625, -0.007293701171875, -0.006744384765625, -0.004547119140625, -0.0078125, -0.0048828125, -0.005096435546875, -0.006805419921875, -0.00421142578125, -0.0050048828125, -0.005950927734375, -0.00421142578125, -0.004913330078125, -0.005889892578125, -0.003265380859375, -0.005523681640625, -0.0052490234375, -0.00360107421875, -0.00543212890625, -0.003814697265625, -0.004150390625, -0.005126953125, -0.004241943359375, -0.0040283203125, -0.005157470703125, -0.004669189453125, -0.004852294921875, -0.005462646484375, -0.003326416015625, -0.003662109375, -0.003936767578125, -0.002838134765625, -0.003143310546875, -0.00360107421875, -0.002471923828125, -0.002593994140625, -0.003082275390625, -0.0015869140625, -0.00286865234375, -0.002655029296875, -0.0018310546875, -0.003173828125, -0.0023193359375, -0.001922607421875, -0.00250244140625, -0.001708984375, -0.001617431640625, -0.002349853515625, -0.001312255859375, -0.001678466796875, -0.0020751953125, -0.000885009765625, -0.001800537109375, -0.001678466796875, -0.000946044921875, -0.001922607421875, -0.00152587890625, -0.000946044921875, -0.001861572265625, -0.0013427734375, -0.0009765625, -0.001922607421875, -0.001129150390625, -0.0010986328125, -0.001861572265625, -0.000946044921875, -0.00115966796875, -0.001708984375, -0.0008544921875, -0.001312255859375, -0.001617431640625, -0.00079345703125, -0.00140380859375, -0.001434326171875, -0.000823974609375, -0.00152587890625, -0.0013427734375, -0.0008544921875, -0.00152587890625, -0.00115966796875, -0.00091552734375, -0.001556396484375, -0.001007080078125, -0.001007080078125, -0.00146484375, -0.00091552734375, -0.001068115234375, -0.001373291015625, -0.0008544921875, -0.001129150390625, -0.001312255859375, -0.000762939453125, -0.001190185546875, -0.00115966796875, -0.00079345703125, -0.001220703125, -0.00103759765625, -0.00079345703125, -0.001220703125, -0.000946044921875, -0.000823974609375, -0.001190185546875, -0.0008544921875, -0.000885009765625, -0.001129150390625, -0.000762939453125, -0.000946044921875, -0.001068115234375, -0.000762939453125, -0.0009765625, -0.001007080078125, -0.000732421875, -0.0009765625, -0.000946044921875, -0.000732421875, -0.00103759765625, -0.000946044921875, -0.00091552734375, -0.001129150390625, -0.001068115234375, -0.0010986328125, -0.001190185546875, -0.001129150390625, -0.001129150390625, -0.001129150390625, -0.001068115234375, -0.00103759765625, -0.000946044921875, -0.000885009765625)
gi_AF_3D_HrirChannel2TableNumber = ftgen(0, 0, 256, -2, 0.00006103701889514923, 0.0004882961511611938, 0.00033570360392332077, 0.0002136295661330223, 0.0003662221133708954, 0.000030518509447574615, 0.000030518509447574615, 0.00012207403779029846, -0.00018310546875, 0.0004882961511611938, -0.000762939453125, -0.0003662109375, -0.001953125, -0.015869140625, -0.03070068359375, 0.015167699195444584, 0.10660115629434586, 0.008941923268139362, -0.08404541015625, -0.023345947265625, -0.080413818359375, -0.020172119140625, -0.08746337890625, -0.19354248046875, -0.013214111328125, 0.023163549602031708, 0.22647786140441895, 0.20023193955421448, -0.008697509765625, 0.10782189667224884, 0.03305154666304588, 0.04687643051147461, 0.03650013729929924, 0.012421033345162868, 0.09137241542339325, 0.036805324256420135, 0.05389568954706192, 0.023438215255737305, 0.009552293457090855, 0.0060731833800673485, 0.0316171757876873, 0.019592883065342903, -0.0401611328125, -0.01239013671875, -0.059326171875, -0.062896728515625, -0.04583740234375, -0.018524169921875, -0.020660400390625, -0.03265380859375, -0.02691650390625, -0.06201171875, -0.025054931640625, -0.03277587890625, -0.012786865234375, -0.004058837890625, -0.024017333984375, -0.021942138671875, -0.04296875, -0.0152587890625, -0.021881103515625, -0.0098876953125, -0.017486572265625, -0.022064208984375, -0.0140380859375, -0.03271484375, -0.013671875, -0.0201416015625, -0.008270263671875, -0.013092041015625, -0.016082763671875, -0.016265869140625, -0.0196533203125, -0.005706787109375, -0.014801025390625, -0.002593994140625, -0.013336181640625, -0.011810302734375, -0.010986328125, -0.016876220703125, -0.0081787109375, -0.0113525390625, -0.00390625, -0.008087158203125, -0.00164794921875, -0.00860595703125, -0.007476806640625, -0.001220703125, -0.00689697265625, 0.0007019257172942162, -0.0050048828125, -0.001800537109375, -0.00250244140625, -0.00152587890625, -0.00042724609375, 0.00158696249127388, 0.0023499252274632454, -0.00244140625, 0.004028443247079849, -0.001800537109375, 0.0017090365290641785, 0.0036011841148138046, 0.0011291848495602608, 0.0032349620014429092, 0.0019226660951972008, 0.0014954069629311562, 0.00006103701889514923, 0.003326517529785633, -0.000152587890625, 0.0029908139258623123, 0.0017700735479593277, -0.0009765625, 0.00317392498254776, 0.00030518509447574615, 0.0023194067180156708, 0.003326517529785633, 0.00238044373691082, 0.0009155552834272385, 0.0027466658502817154, 0.0010986663401126862, 0.0005188146606087685, 0.002929776906967163, -0.001068115234375, 0.0013122959062457085, 0.0009765923023223877, -0.000396728515625, 0.0013122959062457085, 0.0008239997550845146, -0.00006103515625, 0.0012207403779029846, 0.0012817773967981339, -0.000335693359375, 0.002624591812491417, 0.00027466658502817154, 0.00006103701889514923, 0.0018921475857496262, -0.00048828125, 0.0006714072078466415, 0.0012512588873505592, -0.000091552734375, 0.0005798516795039177, 0.0016174810007214546, -0.000762939453125, 0.0007324442267417908, 0.0009155552834272385, -0.0003662109375, 0.00198370311409235, -0.000152587890625, -0.00030517578125, 0.0008545182645320892, -0.000396728515625, -0.000274658203125, 0.000030518509447574615, -0.001129150390625, -0.000457763671875, 0.0010681478306651115, 0.00009155552834272385, 0.0010071108117699623, 0.0010986663401126862, 0.0006408886983990669, 0.00119022186845541, 0.0009155552834272385, 0.0010681478306651115, 0.0014038514345884323, 0.0017090365290641785, 0.0010986663401126862, 0.0018005920574069023, 0.0015564439818263054, 0.0011291848495602608, 0.0021057771518826485, 0.0012817773967981339, 0.00119022186845541, 0.001739555038511753, 0.0010681478306651115, 0.00079348124563694, 0.0012817773967981339, 0.0006714072078466415, 0.0006103701889514923, 0.00119022186845541, 0.00033570360392332077, 0.0006103701889514923, 0.0007629627361893654, 0.0001831110566854477, 0.0006103701889514923, 0.0006714072078466415, 0.0002136295661330223, 0.0006103701889514923, 0.0004882961511611938, 0.000030518509447574615, 0.0006103701889514923, 0.00027466658502817154, 0.00006103701889514923, 0.0005493331700563431, 0.00012207403779029846, 0.00006103701889514923, 0.00039674062281847, -0.00006103515625, 0.00009155552834272385, 0.0003662221133708954, -0.00006103515625, 0.0001831110566854477, 0.00027466658502817154, -0.0001220703125, 0.0002136295661330223, 0.0002136295661330223, -0.0001220703125, 0.00027466658502817154, 0.00012207403779029846, -0.0001220703125, 0.0002441480755805969, -0.000030517578125, -0.000091552734375, 0.0002136295661330223, -0.00006103515625, -0.000030517578125, 0.0001831110566854477, -0.0001220703125, 0, 0.00015259254723787308, -0.000152587890625, 0.00006103701889514923, 0.00009155552834272385, -0.000152587890625, 0.00012207403779029846, 0.00006103701889514923, -0.000091552734375, 0.00015259254723787308, 0.000030518509447574615, -0.00006103515625, 0.0001831110566854477, 0, 0, 0.0001831110566854477, -0.000030517578125, 0.00006103701889514923, 0.00015259254723787308, -0.000030517578125, 0.00009155552834272385, 0.00015259254723787308, -0.000030517578125, 0.00012207403779029846, 0.00012207403779029846, -0.000030517578125, 0.00015259254723787308, 0.00009155552834272385, 0.000030518509447574615, 0.00012207403779029846, 0.00006103701889514923, 0.00006103701889514923, 0.00009155552834272385, 0.00006103701889514923, 0.00006103701889514923, 0.00006103701889514923, 0.00006103701889514923, 0.000030518509447574615, 0.000030518509447574615)
gi_AF_3D_HrirChannel3TableNumber = ftgen(0, 0, 256, -2, 0, -0.000091552734375, -0.000030517578125, -0.000030517578125, -0.000030517578125, -0.000091552734375, 0.00006103701889514923, -0.000213623046875, 0.00006103701889514923, 0.00015259254723787308, -0.000396728515625, 0.00079348124563694, -0.001312255859375, 0.0008850367739796638, 0.00079348124563694, -0.01324462890625, -0.02490234375, 0.06173894554376602, 0.07873775064945221, -0.1392822265625, -0.029449462890625, 0.10599078238010406, -0.098602294921875, 0.043214209377765656, 0.06701864302158356, -0.06231689453125, -0.0352783203125, -0.023162841796875, 0.1662953644990921, 0.008117923513054848, -0.161590576171875, -0.0062255859375, 0.036927394568920135, 0.04596087336540222, 0.027588732540607452, 0.0473952442407608, -0.049652099609375, -0.07379150390625, 0.0033570360392332077, -0.030792236328125, 0.04058961570262909, 0.016510512679815292, -0.02166748046875, 0.0002136295661330223, -0.00927734375, 0.025025177747011185, 0.011932737194001675, 0.013733329251408577, 0.004791405983269215, -0.007720947265625, -0.00054931640625, -0.006744384765625, 0.008880886249244213, 0.007721182890236378, 0.005310220643877983, 0.004577776417136192, 0.0003662221133708954, -0.009429931640625, -0.004058837890625, 0.01229895930737257, 0.006561479531228542, 0.0028992583975195885, 0.0024109622463583946, 0.00039674062281847, -0.010345458984375, -0.005950927734375, 0.00027466658502817154, 0.0009155552834272385, 0.007293923757970333, -0.005523681640625, -0.005828857421875, -0.0009765625, -0.003814697265625, 0.0023499252274632454, 0.006164738908410072, -0.000091552734375, 0.0005188146606087685, 0.005401776172220707, -0.00335693359375, -0.00213623046875, 0.0002441480755805969, -0.001251220703125, 0.002288888208568096, -0.000579833984375, -0.001922607421875, 0, -0.002288818359375, -0.0048828125, 0.00238044373691082, 0.0006714072078466415, -0.00262451171875, 0.0025635547935962677, -0.002593994140625, -0.001861572265625, 0.0013733329251408577, -0.0015869140625, -0.00054931640625, 0.0005493331700563431, -0.002716064453125, -0.00189208984375, 0.0012512588873505592, -0.002349853515625, 0.0009460737928748131, 0.0016479995101690292, -0.00299072265625, 0.0007629627361893654, -0.000244140625, -0.0015869140625, 0.00198370311409235, 0.0004272591322660446, -0.0008544921875, 0.00198370311409235, 0.00033570360392332077, -0.0001220703125, 0.0032349620014429092, 0.0001831110566854477, -0.0001220703125, 0.0018005920574069023, -0.001007080078125, 0.00015259254723787308, 0.0010986663401126862, -0.001617431640625, 0.0006103701889514923, 0.0016174810007214546, -0.00146484375, 0.0009155552834272385, 0.0006714072078466415, -0.00201416015625, 0.0007324442267417908, 0.00027466658502817154, -0.000946044921875, 0.001037629321217537, -0.00042724609375, -0.00103759765625, 0.0010986663401126862, -0.000762939453125, -0.0006103515625, 0.0013733329251408577, -0.0013427734375, -0.00030517578125, 0.0011291848495602608, -0.001495361328125, 0.00012207403779029846, 0.0006408886983990669, -0.001678466796875, 0.00033570360392332077, 0.0006408886983990669, -0.00079345703125, 0.00027466658502817154, -0.000579833984375, -0.00030517578125, 0.00030518509447574615, -0.000885009765625, 0.00030518509447574615, -0.000030517578125, -0.001220703125, 0.00033570360392332077, 0.0004272591322660446, -0.00054931640625, -0.000244140625, -0.00048828125, -0.000244140625, 0.00012207403779029846, -0.000335693359375, 0.00012207403779029846, -0.000244140625, -0.000762939453125, 0, -0.000335693359375, -0.000579833984375, 0.00015259254723787308, -0.000518798828125, -0.00067138671875, 0.0002136295661330223, -0.0006103515625, -0.0003662109375, 0.0001831110566854477, -0.000640869140625, 0.000030518509447574615, 0.0001831110566854477, -0.000518798828125, 0.00009155552834272385, 0.00006103701889514923, -0.000518798828125, 0.0001831110566854477, 0.000030518509447574615, -0.00054931640625, 0.0001831110566854477, -0.00018310546875, -0.000396728515625, 0.00027466658502817154, -0.000244140625, -0.000244140625, 0.0002136295661330223, -0.0003662109375, -0.000213623046875, 0.0002136295661330223, -0.0003662109375, -0.000091552734375, 0.00009155552834272385, -0.000457763671875, -0.000030517578125, -0.000030517578125, -0.000396728515625, 0.000030518509447574615, -0.000091552734375, -0.000335693359375, 0.00006103701889514923, -0.000152587890625, -0.00030517578125, 0.00009155552834272385, -0.000213623046875, -0.000213623046875, 0.00009155552834272385, -0.000244140625, -0.000152587890625, 0.000030518509447574615, -0.000244140625, -0.000091552734375, 0.000030518509447574615, -0.000274658203125, -0.000030517578125, -0.000030517578125, -0.000244140625, 0, -0.000091552734375, -0.000213623046875, 0, -0.0001220703125, -0.00018310546875, 0, -0.000152587890625, -0.0001220703125, 0, -0.00018310546875, -0.0001220703125, -0.000030517578125, -0.00018310546875, -0.00006103515625, -0.00006103515625, -0.000152587890625, -0.000030517578125, -0.00006103515625, -0.000152587890625, -0.000030517578125, -0.000091552734375, -0.000091552734375, -0.00006103515625, -0.000091552734375, -0.000091552734375, -0.00006103515625, -0.000091552734375, -0.000091552734375, -0.00006103515625, -0.00006103515625, -0.00006103515625)
gi_AF_3D_HrirChannel4TableNumber = ftgen(0, 0, 256, -2, 0, 0.00006103701889514923, 0.000030518509447574615, 0.000030518509447574615, 0.000030518509447574615, 0, -0.00006103515625, 0, -0.0001220703125, 0.00012207403779029846, 0, -0.000213623046875, 0.00012207403779029846, -0.00152587890625, 0.00198370311409235, 0.004119998775422573, -0.012054443359375, -0.012847900390625, 0.05807672441005707, 0.02063051238656044, -0.117279052734375, 0.00634784996509552, 0.03814813494682312, -0.06744384765625, 0.05313272401690483, -0.01190185546875, -0.018157958984375, 0.12521743774414062, 0.049714650958776474, 0.010071108117699623, -0.02020263671875, -0.06134033203125, -0.04681396484375, 0.0024414807558059692, 0.0070192571729421616, -0.021942138671875, 0.009155552834272385, -0.02557373046875, -0.000030517578125, 0.02459791861474514, -0.01641845703125, 0.009033478796482086, 0.015350810252130032, 0.0013733329251408577, 0.004425183869898319, 0.027985472232103348, -0.0045166015625, -0.023895263671875, -0.005767822265625, -0.022003173828125, -0.003173828125, 0.010925626382231712, 0.01730399578809738, -0.00482177734375, -0.0244140625, -0.0068359375, -0.006805419921875, 0.003814813680946827, 0.006286812946200371, -0.0010986328125, -0.004913330078125, -0.0035400390625, -0.007598876953125, -0.005645751953125, 0.008880886249244213, 0.004577776417136192, 0.007751701399683952, 0.007110812701284885, -0.005340576171875, -0.00543212890625, 0.00030518509447574615, -0.001739501953125, 0.0037537766620516777, 0.003997924737632275, -0.009246826171875, -0.00091552734375, -0.000579833984375, -0.00262451171875, 0.0054322946816682816, -0.000732421875, -0.004302978515625, -0.000457763671875, -0.00274658203125, -0.004852294921875, 0.0012817773967981339, -0.001708984375, 0.00009155552834272385, 0.004425183869898319, -0.003204345703125, -0.0001220703125, 0.0023499252274632454, -0.003173828125, 0.00012207403779029846, 0.001831110566854477, -0.003509521484375, 0.0012512588873505592, 0.0012207403779029846, -0.003143310546875, 0.0025940733030438423, -0.0003662109375, -0.0025634765625, 0.0025025177747011185, -0.00054931640625, -0.0020751953125, 0.003265480510890484, -0.000396728515625, -0.001312255859375, 0.003326517529785633, -0.001983642578125, -0.0003662109375, 0.0023194067180156708, -0.0015869140625, 0.0014954069629311562, 0.002227851189672947, -0.002166748046875, 0.00033570360392332077, 0.0004882961511611938, -0.0035400390625, 0.001037629321217537, -0.000030517578125, -0.002227783203125, 0.0025940733030438423, -0.00018310546875, -0.000732421875, 0.0028077028691768646, -0.000213623046875, -0.00067138671875, 0.0016785180196166039, -0.001861572265625, -0.000732421875, 0.00119022186845541, -0.002410888671875, 0.0004272591322660446, 0.0009765923023223877, -0.0018310546875, 0.00119022186845541, 0.0006714072078466415, -0.001678466796875, 0.00119022186845541, -0.000152587890625, -0.00146484375, 0.0016174810007214546, -0.0010986328125, -0.0008544921875, 0.0016785180196166039, -0.00140380859375, -0.0003662109375, 0.0014648884534835815, -0.001251220703125, -0.00030517578125, 0.0010986663401126862, -0.001190185546875, 0.00009155552834272385, 0.0006714072078466415, -0.001129150390625, 0.0005188146606087685, 0.0007629627361893654, -0.00018310546875, 0.0008239997550845146, 0.0004272591322660446, -0.00048828125, 0.0005493331700563431, 0.00015259254723787308, -0.000335693359375, 0.00079348124563694, 0, -0.000030517578125, 0.0007629627361893654, -0.000030517578125, 0.00015259254723787308, 0.0006408886983990669, 0, 0.00033570360392332077, 0.0006408886983990669, 0.000030518509447574615, 0.0005493331700563431, 0.00033570360392332077, -0.00006103515625, 0.0005493331700563431, 0.00015259254723787308, 0.00006103701889514923, 0.0006714072078466415, 0.00006103701889514923, 0, 0.0005798516795039177, -0.000091552734375, 0.00012207403779029846, 0.0004882961511611938, -0.000244140625, 0.00015259254723787308, 0.00033570360392332077, -0.000274658203125, 0.0002441480755805969, 0.00030518509447574615, -0.000213623046875, 0.0004272591322660446, 0.0002441480755805969, -0.000152587890625, 0.0004272591322660446, 0.00009155552834272385, -0.000091552734375, 0.00045777764171361923, 0.000030518509447574615, -0.000030517578125, 0.00039674062281847, -0.00006103515625, 0.00006103701889514923, 0.00039674062281847, -0.0001220703125, 0.00012207403779029846, 0.00030518509447574615, -0.000152587890625, 0.0001831110566854477, 0.0002136295661330223, -0.000152587890625, 0.0002136295661330223, 0.00012207403779029846, -0.0001220703125, 0.00027466658502817154, 0.00006103701889514923, -0.000091552734375, 0.00027466658502817154, -0.000030517578125, -0.000030517578125, 0.0002441480755805969, -0.00006103515625, 0, 0.0002136295661330223, -0.000091552734375, 0.00006103701889514923, 0.0001831110566854477, -0.0001220703125, 0.00012207403779029846, 0.00012207403779029846, -0.000091552734375, 0.00015259254723787308, 0.00006103701889514923, -0.00006103515625, 0.00015259254723787308, 0.000030518509447574615, -0.000030517578125, 0.0001831110566854477, 0, 0.000030518509447574615, 0.00012207403779029846, 0, 0.000030518509447574615, 0.00009155552834272385, 0, 0.00006103701889514923, 0.00006103701889514923, 0.000030518509447574615, 0.00006103701889514923, 0.00006103701889514923, 0.000030518509447574615, 0.000030518509447574615)





//---------------------------------------------------------------------------------------------------------------------
// File: af_opcodes.orc
//---------------------------------------------------------------------------------------------------------------------








//---------------------------------------------------------------------------------------------------------------------
// File: definitions.orc
//---------------------------------------------------------------------------------------------------------------------


 #define X #0#
 #define Y #1#
 #define Z #2#

 #define R #0#
 #define T #1#

 #define AF_FALSE #0#
 #define AF_TRUE #1#

 #define AF_EPSILON_FLOAT #0.00000001#

 #define AF_MATH__PI #3.1419527#
 #define AF_MATH__PI2 #6.2831853#
 #define AF_MATH__PI_OVER_180 #0.01745329#
 #define AF_MATH__180_OVER_PI #57.29577951#

 #define AF_MATH__DEGREES_TO_RADIANS #$AF_MATH__PI_OVER_180#
 #define AF_MATH__RADIANS_TO_DEGREES #$AF_MATH__180_OVER_PI#

 #define AF_3D_FRAME_DURATION #0.01666667# // 1/60th of a second
; #define AF_3D_FRAME_DURATION_OVER_2 #0.00833333# // 1/60th of a second divided by 2
 #define AF_3D_FRAME_DURATION_OVER_2 #0.05# // Same as audio context buffer size in browsers that support it.

//---------------------------------------------------------------------------------------------------------------------
// AF_FuzzyEqual
//---------------------------------------------------------------------------------------------------------------------
// Returns $AF_TRUE if the given values are close to equal; otherwise returns $AF_FALSE.
//
// in  k  : Value to compare with other value.
// in  k  : Value to compare with other value.
//
// out k  : $AF_TRUE if the given values are close to equal; otherwise $AF_FALSE.
//
opcode AF_FuzzyEqual, k, kk
    k_a, k_b xin
    k_equal = $AF_TRUE
    if ($AF_EPSILON_FLOAT < abs(k_b - k_a)) then
        k_equal = $AF_FALSE
    endif
    xout k_equal
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_Math_RadiansFromDegrees
//---------------------------------------------------------------------------------------------------------------------
//
// in  k  : Degrees.
//
// out k  : Radians.
//
opcode AF_Math_RadiansFromDegrees, k, k
    k_degrees xin
    xout k_degrees * $AF_MATH__DEGREES_TO_RADIANS
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_Math_DegreesFromRadians
//---------------------------------------------------------------------------------------------------------------------
//
// in  k  : Radians.
//
// out k  : Degrees.
//
opcode AF_Math_DegreesFromRadians, k, k
    k_radians xin
    xout k_radians * $AF_MATH__DEGREES_TO_RADIANS
endop


opcode AF_Math_Sin, k, k
    k_degrees xin
    xout sin(AF_Math_RadiansFromDegrees(k_degrees))
endop


opcode AF_Math_Cos, k, k
    k_degrees xin
    xout cos(AF_Math_RadiansFromDegrees(k_degrees))
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_GetInstrumentId
//---------------------------------------------------------------------------------------------------------------------
// Returns the given float input as an instrument id string.
//
// in  i  : Instrument's p1 value.
//
// out S  : Instrument's p1 value formatted as a string enclosed in square brackets, i.e. "[i,s]" where 'i' is the
//          instrument number and 's' is the sub-instrument number.
//
opcode AF_GetInstrumentId, S, 0
    xout sprintf("[%.0f,%d]", p1, (p1 - floor(p1)) * 1000)
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_SendInstrumentOnMessage
//---------------------------------------------------------------------------------------------------------------------
// Sends an instrument 'on' message to Javascript.
//
// in  S  : Instrument's id.
// in  i  : Instrument's start time.
// in  j  : Instrument's duration. Defaults to -1.
//
opcode AF_SendInstrumentOnMessage, 0, Sij
    S_instrumentId, i_startTime, i_duration xin
    if (-1 == i_duration) then
        prints("{\"csd\":{\"i\":{\"id\":%s,\"on\":1,\"startTime\":%f}}}\n", S_instrumentId, i_startTime)
    else
        prints("{\"csd\":{\"i\":{\"id\":%s,\"on\":1,\"startTime\":%f,\"duration\":%f}}}\n", S_instrumentId,
            i_startTime, i_duration)
    endif
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_CreateKChannel
//---------------------------------------------------------------------------------------------------------------------
// Creates a k channel with the given channel name.
//
// in  S  : Channel name.
// in  o  : Optional default value. Zero if not set.
//
opcode AF_CreateKChannel, 0, So
    S_channelName, i_defaultValue xin
    chn_k S_channelName, 3, 0, i_defaultValue
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_GetKChannel
//---------------------------------------------------------------------------------------------------------------------
// Get the specified k channel's value.
//
// in  S  : Channel name.
//
// out k  : Channel value.
//
opcode AF_GetKChannel, k, S
    S_channelName xin
    k_channelValue chnget S_channelName
    xout k_channelValue
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_SetKChannel
//---------------------------------------------------------------------------------------------------------------------
// Set the specified k channel's value to the given value.
//
// in  S  : Channel name.
// in  k  : Channel value.
//
opcode AF_SetKChannel, 0, Sk
    S_channelName, k_channelValue xin
    chnset k_channelValue, S_channelName
endop


//----------------------------------------------------------------------------------------------------------------------
// File: log.orc
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------





//----------------------------------------------------------------------------------------------------------------------
// File: math.orc
//----------------------------------------------------------------------------------------------------------------------



opcode math_roundFloat_k, k, ki
    k_inputFloat, i_decimalPlaces xin
    k_outputFloat = k_inputFloat
    if (i_decimalPlaces == 0) then
        k_outputFloat = round(k_inputFloat)
    else
        i_10ToTheDecimalPlacesPower = pow(10, i_decimalPlaces)
        k_outputFloat = int(k_inputFloat)
        k_outputFloat += int(round(frac(k_inputFloat) * i_10ToTheDecimalPlacesPower)) / i_10ToTheDecimalPlacesPower
    endif
    xout k_outputFloat
endop

giFastSquareMaxI init 101
giFastSquareTable ftgen 0, 0, giFastSquareMaxI, 2, 0

instr math_InitFastSquareTable
    iI = 0
    while (iI < giFastSquareMaxI) do
        tablew(iI * iI, iI, giFastSquareTable)
        iI += 1
    od
    turnoff
endin

scoreline_i("i \"math_InitFastSquareTable\" 0 -1")

opcode math_fastSquare, i, i
    ii xin
    xout tablei(ii, giFastSquareTable)
endop

opcode math_fastSquare, k, k
    ki xin
    xout tablei(ki, giFastSquareTable)
endop

giFastSqrtMaxI init 10001
giFastSqrtTable ftgen 0, 0, giFastSqrtMaxI, 2, 0

instr math_InitFastSqrtTables
    iI = 0
    while (iI < giFastSqrtMaxI) do
        tablew(sqrt(iI), iI, giFastSqrtTable)
        iI += 1
    od
    turnoff
endin

scoreline_i("i \"math_InitFastSqrtTables\" 0 -1")

opcode math_fastSqrt, i, i
    ii xin
    xout tablei(ii, giFastSqrtTable)
endop

opcode math_fastSqrt, k, k
    ki xin
    xout tablei(ki, giFastSqrtTable)
endop


opcode math_rytToXyz, i[], iii
    iR, iY, iT xin
    iXyz[] init 3
    iXyz[$X] = iR * sin(iT)
    iXyz[$Y] = iY
    iXyz[$Z] = iR * cos(iT)
    xout iXyz
endop



//----------------------------------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------------------------------
// File: time.orc
//
// N.B. The opcodes in log.orc are not available in this file because log.orc includes it.
//----------------------------------------------------------------------------------------------------------------------




// The Csound 'times' opcode does not work as expected when called from a user defined opcode. This opcode uses the
// global k cycle counter to calculate the time. Note that at i time the global cycle counter hasn't been incremented,
// yet, so this opcode returns the time at the next global k cycle.
opcode time_i, i, 0
    xout (i(gk_i) + 1) / kr
endop

opcode time_k, k, 0
    xout gk_i / kr
endop

opcode time_string_i, S, 0
    i_time = time_i()
    i_hours = floor(i_time / 3600)
    i_ = i_time - (3600 * i_hours)
    i_minutes = floor(i_ / 60)
    i_seconds = floor(i_ - (60 * i_minutes))
    i_nanoseconds = 10000 * frac(i_time)
    xout sprintf("%d:%02d:%02d.%04d", i_hours, i_minutes, i_seconds, i_nanoseconds)
endop

opcode time_string_k, S, 0
    k_time = time_k()
    k_hours = floor(k_time / 3600)
    k_ = k_time - (3600 * k_hours)
    k_minutes = floor(k_ / 60)
    k_seconds = floor(k_ - (60 * k_minutes))
    k_nanoseconds = 10000 * frac(k_time)
    xout sprintfk("%d:%02d:%02d.%04d", k_hours, k_minutes, k_seconds, k_nanoseconds)
endop

opcode time_metro, k, i
    i_cps xin
    k_returnValue init 0

    i_secondsPerTick = 1 / i_cps
    i_startTime = time_i()
    k_nextTickTime init i_startTime
    k_currentTime = time_k()
    if (k_nextTickTime < k_currentTime) then
        k_returnValue = 1
        k_nextTickTime += i_secondsPerTick
    else
        k_returnValue = 0
    endif

    xout k_returnValue
endop



//----------------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------------
// File: af_spatial_opcodes.orc
//---------------------------------------------------------------------------------------------------------------------


 #define AF_3D_AUDIO__AMBISONIC_ORDER_MAX #3#
 #define AF_3D_AUDIO__SPEED_OF_SOUND #343# // Meters per second at 20 °C

// Use GEN02 to create table #1 for the listener matrix containing 16 values.
// This matrix is set to the BabylonJS camera's matrix in Javascript using the Csound WASM API.
// Note that we use GEN02 with a negative number to prevent Csound's auto-scaling of it's values.
gi_AF_3D_ListenerMatrixTableNumber ftgen 1, 0, 16, -2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1

// This gets updated by the AF_3D_UpdateListenerRotationMatrix opcode, which should be called in instrument 1
// before accessing the values in this matrix.
gk_AF_3D_ListenerRotationMatrix[] init 9

// This gets updated by the AF_3D_UpdateListenerPosition opcode, which should be called in instrument 1
// before accessing the values in this vector.
// TODO: Improve variable dependency organization.
gk_AF_3D_ListenerPosition[] init 3


//---------------------------------------------------------------------------------------------------------------------
// AF_3D_Audio_AzimuthLookupTableRow
//---------------------------------------------------------------------------------------------------------------------
// Returns the given azimuth's spherical harmonics lookup table row.
//
// in  k  : Azimuth in degrees.
//
// out k  : Azimuth spherical harmonics lookup table row.
//
 opcode AF_3D_Audio_AzimuthLookupTableRow, k, k
    k_azimuth xin
    k_azimuth = round(k_azimuth % 360)
    if (k_azimuth < 0) then
        k_azimuth += 360
    elseif (360 <= k_azimuth) then
        k_azimuth -= 360
    endif
    xout k_azimuth
 endop


//---------------------------------------------------------------------------------------------------------------------
// AF_3D_Audio_ElevationLookupTableRow
//---------------------------------------------------------------------------------------------------------------------
// Returns the given elevation's spherical harmonics lookup table row.
//
// in  k  : Elevation in degrees.
//
// out k  : Elevation spherical harmonics lookup table row.
//
 opcode AF_3D_Audio_ElevationLookupTableRow, k, k
    k_elevation xin
    xout min(round(min(90, max(-90, k_elevation))) + 90, 179)
 endop


//---------------------------------------------------------------------------------------------------------------------
// AF_3D_Audio_MaxReWeightsLookupTableRow
//---------------------------------------------------------------------------------------------------------------------
// Returns the given source width's max re weights lookup table row index.
//
// in  k  : Source width in degrees.
//
// out k  : Max re weights lookup table row.
//
 opcode AF_3D_Audio_MaxReWeightsLookupTableRow, k, k
    k_sourceWidth xin
    xout min(max(0, round(k_sourceWidth)), 359)
 endop


 gkAmbisonicChannelGains[] init 4 // first order ambisonics { i_channelCount = (i_ambisonicOrder + 1) * (i_ambisonicOrder + 1) }


//---------------------------------------------------------------------------------------------------------------------
// AF_3D_Audio_ChannelGains
//---------------------------------------------------------------------------------------------------------------------
// Returns an array of ambisonic channel gains for the given azimuth, elevation, and source width.
// The number of channel gains returned depends on the given ambisonic order.
//
// in  k  : Azimuth in degrees.
// in  k  : Elevation in degrees.
// in  k  : Source width in degrees.
// in  p  : Ambisonic order (1, 2, or 3). Optional. Defaults to 1.
//
// out k[]: Ambisonic channel gains. 1st order = 4 channels. 2nd order = 9 channels. 3rd order = 16 channels.
//
opcode AF_3D_Audio_ChannelGains, 0, kkkp
    kSourceAzimuth, k_elevation, k_sourceWidth, i_ambisonicOrder xin

    kListenerAzimuth = (cosinv(gk_AF_3D_ListenerRotationMatrix[2])) * $AF_MATH__RADIANS_TO_DEGREES
    if (gk_AF_3D_ListenerRotationMatrix[0] < 0) then
        kListenerAzimuth = 360 - kListenerAzimuth
    endif

    k_azimuth = (kSourceAzimuth + 180) % 360
    if (k_azimuth < 0) then
        k_azimuth += 360
    endif

    k_azimuthRow = AF_3D_Audio_AzimuthLookupTableRow(k_azimuth)
    k_elevationRow = AF_3D_Audio_ElevationLookupTableRow(k_elevation)
    k_spreadRow = AF_3D_Audio_MaxReWeightsLookupTableRow(k_sourceWidth)

    gkAmbisonicChannelGains[0] = gi_AF_3D_Audio_MaxReWeightsLookupTable[k_spreadRow][0]
    k_i = 1
    while (k_i <= i_ambisonicOrder) do
        k_degreeWeight = gi_AF_3D_Audio_MaxReWeightsLookupTable[k_spreadRow][k_i]
        k_j = -k_i
        while (k_j <= k_i) do
            k_channel = (k_i * k_i) + k_i + k_j
            k_elevationColumn = k_i * (k_i + 1) / 2 + abs(k_j) - 1
            k_gain = gi_AF_3D_Audio_SphericalHarmonicsElevationLookupTable[k_elevationRow][k_elevationColumn]
            if (k_j != 0) then
                if (k_j < 0) then
                    k_azimuthColumn = $AF_3D_AUDIO__AMBISONIC_ORDER_MAX + k_j
                else
                    k_azimuthColumn = $AF_3D_AUDIO__AMBISONIC_ORDER_MAX + k_j - 1
                endif
                if (k_azimuthRow < 180) then
                    k_gain *= gi_AF_3D_Audio_SphericalHarmonicsAzimuthLookupTable_000_179 [k_azimuthRow][k_azimuthColumn]

                else
                    k_gain *= gi_AF_3D_Audio_SphericalHarmonicsAzimuthLookupTable_180_359 [k_azimuthRow - 180][k_azimuthColumn]

                endif
            endif
            gkAmbisonicChannelGains[k_channel] = k_degreeWeight * k_gain
            k_j += 1
        od
        k_i += 1
    od

    ; if (changed(kListenerAzimuth) == 1 || changed(k_azimuth) == 1 || changed(k_elevation) == 1) then
    ; printsk("azimuth = %.03f, gains = [%.03f, %.03f, %.03f, %.03f], m012 = [%.03f, %.03f, %.03f], m345 = [%.03f, %.03f, %.03f], m678 = [%.03f, %.03f, %.03f]\n",
    ; k_azimuth,
    ; gkAmbisonicChannelGains[0], gkAmbisonicChannelGains[1], gkAmbisonicChannelGains[2], gkAmbisonicChannelGains[3],
    ; gk_AF_3D_ListenerRotationMatrix[0], gk_AF_3D_ListenerRotationMatrix[1], gk_AF_3D_ListenerRotationMatrix[2],
    ; gk_AF_3D_ListenerRotationMatrix[3], gk_AF_3D_ListenerRotationMatrix[4], gk_AF_3D_ListenerRotationMatrix[5],
    ; gk_AF_3D_ListenerRotationMatrix[6], gk_AF_3D_ListenerRotationMatrix[7], gk_AF_3D_ListenerRotationMatrix[8])
    ; endif
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_3D_Audio_ChannelGains
//---------------------------------------------------------------------------------------------------------------------
// Returns an array of ambisonic channel gains for the given position and source width.
// The number of channel gains returned depends on the given ambisonic order.
//
// in  i[]: Source position
// in  k  : Source width in degrees.
// in  p  : Ambisonic order (1, 2, or 3). Optional. Defaults to 1. Orders 2 and 3 are not implemented, yet.
//
// out k[]: Ambisonic channel gains. 1st order = 4 channels. 2nd order = 9 channels. 3rd order = 16 channels.
//
opcode AF_3D_Audio_ChannelGains, 0, i[]kp
    i_sourcePosition[], k_sourceWidth, i_ambisonicOrder xin

    k_direction[] = fillarray(i_sourcePosition[$X] - gk_AF_3D_ListenerPosition[$X],
        i_sourcePosition[$Y] - gk_AF_3D_ListenerPosition[$Y],
        i_sourcePosition[$Z] - gk_AF_3D_ListenerPosition[$Z])
    k_azimuth = taninv2(k_direction[$X], -k_direction[$Z]) * $AF_MATH__RADIANS_TO_DEGREES
    k_elevation = taninv2(k_direction[$Y],
        sqrt(k_direction[$X] * k_direction[$X] + k_direction[$Z] * k_direction[$Z])) * $AF_MATH__RADIANS_TO_DEGREES

    AF_3D_Audio_ChannelGains(k_azimuth, k_elevation, k_sourceWidth, i_ambisonicOrder)
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_3D_Audio_ChannelGains
//---------------------------------------------------------------------------------------------------------------------
// Returns an array of ambisonic channel gains for the given position and source width.
// The number of channel gains returned depends on the given ambisonic order.
//
// in  k[]: Source position
// in  k  : Source width in degrees. (k-rate)
// in  p  : Ambisonic order (1, 2, or 3). Optional. Defaults to 1. Orders 2 and 3 are not implemented, yet. (i-time)
//
// out k[]: Ambisonic channel gains. 1st order = 4 channels. 2nd order = 9 channels. 3rd order = 16 channels.
//
opcode AF_3D_Audio_ChannelGains, 0, k[]kp
    k_sourcePosition[], k_sourceWidth, i_ambisonicOrder xin

    k_direction[] = fillarray(k_sourcePosition[$X] - gk_AF_3D_ListenerPosition[$X],
        k_sourcePosition[$Y] - gk_AF_3D_ListenerPosition[$Y],
        k_sourcePosition[$Z] - gk_AF_3D_ListenerPosition[$Z])
    k_azimuth = taninv2(k_direction[$X], -k_direction[$Z]) * $AF_MATH__RADIANS_TO_DEGREES
    k_elevation = taninv2(k_direction[$Y],
        sqrt(k_direction[$X] * k_direction[$X] + k_direction[$Z] * k_direction[$Z])) * $AF_MATH__RADIANS_TO_DEGREES

    AF_3D_Audio_ChannelGains(k_azimuth, k_elevation, k_sourceWidth, i_ambisonicOrder)
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_3D_Audio_ChannelGains_XYZ
//---------------------------------------------------------------------------------------------------------------------
// Returns an array of ambisonic channel gains for the given position and source width.
// The number of channel gains returned depends on the given ambisonic order.
//
// in  k  : Source position X.
// in  k  : Source position Y.
// in  k  : Source position Z.
// in  P  : Source width in degrees. Optional. Defaults to 1. (k-rate)
// in  p  : Ambisonic order (1, 2, or 3). Optional. Defaults to 1. Orders 2 and 3 are not implemented, yet. (i-time)
//
// out k[]: Ambisonic channel gains. 1st order = 4 channels. 2nd order = 9 channels. 3rd order = 16 channels.
//
opcode AF_3D_Audio_ChannelGains_XYZ, 0, kkkPp
    k_sourcePositionX, k_sourcePositionY, k_sourcePositionZ, k_sourceWidth, i_ambisonicOrder xin

    k_direction[] init 3
    k_direction[$X] = k_sourcePositionX - gk_AF_3D_ListenerPosition[$X]
    k_direction[$Y] = k_sourcePositionY - gk_AF_3D_ListenerPosition[$Y]
    k_direction[$Z] = k_sourcePositionZ - gk_AF_3D_ListenerPosition[$Z]

    ; if (changed(k_direction[$X]) == 1 || changed(k_direction[$Z]) == 1) then
    ; printsk("k_direction = [%.03f, %.03f, %.03f], ", k_direction[$X], 0, k_direction[$Z])
    ; endif
    k_azimuth = taninv2(k_direction[$X], -k_direction[$Z]) * $AF_MATH__RADIANS_TO_DEGREES

    // Elevation is disabled for now since it complicates the calculations used to smooth out crossing over zero on the
    // x and y axes.
    k_elevation = taninv2(k_direction[$Y],
        sqrt(k_direction[$X] * k_direction[$X] + k_direction[$Z] * k_direction[$Z])) * $AF_MATH__RADIANS_TO_DEGREES

    ; if (changed(k_elevation) == 1) then
    ; printsk("k_elevation = %.03f\n", k_elevation)
    ; fi

    ; #if (0 || 0) && (0 || 0 || 0 || 0 || 0 || 0)
    ; if (changed(k_azimuth) == 1 || changed(k_elevation) == 1) then
    ;


    ; endif
    ; #endif

    AF_3D_Audio_ChannelGains(k_azimuth, k_elevation, k_sourceWidth, i_ambisonicOrder)

    // Smooth out crossing over zero on the x and y axes.
    ; i_minW = 0.79021
    ; i_maxW = 1.25
    ; i_diffW = i_maxW - i_minW
    ; k_distance = sqrt(k_direction[$X] * k_direction[$X] + k_direction[$Y] * k_direction[$Y])
    ; if (k_distance <= 1) then
    ; gkAmbisonicChannelGains[0] = i_maxW
    ; gkAmbisonicChannelGains[1] = 0
    ; gkAmbisonicChannelGains[2] = 0
    ; gkAmbisonicChannelGains[3] = 0
    ; elseif (k_distance <= 2) then
    ; k_distance -= 1
    ; gkAmbisonicChannelGains[0] = i_minW + (i_diffW * (1 - k_distance))
    ; gkAmbisonicChannelGains[1] = gkAmbisonicChannelGains[1] * k_distance
    ; gkAmbisonicChannelGains[2] = gkAmbisonicChannelGains[2] * k_distance
    ; gkAmbisonicChannelGains[3] = gkAmbisonicChannelGains[3] * k_distance
    ; endif
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_3D_Audio_ChannelGains_RTZ
//---------------------------------------------------------------------------------------------------------------------
// Returns an array of ambisonic channel gains for the given R, T, Z, and source width.
// The number of channel gains returned depends on the given ambisonic order.
//
// in  k  : Source position XY plane radius (needed to calculate the elevation angle).
// in  k  : Source position XY plane theta (aka azimuth).
// in  k  : Source position Z.
// in  P  : Source width in degrees. Optional. Defaults to 1. (k-rate)
// in  p  : Ambisonic order (1, 2, or 3). Optional. Defaults to 1. Orders 2 and 3 are not implemented, yet. (k-rate)
//
// out k[]: Ambisonic channel gains. 1st order = 4 channels. 2nd order = 9 channels. 3rd order = 16 channels.
//
opcode AF_3D_Audio_ChannelGains_RTZ, 0, kkkPp
    k_sourcePositionR, k_sourcePositionT, k_sourcePositionZ, k_sourceWidth, i_ambisonicOrder xin

    // Covert RT to XY.
    k_sourcePositionX = k_sourcePositionR * cos(k_sourcePositionT)
    k_sourcePositionY = k_sourcePositionR * sin(k_sourcePositionT)
    k_elevation = taninv2(k_sourcePositionZ, k_sourcePositionR) * $AF_MATH__RADIANS_TO_DEGREES
    AF_3D_Audio_ChannelGains_XYZ(k_sourcePositionX, k_sourcePositionY, k_sourcePositionZ, k_sourceWidth,
        i_ambisonicOrder)
endop

; giDistanceAttenuationTable = ftgen(0, 0, 513, 6, 1, 32, 1, 128, 0.5, 353, 0)

; f1 0 101 8 1 5 .99 20 0.55 25 0.23 40 0.01 10 0
; giDistanceAttenuationTable = ftgen(0, 0, 101, 8, 1, 5, .99, 20, 0.55, 25, 0.23, 40, 0.01, 10, 0)

; f1 0 101 5 1 100 0.0001
; giDistanceAttenuationTable = ftgen(0, 0, 101, 5, 1, 100, 0.0001)

; f1 0, 0, 101, 25 0 1 5 1 90 0.01 95 0.005 100 0.001
; giDistanceAttenuationTable = ftgen(0, 0, 101, 25, 0, 1, 5, 1, 90, 0.01, 95, 0.005, 100, 0.001)

; f1 0 251 25 0 1 5 1 250 0.00001
giDistanceAttenuationTable = ftgen(0, 0, 251, 25, 0, 1, 5, 1, 250, 0.00001)
//---------------------------------------------------------------------------------------------------------------------
// AF_3D_Audio_DistanceAttenuation
//---------------------------------------------------------------------------------------------------------------------
// Returns the attenuation for the given distance using the inverse distance model.
// See https://medium.com/@kfarr/understanding-web-audio-api-positional-audio-distance-models-for-webxr-e77998afcdff
// See https://www.desmos.com/calculator/lzxfqvwoqq
//
// in  k  : Distance.
// in  p  : Reference distance. Defaults to 1.
// in  p  : Rolloff factor. Default to 1.
//
// out k  : Attenuation.
//
opcode AF_3D_Audio_DistanceAttenuation, k, kpp
    kDistance, iReferenceDistance, iRolloffFactor xin
    kAttenuation = k(iReferenceDistance) / ((max(kDistance, iReferenceDistance) - iReferenceDistance) * iRolloffFactor + iReferenceDistance)
    ; if (changed(kAttenuation) == 1) then
    ; printsk("%.03f, %.03f\n", kDistance, kAttenuation)
    ; endif
    xout kAttenuation
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_3D_Audio_DistanceAttenuation
//---------------------------------------------------------------------------------------------------------------------
// Returns the logarithmic attenuation for the given distance.
//
// in  k  : Distance.
// in  k  : Maximum distance.
//
// out k  : Attenuation.
//
opcode AF_3D_Audio_DistanceAttenuation, k, kk
    kDistance, kMaxDistance xin
    xout tablei(kDistance / kMaxDistance, giDistanceAttenuationTable, 1)
    //xout kDistance / kMaxDistance
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_3D_Audio_DistanceAttenuation
//---------------------------------------------------------------------------------------------------------------------
// Returns the logarithmic attenuation for the given distance.
//
// in  i  : Distance.
// in  i  : Minimum distance.
// in  i  : Maximum distance.
//
// out i  : Attenuation.
//
opcode AF_3D_Audio_DistanceAttenuation_i, i, iii
    // TODO: Try changing this opcode to use a predefined curve instead of a logarithmic spike when objects are close.
    // Objects passing directly thru the camera are zippering and popping. Try a predefined curve instead of raw math.
    i_distance, i_minDistance, i_maxDistance xin
    i_linearFadeOutDistance = i_maxDistance - 1
    if (i_linearFadeOutDistance < i_distance) then
        i_fadeOutDistance = i_distance - i_linearFadeOutDistance
        if (i_fadeOutDistance < 1) then
            i_linearFadeFrom = 1 / i_maxDistance
            i_gain = i_linearFadeFrom * (1 - i_fadeOutDistance)
        else
            i_gain = 0
        endif
    else
        i_gain = 1 / (max(i_minDistance, i_distance) + 1)
    endif
    xout i_gain
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_3D_Audio_SourceDistance
//---------------------------------------------------------------------------------------------------------------------
// Returns the distance and direction from the listener to the given source position.
//
// in  i: Source's position x.
// in  i: Source's position y.
// in  i: Source's position z.
//
// out k  : Distance from listener to given source position.
//
opcode AF_3D_Audio_SourceDistance, k, iii
    iSourcePositionX, iSourcePositionY, iSourcePositionZ xin
    kVector[] init 3
    kVector[$X] = iSourcePositionX - gk_AF_3D_ListenerPosition[$X]
    kVector[$Y] = iSourcePositionY - gk_AF_3D_ListenerPosition[$Y]
    kVector[$Z] = iSourcePositionZ - gk_AF_3D_ListenerPosition[$Z]

    xout sqrt(kVector[$X] * kVector[$X] + kVector[$Y] * kVector[$Y] + kVector[$Z] * kVector[$Z])
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_3D_Audio_SourceDistance
//---------------------------------------------------------------------------------------------------------------------
// Returns the distance and direction from the listener to the given source position.
//
// in  k: Source's position x.
// in  k: Source's position y.
// in  k: Source's position z.
//
// out k  : Distance from listener to given source position.
//
opcode AF_3D_Audio_SourceDistance, k, kkk
    kSourcePositionX, kSourcePositionY, kSourcePositionZ xin
    kVector[] init 3
    kVector[$X] = kSourcePositionX - gk_AF_3D_ListenerPosition[$X]
    kVector[$Y] = kSourcePositionY - gk_AF_3D_ListenerPosition[$Y]
    kVector[$Z] = kSourcePositionZ - gk_AF_3D_ListenerPosition[$Z]

    xout sqrt(kVector[$X] * kVector[$X] + kVector[$Y] * kVector[$Y] + kVector[$Z] * kVector[$Z])
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_3D_Audio_SourceDistance
//---------------------------------------------------------------------------------------------------------------------
// Returns the distance and direction from the listener to the given source position.
//
// in  i[]: Source's position [x, y, z].
//
// out k  : Distance from listener to given source position.
//
opcode AF_3D_Audio_SourceDistance, k, i[]
    iSourcePosition[] xin
    kVector[] init 3
    kVector[$X] = iSourcePosition[$X] - gk_AF_3D_ListenerPosition[$X]
    kVector[$Y] = iSourcePosition[$Y] - gk_AF_3D_ListenerPosition[$Y]
    kVector[$Z] = iSourcePosition[$Z] - gk_AF_3D_ListenerPosition[$Z]

    xout sqrt(kVector[$X] * kVector[$X] + kVector[$Y] * kVector[$Y] + kVector[$Z] * kVector[$Z])
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_3D_Audio_SourceDistance
//---------------------------------------------------------------------------------------------------------------------
// Returns the distance and direction from the listener to the given source position.
//
// in  k[]: Source's position [x, y, z].
//
// out k  : Distance from listener to given source position.
//
opcode AF_3D_Audio_SourceDistance, k, k[]
    kSourcePosition[] xin

    kVector[] init 3
    kVector[$X] = kSourcePosition[$X] - gk_AF_3D_ListenerPosition[$X]
    kVector[$Y] = kSourcePosition[$Y] - gk_AF_3D_ListenerPosition[$Y]
    kVector[$Z] = kSourcePosition[$Z] - gk_AF_3D_ListenerPosition[$Z]

    xout sqrt(kVector[$X] * kVector[$X] + kVector[$Y] * kVector[$Y] + kVector[$Z] * kVector[$Z])
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_3D_Audio_SourceDirection
//---------------------------------------------------------------------------------------------------------------------
// Returns the direction from the listener to the given source position.
//
// in  k[]: Source's position [x, y, z].
//
// out k[]: Normalized direction vector from listener to given source position.
//
opcode AF_3D_Audio_SourceDirection, k[], k[]
    k_sourcePosition[] xin

    // Calculate distance to listener.
    k_direction[] = fillarray(k_sourcePosition[$X] - gk_AF_3D_ListenerPosition[$X],
        k_sourcePosition[$Y] - gk_AF_3D_ListenerPosition[$Y],
        k_sourcePosition[$Z] - gk_AF_3D_ListenerPosition[$Z])

    // Normalize direction vector.
    k_distance = sqrt(k_direction[$X] * k_direction[$X] + k_direction[$Y] * k_direction[$Y] + k_direction[$Z] * k_direction[$Z])

    if (0 < k_distance) then
        k_direction /= k_distance
    endif

    xout k_direction
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_3D_Audio_DopplerShift
//---------------------------------------------------------------------------------------------------------------------
//
// in  k  : The previous distance between the sound source and the listener.
// in  k  : The current distance between the sound source and the listener.
// in  k  : The time in seconds it took to move from the previous distance to the current distance.
//
// out k  : The amount of doppler shift calculated by comparing the given distance to the previously given distance.
//
opcode AF_3D_Audio_DopplerShift, k, kkk
    k_previousDistance, k_currentDistance, k_deltaTime xin

    k_dopplerShift init 1

    // Calculate doppler shift.
    if (0 < k_deltaTime) then
        k_deltaDistance = k_currentDistance - k_previousDistance
        k_velocity = k_deltaDistance / k_deltaTime
        k_dopplerShift = port($AF_3D_AUDIO__SPEED_OF_SOUND / ($AF_3D_AUDIO__SPEED_OF_SOUND + k_velocity),
            $AF_3D_FRAME_DURATION_OVER_2, 1)
    endif

    xout k_dopplerShift
endop


//----------------------------------------------------------------------------------------------------------------------
// File: time.orc
//
// N.B. The opcodes in log.orc are not available in this file because log.orc includes it.
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------------
// File: af_global.orc
//---------------------------------------------------------------------------------------------------------------------


// The sample rate, control rate, and number of channels are all set by the Csound WASM WebAudio node.
// TODO: Set 'ksmps' programatically based on the sample rate. This currently assumes a sample rate of 48000.
//ksmps = 120


// Set the audio peak to 1.0. Audio signal output should not exceed this value's bipolar range [-1, 1].
// TODO: Try setting 0dbfs in the Csound WASM WebAudio node instead of a .csd file.
//0dbfs = 1


//---------------------------------------------------------------------------------------------------------------------
// AF_3D_UpdateListenerRotationMatrix
//---------------------------------------------------------------------------------------------------------------------
// Sets the global listener rotation matrix to the global listener matrix table updated by Javascript, applying the
// given portamento to account for the frame rate being lower than the k-rate.
//
// in  j  : Half-time of portamento, in seconds.
//
opcode AF_3D_UpdateListenerRotationMatrix, 0, i
    i_portamento_halftime xin
    gk_AF_3D_ListenerRotationMatrix[0] = port(tab:k(0, gi_AF_3D_ListenerMatrixTableNumber), i_portamento_halftime)
    gk_AF_3D_ListenerRotationMatrix[1] = port(tab:k(1, gi_AF_3D_ListenerMatrixTableNumber), i_portamento_halftime)
    gk_AF_3D_ListenerRotationMatrix[2] = port(tab:k(2, gi_AF_3D_ListenerMatrixTableNumber), i_portamento_halftime)
    gk_AF_3D_ListenerRotationMatrix[3] = port(tab:k(4, gi_AF_3D_ListenerMatrixTableNumber), i_portamento_halftime)
    gk_AF_3D_ListenerRotationMatrix[4] = port(tab:k(5, gi_AF_3D_ListenerMatrixTableNumber), i_portamento_halftime)
    gk_AF_3D_ListenerRotationMatrix[5] = port(tab:k(6, gi_AF_3D_ListenerMatrixTableNumber), i_portamento_halftime)
    gk_AF_3D_ListenerRotationMatrix[6] = port(tab:k(8, gi_AF_3D_ListenerMatrixTableNumber), i_portamento_halftime)
    gk_AF_3D_ListenerRotationMatrix[7] = port(tab:k(9, gi_AF_3D_ListenerMatrixTableNumber), i_portamento_halftime)
    gk_AF_3D_ListenerRotationMatrix[8] = port(tab:k(10, gi_AF_3D_ListenerMatrixTableNumber), i_portamento_halftime)

    ; kM11 = tab:k(0, gi_AF_3D_ListenerMatrixTableNumber)
    ; if (changed(kM11) == 1) then
    ; printsk("listener azimuth = %.03f\n", sininv(kM11) * $AF_MATH__RADIANS_TO_DEGREES)
    ; endif

    ; kChanged = 0
    ; if (changed(gk_AF_3D_ListenerRotationMatrix[0]) == 1) then
    ; kChanged = 1
    ; endif
    ; if (changed(gk_AF_3D_ListenerRotationMatrix[1]) == 1) then
    ; kChanged = 1
    ; endif
    ; if (changed(gk_AF_3D_ListenerRotationMatrix[2]) == 1) then
    ; kChanged = 1
    ; endif
    ; if (changed(gk_AF_3D_ListenerRotationMatrix[3]) == 1) then
    ; kChanged = 1
    ; endif
    ; if (changed(gk_AF_3D_ListenerRotationMatrix[4]) == 1) then
    ; kChanged = 1
    ; endif
    ; if (changed(gk_AF_3D_ListenerRotationMatrix[5]) == 1) then
    ; kChanged = 1
    ; endif
    ; if (changed(gk_AF_3D_ListenerRotationMatrix[6]) == 1) then
    ; kChanged = 1
    ; endif
    ; if (changed(gk_AF_3D_ListenerRotationMatrix[7]) == 1) then
    ; kChanged = 1
    ; endif
    ; if (changed(gk_AF_3D_ListenerRotationMatrix[8]) == 1) then
    ; kChanged = 1
    ; endif

    ; kPrinted init 0
    ; if (kChanged == 1) then
    ; kPrinted = 0
    ; endif

    ; if (kChanged == 0 && kPrinted == 0) then
    ; printsk("gk_AF_3D_ListenerRotationMatrix ...\n")
    ; printsk("[%.3f, %.3f, %.3f]\n", gk_AF_3D_ListenerRotationMatrix[0], gk_AF_3D_ListenerRotationMatrix[1], gk_AF_3D_ListenerRotationMatrix[2])
    ; printsk("[%.3f, %.3f, %.3f]\n", gk_AF_3D_ListenerRotationMatrix[3], gk_AF_3D_ListenerRotationMatrix[4], gk_AF_3D_ListenerRotationMatrix[5])
    ; printsk("[%.3f, %.3f, %.3f]\n", gk_AF_3D_ListenerRotationMatrix[6], gk_AF_3D_ListenerRotationMatrix[7], gk_AF_3D_ListenerRotationMatrix[8])
    ; kPrinted = 1
    ; endif
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_3D_UpdateListenerPosition
//---------------------------------------------------------------------------------------------------------------------
// Sets the global listener position vector to the global listener matrix table updated by Javascript, applying the
// given portamento to account for the frame rate being lower than the k-rate.
//
// in  j  : Half-time of portamento, in seconds.
//
opcode AF_3D_UpdateListenerPosition, 0, i
    i_portamento_halftime xin

    kX = tab:k(12, gi_AF_3D_ListenerMatrixTableNumber)
    kY = tab:k(13, gi_AF_3D_ListenerMatrixTableNumber)
    kZ = tab:k(14, gi_AF_3D_ListenerMatrixTableNumber)
    gk_AF_3D_ListenerPosition[0] = port(kX, i_portamento_halftime)
    gk_AF_3D_ListenerPosition[1] = port(kY, i_portamento_halftime)
    gk_AF_3D_ListenerPosition[2] = port(kZ, i_portamento_halftime)

    ; kChanged = 0
    ; if (changed(kX) == 1) then
    ; kChanged = 1
    ; endif
    ; if (changed(kY) == 1) then
    ; kChanged = 1
    ; endif
    ; if (changed(kZ) == 1) then
    ; kChanged = 1
    ; endif
    ; if (kChanged == 1) then
    ; printsk("%s: Raw Csound listener position = [%.3f, %.3f, %.3f]\n", time_string_k(), kX, kY, kZ)
    ; endif
endop


// The 4 ambisonic outputs sent to the Csound WebAudio node in ACN order for conversion to stereo by the last Csound
// instrument (the Csound instrument with the highest instrument number).
ga_AF_3D_AmbisonicOutput[] init 4


//---------------------------------------------------------------------------------------------------------------------
// AF_Ambisonics_Send
//---------------------------------------------------------------------------------------------------------------------
// Calculates the given signal's ambisonic outputs and adds them to the global ambisonic send variable.
//
// in  a  : Signal to send.
// in  i[]: Signal's position
// in  P  : Signal's width in degrees. Optional. Defaults to 1.
//
opcode AF_Ambisonics_Send, 0, ai[]P
    a_signal, i_position[], k_width xin

    // Get the ambisonic channel gains.
    AF_3D_Audio_ChannelGains(i_position, k_width)

    // Mix the ambisonic channel gains into the global ambisonic outputs.
    ga_AF_3D_AmbisonicOutput[0] = ga_AF_3D_AmbisonicOutput[0] + (gkAmbisonicChannelGains[0] * a_signal)
    ga_AF_3D_AmbisonicOutput[1] = ga_AF_3D_AmbisonicOutput[1] + (gkAmbisonicChannelGains[1] * a_signal)
    ga_AF_3D_AmbisonicOutput[2] = ga_AF_3D_AmbisonicOutput[2] + (gkAmbisonicChannelGains[2] * a_signal)
    ga_AF_3D_AmbisonicOutput[3] = ga_AF_3D_AmbisonicOutput[3] + (gkAmbisonicChannelGains[3] * a_signal)
endop


//---------------------------------------------------------------------------------------------------------------------
// AF_Ambisonics_Send
//---------------------------------------------------------------------------------------------------------------------
// Calculates the given signal's ambisonic outputs and adds them to the global ambisonic send variable.
//
// in  a  : Signal to send.
// in  k[]: Signal's position
// in  P  : Signal's width in degrees. Optional. Defaults to 1.
//
opcode AF_Ambisonics_Send, 0, ak[]P
    a_signal, k_position[], k_width xin

    // Get the ambisonic channel gains.
    AF_3D_Audio_ChannelGains(k_position, k_width)

    // Mix the ambisonic channel gains into the global ambisonic outputs.
    ga_AF_3D_AmbisonicOutput[0] = ga_AF_3D_AmbisonicOutput[0] + (gkAmbisonicChannelGains[0] * a_signal)
    ga_AF_3D_AmbisonicOutput[1] = ga_AF_3D_AmbisonicOutput[1] + (gkAmbisonicChannelGains[1] * a_signal)
    ga_AF_3D_AmbisonicOutput[2] = ga_AF_3D_AmbisonicOutput[2] + (gkAmbisonicChannelGains[2] * a_signal)
    ga_AF_3D_AmbisonicOutput[3] = ga_AF_3D_AmbisonicOutput[3] + (gkAmbisonicChannelGains[3] * a_signal)
endop


// The reverb input signal sent to the reverb opcode and then the Csound WebAudio node.
ga_AF_Reverb_Send init 0


//---------------------------------------------------------------------------------------------------------------------
// AF_Reverb
//---------------------------------------------------------------------------------------------------------------------
// Adds the given signal to the global reverb send variable.
//
// in  a  : Signal to reverberate.
//
opcode AF_Reverb_Send, 0, a
    a_signal xin
    ga_AF_Reverb_Send += a_signal
endop








gi_instrumentCount = 1
gi_instrumentIndexOffset = 0
gaInstrumentSignals[][] init gi_instrumentCount, $INTERNAL_CHANNEL_COUNT

gi_auxCount = 1
gi_auxIndexOffset = 0
giAuxChannelIndexRanges[][][] init gi_auxCount, gi_instrumentCount, 2 // 3rd column contains { [0]: low index, [1]: high index }
ga_auxVolumes[][][] init gi_auxCount, gi_instrumentCount, $INTERNAL_CHANNEL_COUNT
ga_auxSignals[][] init gi_auxCount, $INTERNAL_CHANNEL_COUNT

gi_trackCount = gi_instrumentCount + gi_auxCount
giMasterChannelIndexRanges[][] init gi_trackCount, 2 // 2nd column contains { [0]: low index, [1]: high index }
ga_masterVolumes[][] init gi_trackCount, $INTERNAL_CHANNEL_COUNT
ga_masterSignals[] init $INTERNAL_CHANNEL_COUNT


instr 1
    AF_3D_UpdateListenerRotationMatrix(0.01)
    AF_3D_UpdateListenerPosition(0.01)
endin


instr 2
    gi_instrumentCount = p4
    gi_instrumentIndexOffset = p5
    gi_auxCount = p6
    gi_auxIndexOffset = p7
    gi_trackCount = gi_instrumentCount + gi_auxCount

    a_instrumentSignals[][] init gi_instrumentCount, $INTERNAL_CHANNEL_COUNT
    gaInstrumentSignals = a_instrumentSignals

    // TODO: Make the DAW service set these using score lines.
    iAuxChannelIndexRanges[][][] init gi_auxCount, gi_instrumentCount, 2
    iI = 0
    while (iI < gi_auxCount) do
        iJ = 0
        while (iJ < gi_instrumentCount) do
            iAuxChannelIndexRanges[iI][iJ][0] = 0
            iAuxChannelIndexRanges[iI][iJ][1] = $INTERNAL_CHANNEL_COUNT - 1
            iJ += 1
        od
        iI += 1
    od
    giAuxChannelIndexRanges = iAuxChannelIndexRanges

    a_auxVolumes[][][] init gi_auxCount, gi_instrumentCount, $INTERNAL_CHANNEL_COUNT
    ga_auxVolumes = a_auxVolumes

    a_auxSignals[][] init gi_auxCount, $INTERNAL_CHANNEL_COUNT
    ga_auxSignals = a_auxSignals


    // TODO: Make the DAW service set these using score lines.
    iMasterChannelIndexRanges[][] init gi_trackCount, 2
    iI = 0
    while (iI < gi_trackCount) do
        iMasterChannelIndexRanges[iI][0] = 0
        iMasterChannelIndexRanges[iI][1] = $INTERNAL_CHANNEL_COUNT - 1
        iI += 1
    od
    giMasterChannelIndexRanges = iMasterChannelIndexRanges

    a_masterVolumes[][] init gi_trackCount, $INTERNAL_CHANNEL_COUNT
    ga_masterVolumes = a_masterVolumes

    a_masterSignals[] init $INTERNAL_CHANNEL_COUNT
    ga_masterSignals = a_masterSignals

    #ifndef IS_ANIMATIONS_ONLY
        event_i("i", 3, 0, -1) // clear signals
        event_i("i", 7, 1, -1) // mix instruments into auxes
        event_i("i", 11, 1, -1) // mix signals
    #end

    turnoff
endin


// Clear signals instrument. All included instruments should have instrument numbers higher than this instrument.
//
instr 3
    gk_i += 1

    k_instrument = 0
    while (k_instrument < gi_instrumentCount) do
        k_channel = 0
        while (k_channel < $INTERNAL_CHANNEL_COUNT) do
            gaInstrumentSignals[k_instrument][k_channel] = 0
            k_channel += 1
        od
        k_instrument += 1
    od

    k_bus = 0
    while (k_bus < gi_auxCount) do
        k_channel = 0
        while (k_channel < $INTERNAL_CHANNEL_COUNT) do
            ga_auxSignals[k_bus][k_channel] = 0
            k_channel += 1
        od
        k_bus += 1
    od

    k_channel = 0
    while (k_channel < $INTERNAL_CHANNEL_COUNT) do
        ga_masterSignals[k_channel] = 0
        k_channel += 1
    od
endin


 #ifdef IS_GENERATING_JSON
    giWriteComma init 0
    gSPluginUuids[][] init 1000, 100

    opcode setPluginUuid, 0, iiS
        iTrackIndex, iPluginIndex, SUuid xin
        ; if (iPluginIndex > 0 && strlen(gSPluginUuids[iTrackIndex][iPluginIndex]) == 0) then
        ; gSPluginUuids[iTrackIndex][iPluginIndex] = "bus-head"
        ; endif
        gSPluginUuids[iTrackIndex][iPluginIndex] = SUuid
    endop

    instr StartJsonArray
        turnoff
        fprints("DawPlayback.json", "[")
    endin

    instr EndJsonArray
        turnoff
        fprints("DawPlayback.json", "]")
    endin

    instr StartJsonObject
        turnoff
        fprints("DawPlayback.json", "{")
    endin

    instr EndJsonObject
        turnoff
        fprints("DawPlayback.json", "}")
    endin

    instr GeneratePluginJson
        turnoff
        SPluginUuid = strget(p4)

        if (giWriteComma == 1) then
            fprints("DawPlayback.json", ",")
        else
            giWriteComma = 1
        endif

        fprints("DawPlayback.json", sprintf("\"%s\":[", SPluginUuid))

        iI = 0
        iWriteComma = 0

        while (1 == 1) do
            SFileName = sprintf("json/%s.%d.json", SPluginUuid, iI)

            iJ = 0
            while (iJ != -1) do
                // Csound will delete this instrument if the given file doesn't exist.
                SLine, iJ readfi SFileName

                if (iJ == -1) then

                else

                    // A comma isn't needed if the file doesn't exist so we wait to write the comma after Csound is given a
                    // chance to delete this instrument if the file doesn't exist.
                    if (iWriteComma == 1) then
                        fprints("DawPlayback.json", ",")
                    else
                        iWriteComma = 1
                    endif

                    // Remove trailing newline.
                    if (strcmp(strsub(SLine, strlen(SLine) - 1, strlen(SLine)), "\n") == 0) then
                        SLine = strsub(SLine, 0, strlen(SLine) - 1)
                    endif
                    fprints("DawPlayback.json", SLine)

                endif
            od

            iI += 1
        od
    endin

    instr GenerateJson
        prints("instr GenerateJson ...\n")

        scoreline_i("i \"StartJsonObject\" 0 0")
        iI = 0
        while (iI < 1000) do
            if (strlen(gSPluginUuids[iI][0]) == 36) then // 36 == UUID length
                scoreline_i(sprintf("i \"GeneratePluginJson\" 0 0 \"%s\"", gSPluginUuids[iI][0]))
                scoreline_i("i \"EndJsonArray\" 0 0")
            endif
            iI += 1
        od
        scoreline_i("i \"EndJsonObject\" 0 0")

        prints("instr GenerateJson - done\n")
    endin
 #end














//----------------------------------------------------------------------------------------------------------------------
// File: DistanceDelaySynth.orc
//----------------------------------------------------------------------------------------------------------------------






// TODO: This might be unused, now. If unused, remove it from this file, DawService.csd and TrackInfo_*.orc.








 #ifndef ADSR_LINSEGR_UDO_ORC
 #define ADSR_LINSEGR_UDO_ORC ##

opcode adsr_linsegr, a, iiii
    iA, iD, iS, iR xin
    iA = max(0.000001, iA)
    iD = max(0.000001, iD)
    iR = max(0.000001, iR)
    aOut = linsegr(0, iA, 1, iD, iS, 1, iS, iR, 0)
    xout aOut
endop

opcode adsr_linsegr, k, kkkk
    iA, iD, iS, iR xin
    iA = max(0.000001, iA)
    iD = max(0.000001, iD)
    iR = max(0.000001, iR)
    kOut = linsegr(0, iA, 1, iD, iS, 1, iS, iR, 0)
    xout kOut
endop

 #end

gSCcInfo_DistanceDelaySynth[] = fillarray( \
\
    "example", "bool", "false", "synced", \
\
    "", "", "", "") // dummy line

 #define gSCcInfo_DistanceDelaySynth_Count #8#



 #define CC_INFO_CHANNEL #0#
 #define CC_INFO_TYPE #1#
 #define CC_INFO_VALUE #2#
 #define CC_INFO_SYNC_TYPE #3#

 #define CC_NO_SYNC #0#
 #define CC_SYNC_TO_CHANNEL #1#
 #ifdef gSCcInfo_DistanceDelaySynth_Count
    // Reshape the gSCcInfo array if it hasn't been reshaped already. This check is required for reloadable instruments
    // because global arrays retain their shape across reloads.
    if (lenarray(gSCcInfo_DistanceDelaySynth) == $gSCcInfo_DistanceDelaySynth_Count) then
        giCcCount_DistanceDelaySynth = (lenarray(gSCcInfo_DistanceDelaySynth) / 4) - 1
        reshapearray(gSCcInfo_DistanceDelaySynth, giCcCount_DistanceDelaySynth + 1, 4)
    endif
 #else
    giCcCount_DistanceDelaySynth = (lenarray(gSCcInfo_DistanceDelaySynth) / 4) - 1
    reshapearray(gSCcInfo_DistanceDelaySynth, giCcCount_DistanceDelaySynth + 1, 4)
 #end

opcode ccIndex_DistanceDelaySynth, i, S
    SChannel xin
    kgoto end
    iI = 0
    while (iI < giCcCount_DistanceDelaySynth) do
        if (strcmp(gSCcInfo_DistanceDelaySynth[iI][$CC_INFO_CHANNEL], SChannel) == 0) igoto end
        iI += 1
    od
    iI = -1
end:
    // Uncomment the following line to dump the CC index numbers and names.
    ; printf("%d = %s\n", 1, iI, SChannel)
    xout iI
endop

giCcValueDefaults_DistanceDelaySynth[] init giCcCount_DistanceDelaySynth
giCcValues_DistanceDelaySynth[][] init 1, giCcCount_DistanceDelaySynth
gkCcValues_DistanceDelaySynth[][] init 1, giCcCount_DistanceDelaySynth

gkCcSyncTypes_DistanceDelaySynth[][] init 1, giCcCount_DistanceDelaySynth

// Set CC default values.
instr DistanceDelaySynth_InitializeCcValues


    iI = 0
    while (iI < giCcCount_DistanceDelaySynth) do
        SType = gSCcInfo_DistanceDelaySynth[iI][$CC_INFO_TYPE]
        SValue = gSCcInfo_DistanceDelaySynth[iI][$CC_INFO_VALUE]

        iJ = 0
        while (iJ < 1) do
            iValue = -1
            if (strcmp(SType, "bool") == 0) then
                if (strcmp(SValue, "false") == 0) then
                    iValue = 0
                else
                    iValue = 1
                endif
            elseif (strcmp(SType, "number") == 0 && strcmp(SValue, "") != 0) then
                iValue = strtod(SValue)
            endif
            giCcValueDefaults_DistanceDelaySynth[iI] = iValue
            giCcValues_DistanceDelaySynth[iJ][iI] = iValue
            iJ += 1
        od
        iI += 1
    od

    igoto end

    kI = 0
    while (kI < giCcCount_DistanceDelaySynth) do
        SType = gSCcInfo_DistanceDelaySynth[kI][$CC_INFO_TYPE]
        SValue = gSCcInfo_DistanceDelaySynth[kI][$CC_INFO_VALUE]
        SSyncType = gSCcInfo_DistanceDelaySynth[kI][$CC_INFO_SYNC_TYPE]

        kJ = 0
        while (kJ < 1) do
            kValue = -1
            if (strcmpk(SType, "bool") == 0) then
                if (strcmpk(SValue, "false") == 0) then
                    kValue = 0
                else
                    kValue = 1
                endif
            elseif (strcmpk(SType, "number") == 0 && strcmpk(SValue, "") != 0) then
                kValue = strtodk(SValue)
            endif
            gkCcValues_DistanceDelaySynth[kJ][kI] = kValue

            gkCcSyncTypes_DistanceDelaySynth[kJ][kI] = $CC_NO_SYNC
            if (strcmpk(SSyncType, "synced") == 0) then
                gkCcSyncTypes_DistanceDelaySynth[kJ][kI] = $CC_SYNC_TO_CHANNEL
            endif
            kJ += 1
        od
        kI += 1
    od
    turnoff
end:
endin

event_i("i", "DistanceDelaySynth_InitializeCcValues", 0, -1)

instr DistanceDelaySynth_CreateCcIndexes
    giCc_DistanceDelaySynth_example init ccIndex_DistanceDelaySynth("example")

    turnoff
endin

event_i("i", "DistanceDelaySynth_CreateCcIndexes", 0, -1)

//----------------------------------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------------------------------

giDistanceDelaySynth_StartDistance = 60
giDistanceDelaySynth_DelayDistance = 100
giDistanceDelaySynth_NoteNumberToHeightScale = 7.5
giDistanceDelaySynth_DelayTime = 0.5 // seconds
giDistanceDelaySynth_Duration = 0.49 // seconds
giDistanceDelaySynth_DelayCount = 5
giDistanceDelaySynth_MaxAmpWhenVeryClose = 0.5
giDistanceDelaySynth_ReferenceDistance = 0.1
giDistanceDelaySynth_RolloffFactor = 0.00075
giDistanceDelaySynth_PlaybackVolumeAdjustment = 1
giDistanceDelaySynth_PlaybackReverbAdjustment = 0.29

giDistanceDelaySynth_NoteIndex[] init 1
giDistanceDelaySynth_InstrumentNumberFraction[] init 1

 #ifndef DISTANCE_DELAY_SYNTH_NOTE_CACHE_ARRAY
    #define DISTANCE_DELAY_SYNTH_NOTE_CACHE_ARRAY #init 1#
 #end

 #ifndef DISTANCE_DELAY_SYNTH_LOWEST_NOTE_NUMBER
    #define DISTANCE_DELAY_SYNTH_LOWEST_NOTE_NUMBER #0#
 #end

giDistanceDelaySynth_LowestNoteNumber = $DISTANCE_DELAY_SYNTH_LOWEST_NOTE_NUMBER
giDistanceDelaySynth_SampleCacheNoteNumbers[] $DISTANCE_DELAY_SYNTH_NOTE_CACHE_ARRAY
giDistanceDelaySynth_SampleCacheTableNumbers[] init lenarray(giDistanceDelaySynth_SampleCacheNoteNumbers)
giDistanceDelaySynth_SampleCacheLength init sr * giDistanceDelaySynth_Duration
giDistanceDelaySynth_SampleCacheTableLength = 2
while (giDistanceDelaySynth_SampleCacheTableLength < giDistanceDelaySynth_SampleCacheLength) do
    giDistanceDelaySynth_SampleCacheTableLength *= 2
od
; prints("giDistanceDelaySynth_SampleCacheTableLength = %d\n", giDistanceDelaySynth_SampleCacheTableLength)

iI = 0
while (iI < lenarray(giDistanceDelaySynth_SampleCacheNoteNumbers)) do
    // Generate empty tables to hold each note's sample cache.
    giDistanceDelaySynth_SampleCacheTableNumbers[iI] = ftgen(0, 0, giDistanceDelaySynth_SampleCacheTableLength, 2, 0)
    iI += 1
od



//----------------------------------------------------------------------------------------------------------------------

 #ifdef IS_GENERATING_JSON
    setPluginUuid(0, 0, "6c9f37ab-392f-429b-8217-eac09f295362")

    instr DistanceDelaySynth_Json
        SJsonFile = sprintf("json/%s.0.json", "6c9f37ab-392f-429b-8217-eac09f295362")
        fprints(SJsonFile, "{")
        fprints(SJsonFile, sprintf("\"instanceName\":\"%s\"", ""))
        fprints(SJsonFile, sprintf(",\"startDistance\":%d", giDistanceDelaySynth_StartDistance))
        fprints(SJsonFile, sprintf(",\"delayDistance\":%d", giDistanceDelaySynth_DelayDistance))
        fprints(SJsonFile, sprintf(",\"noteNumberToHeightScale\":%.02f", giDistanceDelaySynth_NoteNumberToHeightScale))
        fprints(SJsonFile, sprintf(",\"delayTime\":%.02f", giDistanceDelaySynth_DelayTime))
        fprints(SJsonFile, sprintf(",\"duration\":%.01f", giDistanceDelaySynth_Duration))
        fprints(SJsonFile, sprintf(",\"delayCount\":%d", giDistanceDelaySynth_DelayCount))
        fprints(SJsonFile, "}")
        turnoff
    endin
 #end


instr 4

    iEventType = p4
    if (iEventType == 4) then
        turnoff
    elseif (iEventType == 3 || iEventType == 5) then
        iNoteNumber = p5
        iVelocity = p6
        iDelayIndex = p7

        #ifndef IS_ANIMATIONS_ONLY
            iSampleCacheI = -1
            iI = 0
            while (iI < lenarray(giDistanceDelaySynth_SampleCacheNoteNumbers)) do
                if (iNoteNumber == giDistanceDelaySynth_SampleCacheNoteNumbers[iI]) then
                    iSampleCacheI = iI
                    iI = lenarray(giDistanceDelaySynth_SampleCacheNoteNumbers) // kick out of while loop
                endif
                iI += 1
            od
            if (iSampleCacheI == -1 || iSampleCacheI == lenarray(giDistanceDelaySynth_SampleCacheNoteNumbers)) then

                ; turnoff
            endif
            ; prints("iNoteNumber = %d, iSampleCacheI = %d\n", iNoteNumber, iSampleCacheI)


                iIsPlayback = 1




            a1 init 0
            asig init 0

            if(iIsPlayback == 0 || iEventType == 5) then
                iAmp init 0
                if (iIsPlayback == 0) then
                    iAmp = (iVelocity / 127) * (1 - (iNoteNumber / 127))
                else
                    iAmp = 1
                endif
                iCps = cpsmidinn(iNoteNumber + 3)
                iCpsRandomized = iCps * random:i(0.999, 1.001)

                // Based on instrument Syn2 from "Interlocking Rhythms" by Steven Yi.
                // https://ide.csound.com/editor/8LFMLfAdH4kezFNEuii7

                ;; 6-OP FM
                asig = foscili(iAmp, iCps, 1, 1, expseg(2, 1, 0.1, 1, 0.001))
                asig += foscili(iAmp * ampdbfs(-18) * expon(1, 1, 0.001), iCps * 4, 1, 1, expseg(2, 1, 0.01, 1, 0.01))
                asig += foscili(iAmp * ampdbfs(-30) * expon(1, .5, 0.001), iCps * 8, 1, 1, expseg(1, 1, 0.01, 1, 0.01))

                asig *= expseg(0.01, 0.02, 1, .03, 0.5, p3 - .34, .4, 0.29, 0.001)

                ;; Filter
                ioct = octcps(iCpsRandomized)
                asig = K35_lpf(asig, cpsoct(expseg(min:i(14, ioct + 5), 1, ioct, 1, ioct)), 1, 1.5)
                asig = K35_hpf(asig, iCpsRandomized, 0.5)

                ;; Resonant body
                ain = asig * ampdbfs(-60)

                a1 = mode(ain, 500, 20)
                a1 += mode(ain, 900, 10)
                a1 += mode(ain, 1700, 6)

                ;; Attack envelope and declick
                asig *= linen:a(1, 0.025, p3, 0.001)

                asig += a1

                if (iEventType == 5) then
                    ; prints("Copying asig into note's sample cache table.\n")
                    // Copy `asig` into note's sample cache table at sample offset `kPass` * ksmps.
                    kPass init 0
                    kDummy = tablewa(giDistanceDelaySynth_SampleCacheTableNumbers[iSampleCacheI], asig, kPass * ksmps)
                    kPass += 1
                    goto end
                endif
            endif

            if (iIsPlayback == 1 && iSampleCacheI >= 0) then
                // Read `asig` from note's sample cache.
                ; prints("table length = %d\n", ftlen(giDistanceDelaySynth_SampleCacheTableNumbers[iSampleCacheI]))
                asig = oscil(1, 1, giDistanceDelaySynth_SampleCacheTableNumbers[iSampleCacheI])
            endif


                a1 = gaInstrumentSignals[0][0]
                a2 = gaInstrumentSignals[0][1]
                a3 = gaInstrumentSignals[0][2]
                a4 = gaInstrumentSignals[0][3]
                a5 = gaInstrumentSignals[0][4] // Reverb







        #end

        kY init (iNoteNumber - giDistanceDelaySynth_LowestNoteNumber) * giDistanceDelaySynth_NoteNumberToHeightScale
        iRadius = giDistanceDelaySynth_StartDistance + giDistanceDelaySynth_DelayDistance * iDelayIndex
        kRotationIndex = 0
        while (kRotationIndex < 3) do
            kTheta = 3.141592653589793 + (2 * 3.141592653589793 / 3) * kRotationIndex
            kX = sin(kTheta) * iRadius
            kZ = cos(kTheta) * iRadius

            #ifndef IS_ANIMATIONS_ONLY
                kDistance = AF_3D_Audio_SourceDistance(kX, kY, kZ)
                kDistanceAmp = AF_3D_Audio_DistanceAttenuation(kDistance, giDistanceDelaySynth_ReferenceDistance, giDistanceDelaySynth_RolloffFactor)
                kDistanceAmp = min(kDistanceAmp, giDistanceDelaySynth_MaxAmpWhenVeryClose)

                    kDistanceAmp *= giDistanceDelaySynth_PlaybackVolumeAdjustment

                aOutDistanced = asig * kDistanceAmp

                AF_3D_Audio_ChannelGains_XYZ(kX, kY, kZ)
                iPlaybackReverbAdjustment init 1

                    iPlaybackReverbAdjustment = giDistanceDelaySynth_PlaybackReverbAdjustment


                ; aOutDistanced = compress2(
                ; aOutDistanced,
                ; aOutDistanced,
                ; -90, // threshold
                ; -50, // low knee
                ; -25, // high knee
                ; 1.02, // ratio
                ; .1, // attack time in seconds
                ; .5, // release time in seconds
                ; .02) // look-ahead time in seconds

                a1 += gkAmbisonicChannelGains[0] * aOutDistanced
                a2 += gkAmbisonicChannelGains[1] * aOutDistanced
                a3 += gkAmbisonicChannelGains[2] * aOutDistanced
                a4 += gkAmbisonicChannelGains[3] * aOutDistanced
                a5 += asig * 2 * kDistanceAmp * iPlaybackReverbAdjustment
            #end

            kRotationIndex += 1
        od

        #ifndef IS_ANIMATIONS_ONLY

                gaInstrumentSignals[0][0] = a1
                gaInstrumentSignals[0][1] = a2
                gaInstrumentSignals[0][2] = a3
                gaInstrumentSignals[0][3] = a4
                gaInstrumentSignals[0][4] = a5
                gaInstrumentSignals[0][5] = a5
        #end

        #ifdef IS_GENERATING_JSON
            if (iDelayIndex == 0) then
                if (giDistanceDelaySynth_NoteIndex[0] == 0) then
                    scoreline_i("i \"DistanceDelaySynth_Json\" 0 0")
                endif
                giDistanceDelaySynth_NoteIndex[0] = giDistanceDelaySynth_NoteIndex[0] + 1
                SJsonFile = sprintf("json/%s.%d.json", "6c9f37ab-392f-429b-8217-eac09f295362", giDistanceDelaySynth_NoteIndex[0])
                fprints(SJsonFile, "{\"noteOn\":{\"time\":%.3f,\"note\":%d,\"velocity\":%d}}",
                    times(), iNoteNumber, iVelocity)
                ficlose(SJsonFile)
            endif
        #end
    endif
end:
endin



    instr Preallocate_4
        ii = 0
        iCount = giPresetUuidPreallocationCount[0]
        while (ii < iCount) do
            scoreline_i(sprintf("i %d.%.3d 0 1 %d 1 1 0",
                4,
                ii,
                3))
            ii += 1
        od
        turnoff
    endin
    scoreline_i(sprintf("i \"Preallocate_%d\" 0 -1", 4))

    instr FillSampleCache_4
        iI = 0
        while (iI < lenarray(giDistanceDelaySynth_SampleCacheNoteNumbers)) do
            prints("Filling DistanceDelaySynth sample cache for note %d\n", giDistanceDelaySynth_SampleCacheNoteNumbers[iI])
            scoreline_i(sprintf(
                "i %d 0 %f %d %d 127 0",
                4,
                giDistanceDelaySynth_Duration,
                5,
                giDistanceDelaySynth_SampleCacheNoteNumbers[iI]))
            iI += 1
        od
        turnoff
    endin
    scoreline_i(sprintf("i \"FillSampleCache_%d\" 0 -1", 4))


//----------------------------------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------------------------------
// File: PointSynth.orc
//----------------------------------------------------------------------------------------------------------------------






// TODO: This might be unused, now. If unused, remove it from this file, DawService.csd and TrackInfo_*.orc.








 #ifndef ADSR_LINSEGR_UDO_ORC
 #define ADSR_LINSEGR_UDO_ORC ##

opcode adsr_linsegr, a, iiii
    iA, iD, iS, iR xin
    iA = max(0.000001, iA)
    iD = max(0.000001, iD)
    iR = max(0.000001, iR)
    aOut = linsegr(0, iA, 1, iD, iS, 1, iS, iR, 0)
    xout aOut
endop

opcode adsr_linsegr, k, kkkk
    iA, iD, iS, iR xin
    iA = max(0.000001, iA)
    iD = max(0.000001, iD)
    iR = max(0.000001, iR)
    kOut = linsegr(0, iA, 1, iD, iS, 1, iS, iR, 0)
    xout kOut
endop

 #end

gSCcInfo_PointSynth[] = fillarray( \
\
    "example", "bool", "false", "synced", \
\
    "", "", "", "") // dummy line

 #define gSCcInfo_PointSynth_Count #8#



 #define CC_INFO_CHANNEL #0#
 #define CC_INFO_TYPE #1#
 #define CC_INFO_VALUE #2#
 #define CC_INFO_SYNC_TYPE #3#

 #define CC_NO_SYNC #0#
 #define CC_SYNC_TO_CHANNEL #1#
 #ifdef gSCcInfo_PointSynth_Count
    // Reshape the gSCcInfo array if it hasn't been reshaped already. This check is required for reloadable instruments
    // because global arrays retain their shape across reloads.
    if (lenarray(gSCcInfo_PointSynth) == $gSCcInfo_PointSynth_Count) then
        giCcCount_PointSynth = (lenarray(gSCcInfo_PointSynth) / 4) - 1
        reshapearray(gSCcInfo_PointSynth, giCcCount_PointSynth + 1, 4)
    endif
 #else
    giCcCount_PointSynth = (lenarray(gSCcInfo_PointSynth) / 4) - 1
    reshapearray(gSCcInfo_PointSynth, giCcCount_PointSynth + 1, 4)
 #end

opcode ccIndex_PointSynth, i, S
    SChannel xin
    kgoto end
    iI = 0
    while (iI < giCcCount_PointSynth) do
        if (strcmp(gSCcInfo_PointSynth[iI][$CC_INFO_CHANNEL], SChannel) == 0) igoto end
        iI += 1
    od
    iI = -1
end:
    // Uncomment the following line to dump the CC index numbers and names.
    ; printf("%d = %s\n", 1, iI, SChannel)
    xout iI
endop

giCcValueDefaults_PointSynth[] init giCcCount_PointSynth
giCcValues_PointSynth[][] init 1, giCcCount_PointSynth
gkCcValues_PointSynth[][] init 1, giCcCount_PointSynth

gkCcSyncTypes_PointSynth[][] init 1, giCcCount_PointSynth

// Set CC default values.
instr PointSynth_InitializeCcValues


    iI = 0
    while (iI < giCcCount_PointSynth) do
        SType = gSCcInfo_PointSynth[iI][$CC_INFO_TYPE]
        SValue = gSCcInfo_PointSynth[iI][$CC_INFO_VALUE]

        iJ = 0
        while (iJ < 1) do
            iValue = -1
            if (strcmp(SType, "bool") == 0) then
                if (strcmp(SValue, "false") == 0) then
                    iValue = 0
                else
                    iValue = 1
                endif
            elseif (strcmp(SType, "number") == 0 && strcmp(SValue, "") != 0) then
                iValue = strtod(SValue)
            endif
            giCcValueDefaults_PointSynth[iI] = iValue
            giCcValues_PointSynth[iJ][iI] = iValue
            iJ += 1
        od
        iI += 1
    od

    igoto end

    kI = 0
    while (kI < giCcCount_PointSynth) do
        SType = gSCcInfo_PointSynth[kI][$CC_INFO_TYPE]
        SValue = gSCcInfo_PointSynth[kI][$CC_INFO_VALUE]
        SSyncType = gSCcInfo_PointSynth[kI][$CC_INFO_SYNC_TYPE]

        kJ = 0
        while (kJ < 1) do
            kValue = -1
            if (strcmpk(SType, "bool") == 0) then
                if (strcmpk(SValue, "false") == 0) then
                    kValue = 0
                else
                    kValue = 1
                endif
            elseif (strcmpk(SType, "number") == 0 && strcmpk(SValue, "") != 0) then
                kValue = strtodk(SValue)
            endif
            gkCcValues_PointSynth[kJ][kI] = kValue

            gkCcSyncTypes_PointSynth[kJ][kI] = $CC_NO_SYNC
            if (strcmpk(SSyncType, "synced") == 0) then
                gkCcSyncTypes_PointSynth[kJ][kI] = $CC_SYNC_TO_CHANNEL
            endif
            kJ += 1
        od
        kI += 1
    od
    turnoff
end:
endin

event_i("i", "PointSynth_InitializeCcValues", 0, -1)

instr PointSynth_CreateCcIndexes
    giCc_PointSynth_example init ccIndex_PointSynth("example")

    turnoff
endin

event_i("i", "PointSynth_CreateCcIndexes", 0, -1)

//----------------------------------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------------------------------

giPointSynth_DistanceMin = 1
giPointSynth_DistanceMax = 500
giPointSynth_ReferenceDistance = 5
giPointSynth_RolloffFactor = 0.25
giPointSynth_PlaybackVolumeAdjustment = 7.5
giPointSynth_PlaybackReverbAdjustment = 0.5

 #define POINT_SYNTH_NEXT_XYZ_COUNT #16384#
giPointSynthNextXYZ[][][] init 1, $POINT_SYNTH_NEXT_XYZ_COUNT, 3
giPointSynthNextXYZ_i init 0

instr PointSynth_ResetNextXYZ_i
    giPointSynthNextXYZ_i = 0
    turnoff
endin

iI = 0
while (iI < 1) do
    seed(1 + iI * 1000)
    iJ = 0
    while (iJ < $POINT_SYNTH_NEXT_XYZ_COUNT) do
        iR = random(giPointSynth_DistanceMin, giPointSynth_DistanceMax)
        iT = rnd(359.999)
        iXYZ[] = math_rytToXyz(iR, 0, iT)
        giPointSynthNextXYZ[iI][iJ][$X] = iXYZ[$X]
        giPointSynthNextXYZ[iI][iJ][$Y] = 2
        giPointSynthNextXYZ[iI][iJ][$Z] = iXYZ[$Z]
        iJ += 1
    od
    iI += 1
od

giPointSynth_NoteIndex[] init 1
gkPointSynth_InstrumentNumberFraction[] init 1
gkPointSynth_LastNoteOnTime[] init 1

giFadeInTime init 0.05
giFadeOutTime init 0.05
giTotalTime init giFadeInTime + giFadeOutTime



//----------------------------------------------------------------------------------------------------------------------

 #ifdef IS_GENERATING_JSON
    setPluginUuid(1, 0, "b4f7a35c-6198-422f-be6e-fa126f31b007")

    instr PointSynth_Json
        SJsonFile = sprintf("json/%s.0.json", "b4f7a35c-6198-422f-be6e-fa126f31b007")
        fprints(SJsonFile, "{")
        fprints(SJsonFile, sprintf("\"instanceName\":\"%s\"", ""))
        fprints(SJsonFile, sprintf(",\"fadeInTime\":%.02f", giFadeInTime))
        fprints(SJsonFile, sprintf(",\"fadeOutTime\":%.02f", giFadeOutTime))
        fprints(SJsonFile, ",\"soundDistanceMin\":%d", giPointSynth_DistanceMin)
        fprints(SJsonFile, ",\"soundDistanceMax\":%d", giPointSynth_DistanceMax)
        fprints(SJsonFile, "}")
        ficlose(SJsonFile)
        turnoff
    endin
 #end


instr 5

    iEventType = p4
    if (iEventType == 4) then
        turnoff
    elseif (iEventType == 1) then
        iNoteNumber = p5
        iVelocity = p6
            iNoteNumber -= 1000
            if (iNoteNumber > 127) then

                igoto end
                turnoff
            endif
            iX init giPointSynthNextXYZ[0][giPointSynthNextXYZ_i][$X]
            iZ init giPointSynthNextXYZ[0][giPointSynthNextXYZ_i][$Z]

            // Minimum Y = 100.
            // Note number range 80 to 105 (range = 25).
            // Height range 0 to 100.
            iY init 50 + ((iNoteNumber - 80) / 25) * 300

            #ifndef IS_ANIMATIONS_ONLY
                iCps = cpsmidinn(iNoteNumber)
                iAmp = 0.05

                kCps = linseg(iCps, giTotalTime, iCps + 100)

                aOut = oscil(iAmp, kCps)
                aEnvelope = adsr_linsegr(giFadeInTime, 0, 1, giFadeOutTime)
                aOut *= aEnvelope

                kDistance = AF_3D_Audio_SourceDistance(iX, iY, iZ)
                ; if (changed(kDistance) == 1) then
                ; printsk("source = [%.03f, %.03f, %.03f], distance = %.03f\n", iX, iY, iZ, kDistance)
                ; endif
                kDistanceAmp = AF_3D_Audio_DistanceAttenuation(kDistance, giPointSynth_ReferenceDistance, giPointSynth_RolloffFactor)

                    kDistanceAmp *= giPointSynth_PlaybackVolumeAdjustment

                aOutDistanced = aOut * kDistanceAmp

                giPointSynthNextXYZ_i += 1
                if (giPointSynthNextXYZ_i == $POINT_SYNTH_NEXT_XYZ_COUNT) then
                    giPointSynthNextXYZ_i = 0
                endif
                AF_3D_Audio_ChannelGains_XYZ(k(iX), k(iY), k(iZ))

                iPlaybackReverbAdjustment init 1

                    iPlaybackReverbAdjustment = giPointSynth_PlaybackReverbAdjustment


                a1 = gkAmbisonicChannelGains[0] * aOutDistanced
                a2 = gkAmbisonicChannelGains[1] * aOutDistanced
                a3 = gkAmbisonicChannelGains[2] * aOutDistanced
                a4 = gkAmbisonicChannelGains[3] * aOutDistanced
                aReverbOut = aOut * 2 * kDistanceAmp * iPlaybackReverbAdjustment


                    gaInstrumentSignals[1][0] = gaInstrumentSignals[1][0] + a1
                    gaInstrumentSignals[1][1] = gaInstrumentSignals[1][1] + a2
                    gaInstrumentSignals[1][2] = gaInstrumentSignals[1][2] + a3
                    gaInstrumentSignals[1][3] = gaInstrumentSignals[1][3] + a4
                    gaInstrumentSignals[1][4] = gaInstrumentSignals[1][4] + aReverbOut
                    gaInstrumentSignals[1][5] = gaInstrumentSignals[1][5] + aReverbOut
            #end

            #ifdef IS_GENERATING_JSON
                if (giPointSynth_NoteIndex[0] == 0) then
                    scoreline_i("i \"PointSynth_Json\" 0 0")
                endif
                giPointSynth_NoteIndex[0] = giPointSynth_NoteIndex[0] + 1
                SJsonFile = sprintf("json/%s.%d.json", "b4f7a35c-6198-422f-be6e-fa126f31b007", giPointSynth_NoteIndex[0])
                fprints(SJsonFile, "{\"noteOn\":{\"time\":%.3f,\"note\":%.3f,\"xyz\":[%.3f,%.3f,%.3f]}}", times(),
                    iNoteNumber, iX, iY, iZ)
                ficlose(SJsonFile)
            #end



    endif
end:
endin



    instr Preallocate_5
        ii = 0
        while (ii < giPresetUuidPreallocationCount[1]) do
            scoreline_i(sprintf("i %d.%.3d 0 .1 %d 1063 63", 5, ii, 1))
            ii += 1
        od
        turnoff
    endin
    scoreline_i(sprintf("i \"Preallocate_%d\" 0 -1", 5))


//----------------------------------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------------------------------
// File: GroundBubbleSynth.orc
//----------------------------------------------------------------------------------------------------------------------






// TODO: This might be unused, now. If unused, remove it from this file, DawService.csd and TrackInfo_*.orc.








 #ifndef ADSR_LINSEGR_UDO_ORC
 #define ADSR_LINSEGR_UDO_ORC ##

opcode adsr_linsegr, a, iiii
    iA, iD, iS, iR xin
    iA = max(0.000001, iA)
    iD = max(0.000001, iD)
    iR = max(0.000001, iR)
    aOut = linsegr(0, iA, 1, iD, iS, 1, iS, iR, 0)
    xout aOut
endop

opcode adsr_linsegr, k, kkkk
    iA, iD, iS, iR xin
    iA = max(0.000001, iA)
    iD = max(0.000001, iD)
    iR = max(0.000001, iR)
    kOut = linsegr(0, iA, 1, iD, iS, 1, iS, iR, 0)
    xout kOut
endop

 #end

gSCcInfo_GroundBubbleSynth[] = fillarray( \
\
    "example", "bool", "false", "synced", \
\
    "", "", "", "") // dummy line

 #define gSCcInfo_GroundBubbleSynth_Count #8#



 #define CC_INFO_CHANNEL #0#
 #define CC_INFO_TYPE #1#
 #define CC_INFO_VALUE #2#
 #define CC_INFO_SYNC_TYPE #3#

 #define CC_NO_SYNC #0#
 #define CC_SYNC_TO_CHANNEL #1#
 #ifdef gSCcInfo_GroundBubbleSynth_Count
    // Reshape the gSCcInfo array if it hasn't been reshaped already. This check is required for reloadable instruments
    // because global arrays retain their shape across reloads.
    if (lenarray(gSCcInfo_GroundBubbleSynth) == $gSCcInfo_GroundBubbleSynth_Count) then
        giCcCount_GroundBubbleSynth = (lenarray(gSCcInfo_GroundBubbleSynth) / 4) - 1
        reshapearray(gSCcInfo_GroundBubbleSynth, giCcCount_GroundBubbleSynth + 1, 4)
    endif
 #else
    giCcCount_GroundBubbleSynth = (lenarray(gSCcInfo_GroundBubbleSynth) / 4) - 1
    reshapearray(gSCcInfo_GroundBubbleSynth, giCcCount_GroundBubbleSynth + 1, 4)
 #end

opcode ccIndex_GroundBubbleSynth, i, S
    SChannel xin
    kgoto end
    iI = 0
    while (iI < giCcCount_GroundBubbleSynth) do
        if (strcmp(gSCcInfo_GroundBubbleSynth[iI][$CC_INFO_CHANNEL], SChannel) == 0) igoto end
        iI += 1
    od
    iI = -1
end:
    // Uncomment the following line to dump the CC index numbers and names.
    ; printf("%d = %s\n", 1, iI, SChannel)
    xout iI
endop

giCcValueDefaults_GroundBubbleSynth[] init giCcCount_GroundBubbleSynth
giCcValues_GroundBubbleSynth[][] init 1, giCcCount_GroundBubbleSynth
gkCcValues_GroundBubbleSynth[][] init 1, giCcCount_GroundBubbleSynth

gkCcSyncTypes_GroundBubbleSynth[][] init 1, giCcCount_GroundBubbleSynth

// Set CC default values.
instr GroundBubbleSynth_InitializeCcValues


    iI = 0
    while (iI < giCcCount_GroundBubbleSynth) do
        SType = gSCcInfo_GroundBubbleSynth[iI][$CC_INFO_TYPE]
        SValue = gSCcInfo_GroundBubbleSynth[iI][$CC_INFO_VALUE]

        iJ = 0
        while (iJ < 1) do
            iValue = -1
            if (strcmp(SType, "bool") == 0) then
                if (strcmp(SValue, "false") == 0) then
                    iValue = 0
                else
                    iValue = 1
                endif
            elseif (strcmp(SType, "number") == 0 && strcmp(SValue, "") != 0) then
                iValue = strtod(SValue)
            endif
            giCcValueDefaults_GroundBubbleSynth[iI] = iValue
            giCcValues_GroundBubbleSynth[iJ][iI] = iValue
            iJ += 1
        od
        iI += 1
    od

    igoto end

    kI = 0
    while (kI < giCcCount_GroundBubbleSynth) do
        SType = gSCcInfo_GroundBubbleSynth[kI][$CC_INFO_TYPE]
        SValue = gSCcInfo_GroundBubbleSynth[kI][$CC_INFO_VALUE]
        SSyncType = gSCcInfo_GroundBubbleSynth[kI][$CC_INFO_SYNC_TYPE]

        kJ = 0
        while (kJ < 1) do
            kValue = -1
            if (strcmpk(SType, "bool") == 0) then
                if (strcmpk(SValue, "false") == 0) then
                    kValue = 0
                else
                    kValue = 1
                endif
            elseif (strcmpk(SType, "number") == 0 && strcmpk(SValue, "") != 0) then
                kValue = strtodk(SValue)
            endif
            gkCcValues_GroundBubbleSynth[kJ][kI] = kValue

            gkCcSyncTypes_GroundBubbleSynth[kJ][kI] = $CC_NO_SYNC
            if (strcmpk(SSyncType, "synced") == 0) then
                gkCcSyncTypes_GroundBubbleSynth[kJ][kI] = $CC_SYNC_TO_CHANNEL
            endif
            kJ += 1
        od
        kI += 1
    od
    turnoff
end:
endin

event_i("i", "GroundBubbleSynth_InitializeCcValues", 0, -1)

instr GroundBubbleSynth_CreateCcIndexes
    giCc_GroundBubbleSynth_example init ccIndex_GroundBubbleSynth("example")

    turnoff
endin

event_i("i", "GroundBubbleSynth_CreateCcIndexes", 0, -1)

//----------------------------------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------------------------------

giGroundBubbleSynth_Duration = 80 // Time in seconds for all notes to be started.
giGroundBubbleSynth_GridColumnCount = 30
giGroundBubbleSynth_GridRowCount = giGroundBubbleSynth_GridColumnCount
giGroundBubbleSynth_GridCellSize = 30
giGroundBubbleSynth_StartY = 0
giGroundBubbleSynth_FullVolumeY = 2
giGroundBubbleSynth_SpeedY = 15 // Units per second.
giGroundBubbleSynth_MaxAudibleDistance = 100 // Inaudible beyond max distance.
giGroundBubbleSynth_MaxReverbOnlyDistance = giGroundBubbleSynth_MaxAudibleDistance * 2
giGroundBubbleSynth_MaxAudibleHeight = giGroundBubbleSynth_MaxAudibleDistance // Instrument turns off at max height.
giGroundBubbleSynth_MaxAmpWhenVeryClose = 1
giGroundBubbleSynth_ReferenceDistance = 0.1
giGroundBubbleSynth_RolloffFactor = 0.005
giGroundBubbleSynth_PlaybackVolumeAdjustment = 0.9
giGroundBubbleSynth_PlaybackReverbAdjustment = 1.5

giGroundBubbleSynth_NoteIndex[] init 1

giGroundBubbleSynth_GridCellCount = giGroundBubbleSynth_GridColumnCount * giGroundBubbleSynth_GridRowCount
giGroundBubbleSynth_GridCellLaunchPattern[][] init giGroundBubbleSynth_GridCellCount, 2
giGroundBubbleSynth_GridCenterX = (giGroundBubbleSynth_GridColumnCount * giGroundBubbleSynth_GridCellSize) / 2
giGroundBubbleSynth_GridCenterZ = (giGroundBubbleSynth_GridRowCount * giGroundBubbleSynth_GridCellSize) / 2

giGroundBubbleSynth_GridCellIndex = 0
giGroundBubbleSynth_GridCellIndexIncrementAmount = 30
giGroundBubbleSynth_GridCellIndexBase = 0

opcode incrementGridCellIndex, 0, 0
    giGroundBubbleSynth_GridCellIndex += giGroundBubbleSynth_GridCellIndexIncrementAmount
    if (giGroundBubbleSynth_GridCellIndex >= giGroundBubbleSynth_GridCellCount) then
        giGroundBubbleSynth_GridCellIndexBase += 1
        giGroundBubbleSynth_GridCellIndex = giGroundBubbleSynth_GridCellIndexBase
    fi
endop

// Randomized
iCellIndex = 0
iAvailableCellIndexes[] init giGroundBubbleSynth_GridCellCount
iAvailableCellIndexesCount init giGroundBubbleSynth_GridCellCount
while (iCellIndex < iAvailableCellIndexesCount) do
    iAvailableCellIndexes[iCellIndex] = iCellIndex
    iCellIndex += 1
od
iCellIndex = 0
while (iCellIndex < giGroundBubbleSynth_GridCellCount) do
    iRandomCellIndex = min(floor(random(0, iAvailableCellIndexesCount)), iAvailableCellIndexesCount)
    iRandomIndex = iAvailableCellIndexes[iRandomCellIndex]
    iColumnIndex = floor(iRandomIndex / giGroundBubbleSynth_GridColumnCount)
    iRowIndex = iRandomIndex % giGroundBubbleSynth_GridRowCount
    giGroundBubbleSynth_GridCellLaunchPattern[iCellIndex][0] = iColumnIndex
    giGroundBubbleSynth_GridCellLaunchPattern[iCellIndex][1] = iRowIndex
    iCellIndex += 1
    iI = iRandomCellIndex + 1
    while (iI < iAvailableCellIndexesCount) do
        iAvailableCellIndexes[iI - 1] = iAvailableCellIndexes[iI]
        iI += 1
    od
    iAvailableCellIndexesCount -= 1
od



//----------------------------------------------------------------------------------------------------------------------

 #ifdef IS_GENERATING_JSON
    setPluginUuid(2, 0, "9037b759-36e4-4600-b2cb-03383ebd65c1")

    instr GroundBubbleSynth_Json
        SJsonFile = sprintf("json/%s.0.json", "9037b759-36e4-4600-b2cb-03383ebd65c1")
        fprints(SJsonFile, "{")
        fprints(SJsonFile, sprintf("\"instanceName\":\"%s\"", ""))
        fprints(SJsonFile, sprintf(",\"duration\":%d", giGroundBubbleSynth_Duration))
        fprints(SJsonFile, sprintf(",\"gridColumnCount\":%d", giGroundBubbleSynth_GridColumnCount))
        fprints(SJsonFile, sprintf(",\"gridRowCount\":%d", giGroundBubbleSynth_GridRowCount))
        fprints(SJsonFile, sprintf(",\"gridCellSize\":%d", giGroundBubbleSynth_GridCellSize))
        fprints(SJsonFile, sprintf(",\"fullVolumeY\":%d", giGroundBubbleSynth_FullVolumeY))
        fprints(SJsonFile, sprintf(",\"speedY\":%d", giGroundBubbleSynth_SpeedY))
        fprints(SJsonFile, sprintf(",\"maxDistance\":%d", giGroundBubbleSynth_MaxAudibleDistance))
        fprints(SJsonFile, sprintf(",\"maxHeight\":%d", giGroundBubbleSynth_MaxAudibleHeight))
        fprints(SJsonFile, "}")
        turnoff
    endin
 #end


instr 6
    ; if (gkGroundBubbleSynth_MaxAudibleHeightVolumeOffset == 0) then
    ; gkGroundBubbleSynth_MaxAudibleHeightVolumeOffset = AF_3D_Audio_DistanceAttenuation(
    ; giGroundBubbleSynth_MaxAudibleHeight,
    ; giGroundBubbleSynth_ReferenceDistance,
    ; giGroundBubbleSynth_RolloffFactor)
    ; printsk("gkGroundBubbleSynth_MaxAudibleHeightVolumeOffset = %f\n", gkGroundBubbleSynth_MaxAudibleHeightVolumeOffset)
    ; fi

    iEventType = p4
    if (iEventType == 4) then
        turnoff
    elseif (iEventType == 3) then
        iGridColumn = p5
        iGridRow = p6

        iCps = cpsmidinn(random(56, 60))
        iAmp = 0.05
        iCutoffFrequency = 1000

        kY init giGroundBubbleSynth_StartY
        kY += giGroundBubbleSynth_SpeedY * (1 / kr)
        if (kY > giGroundBubbleSynth_MaxAudibleHeight) then
            turnoff
        fi

        kX init iGridColumn * giGroundBubbleSynth_GridCellSize - giGroundBubbleSynth_GridCenterX
        kZ init iGridRow * giGroundBubbleSynth_GridCellSize - giGroundBubbleSynth_GridCenterZ
        ; prints("grid[%d][%d] = xyz(%.3f, %.3f, %.3f)\n", iGridColumn, iGridRow, i(kX), i(kY), i(kZ))

        #ifndef IS_ANIMATIONS_ONLY
            kDistance = AF_3D_Audio_SourceDistance(kX, kY, kZ)
            kIsReverbOnly = 0
            if (kDistance > giGroundBubbleSynth_MaxReverbOnlyDistance) then
                kgoto end
            elseif (kDistance > giGroundBubbleSynth_MaxAudibleDistance) then
                kIsReverbOnly = 1
            fi

            kCps = iCps + kY * 5
            kAmp = iAmp
            if (kY < giGroundBubbleSynth_FullVolumeY) then
                kAmp *= kY / giGroundBubbleSynth_FullVolumeY
            else
                kAmp *= (giGroundBubbleSynth_MaxAudibleHeight - kY) / giGroundBubbleSynth_MaxAudibleHeight
            fi

            ; if (kIsReverbOnly == 0) then
                aOut = tone(
                    oscil(kAmp + jspline(kAmp, 0.08, 0.05), kCps * 0.918) + oscil(kAmp + jspline(kAmp, 0.07, 0.49), kCps * 2.234) + oscil(kAmp + jspline(kAmp, 0.09, 0.50), kCps * 3.83) + oscil(kAmp + jspline(kAmp, 0.10, 0.45), kCps * 4.11) + oscil(kAmp + jspline(kAmp, 0.09, 0.51), kCps * 5.25) + oscil(kAmp + jspline(kAmp, 0.08, 0.50), kCps * 6.093) + oscil(kAmp + jspline(kAmp, 0.08, 0.50), kCps * 7.77) + oscil(kAmp + jspline(kAmp, 0.10, 0.40), kCps * 8.328) + oscil(kAmp + jspline(kAmp, 0.07, 0.55), kCps * 9.129) + oscil(kAmp + jspline(kAmp, 0.08, 0.47), kCps * kCps / 100),
                    iCutoffFrequency)
            ; else
            ; aOut = tone(
            ; oscil(kAmp + jspline(kAmp, 0.08, 0.47), kCps * kCps / 100),
            ; iCutoffFrequency)
            ; fi


                a1 = gaInstrumentSignals[2][0]
                if (kIsReverbOnly == 0) then
                    a2 = gaInstrumentSignals[2][1]
                    a3 = gaInstrumentSignals[2][2]
                    a4 = gaInstrumentSignals[2][3]
                fi
                a5 = gaInstrumentSignals[2][4] // Reverb
            kDistanceAmp = AF_3D_Audio_DistanceAttenuation(kDistance, giGroundBubbleSynth_ReferenceDistance, giGroundBubbleSynth_RolloffFactor)
            ; if (kIsReverbOnly == 0) then
            ; kDistanceAmp -= gkGroundBubbleSynth_MaxAudibleHeightVolumeOffset
            ; fi
            kDistanceAmp = min(kDistanceAmp, giGroundBubbleSynth_MaxAmpWhenVeryClose)

                kDistanceAmp *= giGroundBubbleSynth_PlaybackVolumeAdjustment

            aOutDistanced = aOut * kDistanceAmp

            AF_3D_Audio_ChannelGains_XYZ(kX, kY, kZ)
            iPlaybackReverbAdjustment init 1

                iPlaybackReverbAdjustment = giGroundBubbleSynth_PlaybackReverbAdjustment


            a1 += gkAmbisonicChannelGains[0] * aOutDistanced
            if (kIsReverbOnly == 0) then
                a2 += gkAmbisonicChannelGains[1] * aOutDistanced
                a3 += gkAmbisonicChannelGains[2] * aOutDistanced
                a4 += gkAmbisonicChannelGains[3] * aOutDistanced
            fi
            a5 += 0.1 * aOut * min(kDistanceAmp * iPlaybackReverbAdjustment, 0.175)


                gaInstrumentSignals[2][0] = a1
                if (kIsReverbOnly == 0) then
                    gaInstrumentSignals[2][1] = a2
                    gaInstrumentSignals[2][2] = a3
                    gaInstrumentSignals[2][3] = a4
                fi
                gaInstrumentSignals[2][4] = a5
                gaInstrumentSignals[2][5] = a5
        #end

        #ifdef IS_GENERATING_JSON
            if (giGroundBubbleSynth_NoteIndex[0] == 0) then
                scoreline_i("i \"GroundBubbleSynth_Json\" 0 0")
            endif
            giGroundBubbleSynth_NoteIndex[0] = giGroundBubbleSynth_NoteIndex[0] + 1
            SJsonFile = sprintf("json/%s.%d.json", "9037b759-36e4-4600-b2cb-03383ebd65c1", giGroundBubbleSynth_NoteIndex[0])
            fprints(SJsonFile, "{\"noteOn\":{\"time\":%.3f,\"column\":%d,\"row\":%d}}",
                times(), iGridColumn, iGridRow)
            ficlose(SJsonFile)
        #end
    endif
end:
endin

//----------------------------------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------------------------------
// File: Reverb.orc
//----------------------------------------------------------------------------------------------------------------------






// TODO: This might be unused, now. If unused, remove it from this file, DawService.csd and TrackInfo_*.orc.




//----------------------------------------------------------------------------------------------------------------------
// This section is only included once in the playback .csd. It is shared by all instances of this instrument.
//----------------------------------------------------------------------------------------------------------------------

gSCcInfo_Reverb[] = fillarray( \
\
    "enabled", "bool", "false", "synced", \
    "size", "number", "0.5", "synced", \
    "cutoffFrequency", "number", "20000", "synced", \
    "variationDepth", "number", "0.1", "synced", \
    "dryWet", "number", "1", "synced", \
    "volume", "number", "0.5", "synced", \
\
    "", "", "", "") // dummy line



 #define CC_INFO_CHANNEL #0#
 #define CC_INFO_TYPE #1#
 #define CC_INFO_VALUE #2#
 #define CC_INFO_SYNC_TYPE #3#

 #define CC_NO_SYNC #0#
 #define CC_SYNC_TO_CHANNEL #1#
 #ifdef gSCcInfo_Reverb_Count
    // Reshape the gSCcInfo array if it hasn't been reshaped already. This check is required for reloadable instruments
    // because global arrays retain their shape across reloads.
    if (lenarray(gSCcInfo_Reverb) == $gSCcInfo_Reverb_Count) then
        giCcCount_Reverb = (lenarray(gSCcInfo_Reverb) / 4) - 1
        reshapearray(gSCcInfo_Reverb, giCcCount_Reverb + 1, 4)
    endif
 #else
    giCcCount_Reverb = (lenarray(gSCcInfo_Reverb) / 4) - 1
    reshapearray(gSCcInfo_Reverb, giCcCount_Reverb + 1, 4)
 #end

opcode ccIndex_Reverb, i, S
    SChannel xin
    kgoto end
    iI = 0
    while (iI < giCcCount_Reverb) do
        if (strcmp(gSCcInfo_Reverb[iI][$CC_INFO_CHANNEL], SChannel) == 0) igoto end
        iI += 1
    od
    iI = -1
end:
    // Uncomment the following line to dump the CC index numbers and names.
    ; printf("%d = %s\n", 1, iI, SChannel)
    xout iI
endop

giCcValueDefaults_Reverb[] init giCcCount_Reverb
giCcValues_Reverb[][] init 1, giCcCount_Reverb
gkCcValues_Reverb[][] init 1, giCcCount_Reverb

gkCcSyncTypes_Reverb[][] init 1, giCcCount_Reverb

// Set CC default values.
instr Reverb_InitializeCcValues


    iI = 0
    while (iI < giCcCount_Reverb) do
        SType = gSCcInfo_Reverb[iI][$CC_INFO_TYPE]
        SValue = gSCcInfo_Reverb[iI][$CC_INFO_VALUE]

        iJ = 0
        while (iJ < 1) do
            iValue = -1
            if (strcmp(SType, "bool") == 0) then
                if (strcmp(SValue, "false") == 0) then
                    iValue = 0
                else
                    iValue = 1
                endif
            elseif (strcmp(SType, "number") == 0 && strcmp(SValue, "") != 0) then
                iValue = strtod(SValue)
            endif
            giCcValueDefaults_Reverb[iI] = iValue
            giCcValues_Reverb[iJ][iI] = iValue
            iJ += 1
        od
        iI += 1
    od

    igoto end

    kI = 0
    while (kI < giCcCount_Reverb) do
        SType = gSCcInfo_Reverb[kI][$CC_INFO_TYPE]
        SValue = gSCcInfo_Reverb[kI][$CC_INFO_VALUE]
        SSyncType = gSCcInfo_Reverb[kI][$CC_INFO_SYNC_TYPE]

        kJ = 0
        while (kJ < 1) do
            kValue = -1
            if (strcmpk(SType, "bool") == 0) then
                if (strcmpk(SValue, "false") == 0) then
                    kValue = 0
                else
                    kValue = 1
                endif
            elseif (strcmpk(SType, "number") == 0 && strcmpk(SValue, "") != 0) then
                kValue = strtodk(SValue)
            endif
            gkCcValues_Reverb[kJ][kI] = kValue

            gkCcSyncTypes_Reverb[kJ][kI] = $CC_NO_SYNC
            if (strcmpk(SSyncType, "synced") == 0) then
                gkCcSyncTypes_Reverb[kJ][kI] = $CC_SYNC_TO_CHANNEL
            endif
            kJ += 1
        od
        kI += 1
    od
    turnoff
end:
endin

event_i("i", "Reverb_InitializeCcValues", 0, -1)

instr Reverb_CreateCcIndexes
    giCc_Reverb_enabled init ccIndex_Reverb("enabled")
    giCc_Reverb_size init ccIndex_Reverb("size")
    giCc_Reverb_cutoffFrequency init ccIndex_Reverb("cutoffFrequency")
    giCc_Reverb_variationDepth init ccIndex_Reverb("variationDepth")
    giCc_Reverb_dryWet init ccIndex_Reverb("dryWet")
    giCc_Reverb_volume init ccIndex_Reverb("volume")
endin

event_i("i", "Reverb_CreateCcIndexes", 0, -1)

//----------------------------------------------------------------------------------------------------------------------



instr 9
    #ifdef IS_ANIMATIONS_ONLY
        turnoff
    #end
    iOrcInstanceIndex = 0

    // Don't modify the signal in DAW service modes 2, 3, and 4. It will mess up the track index and CC score messages.




    iEventType = p4
    if (iEventType == 4) then
        iCcType = p5
        iCcValue = p6
        giCcValues_Reverb[0][iCcType] = iCcValue
        gkCcValues_Reverb[0][iCcType] = iCcValue
        turnoff
    elseif (iEventType == 1) then
        aIn[] init 2
        aOut[] init 2

        kI = 0
        kJ = 4
        while (kI < 2) do

                if (3 < gi_instrumentCount) then
                    aIn[kI] = gaInstrumentSignals[3][kJ]
                else
                    iAuxTrackIndex = 3 - gi_instrumentCount
                    aIn[kI] = ga_auxSignals[iAuxTrackIndex][kJ]
                endif
                kJ += 1




            kI += 1
        od

        if (gkCcValues_Reverb[iOrcInstanceIndex][giCc_Reverb_enabled] == 1) then
            aOut[0], aOut[1] reverbsc aIn[0], aIn[1], gkCcValues_Reverb[iOrcInstanceIndex][giCc_Reverb_size], gkCcValues_Reverb[iOrcInstanceIndex][giCc_Reverb_cutoffFrequency], sr, 0.1
            kDryWet = gkCcValues_Reverb[iOrcInstanceIndex][giCc_Reverb_dryWet]
            aOut[0] = aOut[0] * kDryWet
            aOut[1] = aOut[1] * kDryWet
            kWetDry = 1 - kDryWet
            aOut[0] = aOut[0] + aIn[0] * kWetDry
            aOut[1] = aOut[1] + aIn[1] * kWetDry
            kVolume = gkCcValues_Reverb[iOrcInstanceIndex][giCc_Reverb_volume]
            aOut[0] = aOut[0] * kVolume
            aOut[1] = aOut[1] * kVolume
        else
            aOut[0] = aIn[0]
            aOut[1] = aIn[1]
        endif





        kI = 0
        kJ = 4
        while (kI < 2) do

                iAuxTrackIndex = 3
                if (iAuxTrackIndex >= gi_instrumentCount) then
                    iAuxTrackIndex -= gi_instrumentCount
                endif
                ga_auxSignals[iAuxTrackIndex][kJ] = aOut[kI]
                kJ += 1




            kI += 1
        od
    endif





endin



    instr Preallocate_9
        ii = 0
        while (ii < 10) do
            scoreline_i(sprintf("i %d.%.3d 0 .1 0 0 0", 9, ii))
            ii += 1
        od
        turnoff
    endin
    scoreline_i(sprintf("i \"Preallocate_%d\" 0 -1", 9))


//----------------------------------------------------------------------------------------------------------------------


 #ifndef IS_ANIMATIONS_ONLY
    // Aux mixer instrument.
    // All included instruments should have instrument numbers lower than this instrument.
    // All aux instruments should have instrument numbers higher than this instrument.
    //
    instr 7
        // Mix instruments into auxes.
        kAux = 0
        while (kAux < gi_auxCount) do
            kInstrument = 0
            while (kInstrument < gi_instrumentCount) do
                kChannel = giAuxChannelIndexRanges[kAux][kInstrument][0]
                kMaxChannel = giAuxChannelIndexRanges[kAux][kInstrument][1]
                while (kChannel <= kMaxChannel) do
                    ga_auxSignals[kAux][kChannel] = ga_auxSignals[kAux][kChannel] +
                        ga_auxVolumes[kAux][kInstrument][kChannel] * gaInstrumentSignals[kInstrument][kChannel]
                    kChannel += 1
                od
                kInstrument += 1
            od
            kAux += 1
        od
    endin


    // Controls track volumes sent to Aux tracks.
    instr 8
        k_aux = p4 - gi_auxIndexOffset
        k_track = p5 - gi_instrumentIndexOffset
        k_channel = p6
        k_volume = p7
        ga_auxVolumes[k_aux][k_track][k_channel] = k_volume
        turnoff
    endin


    // Controls track volumes sent to Master.
    instr 10
        k_track = p4 - gi_instrumentIndexOffset
        k_channel = p5
        k_volume = p6
        ga_masterVolumes[k_track][k_channel] = k_volume
        turnoff
    endin


    // Mixer instrument. All included instruments should have instrument numbers lower than this instrument.
    //
    instr 11
        kChannel = 0
        while (kChannel < $INTERNAL_CHANNEL_COUNT) do
            ga_masterSignals[kChannel] = 0
            kChannel += 1
        od

        // Mix instrument tracks into master.
        kTrack = 0
        while (kTrack < gi_instrumentCount) do
            kChannel = giMasterChannelIndexRanges[kTrack][0]
            kChannelHigh = giMasterChannelIndexRanges[kTrack][1]
            while (kChannel <= kChannelHigh) do
                ga_masterSignals[kChannel] = ga_masterSignals[kChannel] + gaInstrumentSignals[kTrack][kChannel] *
                    ga_masterVolumes[kTrack][kChannel]
                kChannel += 1
            od
            kTrack += 1
        od

        // Mix aux tracks into master.
        // NB: 'kTrack' is not reset before entering the next loop. This is intentional.
        kAux = 0
        while (kAux < gi_auxCount) do
            kChannel = giMasterChannelIndexRanges[kTrack][0]
            kChannelHigh = giMasterChannelIndexRanges[kTrack][1]
            while (kChannel <= kChannelHigh) do
                ga_masterSignals[kChannel] = ga_masterSignals[kChannel] + ga_auxSignals[kAux][kChannel] *
                    ga_masterVolumes[kTrack][kChannel]
                kChannel += 1
            od
            kTrack += 1
            kAux += 1
        od

        // Use Omnitone sh_hrir_order_1.wav data tables to convert/convolve ambisonic output into stereo.
        aw = ga_masterSignals[0]
        ay = ga_masterSignals[1]
        az = ga_masterSignals[2]
        ax = ga_masterSignals[3]
        km0 = gk_AF_3D_ListenerRotationMatrix[0]
        km1 = gk_AF_3D_ListenerRotationMatrix[1]
        km2 = gk_AF_3D_ListenerRotationMatrix[2]
        km3 = gk_AF_3D_ListenerRotationMatrix[3]
        km4 = gk_AF_3D_ListenerRotationMatrix[4]
        km5 = gk_AF_3D_ListenerRotationMatrix[5]
        km6 = gk_AF_3D_ListenerRotationMatrix[6]
        km7 = gk_AF_3D_ListenerRotationMatrix[7]
        km8 = gk_AF_3D_ListenerRotationMatrix[8]
        ayr = -(ay * km0 + az * km3 + ax * km6)
        azr = ay * km1 + az * km4 + ax * km7
        axr = -(ay * km2 + az * km5 + ax * km8)
        aw dconv aw, 256, gi_AF_3D_HrirChannel1TableNumber
        ay dconv ayr, 256, gi_AF_3D_HrirChannel2TableNumber
        az dconv azr, 256, gi_AF_3D_HrirChannel3TableNumber
        ax dconv axr, 256, gi_AF_3D_HrirChannel4TableNumber
        aL = aw - ay + az + ax
        aR = aw + ay + az + ax

        // Add reverb.
        aL += ga_masterSignals[4]
        aR += ga_masterSignals[5]

        outs(aL, aR)
    endin
 #end


instr EndOfInstrumentAllocations
    // If you see instrument allocation messages like `new alloc for instr 8:` after this message is printed, slower
    // devices like the Oculus Quest 2 will hit buffer underruns.
    prints("-------------------------------------------------------------------------------------------------------\n")
    prints("Add preallocation score lines for all instruments allocated after this message.\n")
    prints("-------------------------------------------------------------------------------------------------------\n")
    turnoff
endin


instr SendStartupMessage
    // If the duration is not -1 then this is the preallocation instance of this instrument.
    // Only sound the tone if this is not the preallocation instance.
    if (p3 == -1) then
        prints("csd:started\n")
    endif
    turnoff
endin


instr SendEndedMessage
    // If the duration is not -1 then this is the preallocation instance of this instrument.
    // Only sound the tone if this is not the preallocation instance.
    if (p3 == -1) then
        prints("csd:ended\n")
    endif
    turnoff
endin


instr SetMixdownListenerPosition
    iTableNumber init 1
    // { position: new BABYLON.Vector3(0, 2, 250), target: new BABYLON.Vector3(0, 125, 0) }
    tablew( -1, 0, iTableNumber)
    tablew( 0, 1, iTableNumber)
    tablew( 0, 2, iTableNumber)
    tablew( 0, 3, iTableNumber)
    tablew( 0, 4, iTableNumber)
    tablew( 0.8972800970077515, 5, iTableNumber)
    tablew( 0.4414618015289306, 6, iTableNumber)
    tablew( 0, 7, iTableNumber)
    tablew( 0, 8, iTableNumber)
    tablew( 0.4414618015289306, 9, iTableNumber)
    tablew( -0.8972800970077515, 10, iTableNumber)
    tablew( 0, 11, iTableNumber)
    tablew( 0, 12, iTableNumber)
    tablew( 2, 13, iTableNumber)
    tablew( 250, 14, iTableNumber)
    tablew( 1, 15, iTableNumber)
    turnoff
endin


</CsInstruments>
<CsScore>

 #ifndef SCORE_START_DELAY
    #define SCORE_START_DELAY #5#
 #end
i 1 0 -1
i "SendEndedMessage" 0 1 // preallocation instance
i "PointSynth_ResetNextXYZ_i" 0 -1

 #ifdef IS_MIXDOWN
    i "SetMixdownListenerPosition" 1 -1
 #end


i 2 0 -1 3 0 1 3
i 9.1 0 -1 1 0 0
i 8 0.004 1 3 0 0 0.60
i 8 0.004 1 3 0 1 0.60
i 8 0.004 1 3 0 2 0.60
i 8 0.004 1 3 0 3 0.60
i 8 0.004 1 3 0 4 0.12
i 8 0.004 1 3 0 5 0.12
i 8 0.004 1 3 1 0 0.06
i 8 0.004 1 3 1 1 0.06
i 8 0.004 1 3 1 2 0.06
i 8 0.004 1 3 1 3 0.06
i 8 0.004 1 3 1 4 0.02
i 8 0.004 1 3 1 5 0.02
i 8 0.004 1 3 2 0 0.46
i 8 0.004 1 3 2 1 0.46
i 8 0.004 1 3 2 2 0.46
i 8 0.004 1 3 2 3 0.46
i 8 0.004 1 3 2 4 1.00
i 8 0.004 1 3 2 5 1.00
i 10 0.004 1 3 0 1.00
i 10 0.004 1 3 1 1.00
i 10 0.004 1 3 2 1.00
i 10 0.004 1 3 3 1.00
i 10 0.004 1 3 4 1.00
i 10 0.004 1 3 5 1.00
i "EndOfInstrumentAllocations" 3 -1
i "SendStartupMessage" 0 1
i "SendStartupMessage" 4 -1
b $SCORE_START_DELAY
i 9 0.01 1 4 0 1.00
i 9 0.01 1 4 1 0.98
i 9 0.01 1 4 5 1.00
i 5.084 2.853 0.100 1 1098 76
i 5.085 3.825 0.100 1 1095 79
i 5.086 4.621 0.100 1 1103 52
i 5.087 5.243 0.100 1 1103 78
i 5.088 5.799 0.100 1 1095 71
i 5.089 6.531 0.100 1 1097 58
i 5.090 7.439 0.100 1 1097 78
i 5.091 8.356 0.100 1 1095 72
i 5.092 9.097 0.100 1 1103 52
i 5.093 9.664 0.100 1 1102 79
i 5.094 10.237 0.100 1 1096 74
i 5.095 10.275 0.100 1 1096 77
i 5.096 10.852 0.100 1 1094 69
i 5.097 11.061 0.100 1 1098 74
i 5.098 11.380 0.100 1 1102 57
i 4.049 12.001 0.490 3 36 127 0
i 4.050 12.501 0.490 3 36 127 1
i 4.051 13.501 0.490 3 36 127 2
i 4.052 15.001 0.490 3 36 127 3
i 4.053 17.001 0.490 3 36 127 4
i 5.099 12.024 0.100 1 1096 76
i 5.100 12.321 0.100 1 1101 58
i 4.055 12.751 0.490 3 36 127 0
i 4.056 13.251 0.490 3 36 127 1
i 4.057 14.251 0.490 3 36 127 2
i 4.058 15.751 0.490 3 36 127 3
i 4.059 17.751 0.490 3 36 127 4
i 5.101 12.887 0.100 1 1094 55
i 5.102 13.176 0.100 1 1095 82
i 5.103 13.573 0.100 1 1104 76
i 5.104 13.911 0.100 1 1097 60
i 5.105 14.085 0.100 1 1102 59
i 5.106 14.732 0.100 1 1095 62
i 5.107 14.751 0.100 1 1096 73
i 5.108 15.325 0.100 1 1093 64
i 5.109 15.592 0.100 1 1099 61
i 5.110 15.832 0.100 1 1103 75
i 5.111 15.969 0.100 1 1099 76
i 4.061 16.001 0.490 3 36 127 0
i 4.062 16.501 0.490 3 36 127 1
i 4.063 17.501 0.490 3 36 127 2
i 4.064 19.001 0.490 3 36 127 3
i 4.065 21.001 0.490 3 36 127 4
i 5.112 16.576 0.100 1 1095 69
i 5.113 16.641 0.100 1 1097 56
i 5.114 16.752 0.100 1 1101 61
i 4.067 16.751 0.490 3 36 127 0
i 4.068 17.251 0.490 3 36 127 1
i 4.069 18.251 0.490 3 36 127 2
i 4.070 19.751 0.490 3 36 127 3
i 4.071 21.751 0.490 3 36 127 4
i 5.115 17.207 0.100 1 1103 79
i 5.116 17.384 0.100 1 1093 72
i 5.117 17.585 0.100 1 1096 74
i 5.118 17.908 0.100 1 1105 65
i 5.119 18.016 0.100 1 1103 69
i 5.120 18.341 0.100 1 1098 78
i 5.121 18.444 0.100 1 1095 59
i 5.122 18.560 0.100 1 1101 75
i 5.123 19.175 0.100 1 1097 55
i 5.124 19.184 0.100 1 1094 79
i 5.125 19.280 0.100 1 1097 83
i 5.126 19.681 0.100 1 1099 60
i 5.127 19.756 0.100 1 1092 81
i 4.073 20.001 0.490 3 36 127 0
i 4.074 20.501 0.490 3 36 127 1
i 4.075 21.501 0.490 3 36 127 2
i 4.076 23.001 0.490 3 36 127 3
i 4.077 25.001 0.490 3 36 127 4
i 5.128 20.176 0.100 1 1099 57
i 5.129 20.272 0.100 1 1102 53
i 5.130 20.441 0.100 1 1097 79
i 4.079 20.751 0.490 3 38 127 0
i 4.080 21.251 0.490 3 38 127 1
i 4.081 22.251 0.490 3 38 127 2
i 4.082 23.751 0.490 3 38 127 3
i 4.083 25.751 0.490 3 38 127 4
i 5.131 20.965 0.100 1 1104 60
i 5.132 21.105 0.100 1 1094 59
i 5.133 21.171 0.100 1 1100 75
i 5.134 21.755 0.100 1 1104 64
i 5.135 21.859 0.100 1 1092 74
i 5.136 21.981 0.100 1 1096 56
i 5.137 22.308 0.100 1 1096 79
i 5.138 22.436 0.100 1 1102 78
i 5.139 22.759 0.100 1 1098 67
i 5.140 23.005 0.100 1 1094 73
i 5.141 23.035 0.100 1 1100 56
i 5.142 23.127 0.100 1 1098 69
i 5.143 23.623 0.100 1 1093 58
i 5.144 23.709 0.100 1 1098 72
i 5.145 23.749 0.100 1 1092 59
i 5.146 23.809 0.100 1 1098 67
i 4.085 24.001 0.490 3 41 127 0
i 4.086 24.501 0.490 3 41 127 1
i 4.087 25.501 0.490 3 41 127 2
i 4.088 27.001 0.490 3 41 127 3
i 4.089 29.001 0.490 3 41 127 4
i 5.147 24.173 0.100 1 1091 68
i 5.148 24.509 0.100 1 1102 62
i 5.149 24.556 0.100 1 1096 60
i 5.150 24.711 0.100 1 1101 64
i 4.091 24.751 0.490 3 40 127 0
i 4.092 25.251 0.490 3 40 127 1
i 4.093 26.251 0.490 3 40 127 2
i 4.094 27.751 0.490 3 40 127 3
i 4.095 29.751 0.490 3 40 127 4
i 5.151 24.760 0.100 1 1100 68
i 5.152 25.168 0.100 1 1104 66
i 5.153 25.249 0.100 1 1100 69
i 5.154 25.587 0.100 1 1099 61
i 5.155 25.635 0.100 1 1094 82
i 5.156 26.013 0.100 1 1095 61
i 5.157 26.044 0.100 1 1103 75
i 5.158 26.333 0.100 1 1092 80
i 5.159 26.376 0.100 1 1097 84
i 5.160 26.685 0.100 1 1097 57
i 5.161 26.749 0.100 1 1097 62
i 5.162 26.856 0.100 1 1101 56
i 5.163 27.175 0.100 1 1099 65
i 5.164 27.509 0.100 1 1099 68
i 5.165 27.516 0.100 1 1093 79
i 5.166 27.591 0.100 1 1099 54
i 4.097 28.001 0.490 3 36 127 0
i 4.098 28.501 0.490 3 36 127 1
i 4.099 29.501 0.490 3 36 127 2
i 4.100 31.001 0.490 3 36 127 3
i 4.101 33.001 0.490 3 36 127 4
i 5.167 28.060 0.100 1 1093 65
i 5.168 28.248 0.100 1 1091 56
i 5.169 28.261 0.100 1 1097 79
i 5.170 28.339 0.100 1 1099 55
i 5.171 28.589 0.100 1 1092 72
i 4.103 28.751 0.490 3 38 127 0
i 4.104 29.251 0.490 3 38 127 1
i 4.105 30.251 0.490 3 38 127 2
i 4.106 31.751 0.490 3 38 127 3
i 4.107 33.751 0.490 3 38 127 4
i 5.172 29.019 0.100 1 1101 66
i 5.173 29.041 0.100 1 1101 78
i 5.174 29.148 0.100 1 1100 59
i 5.175 29.196 0.100 1 1095 75
i 5.176 29.335 0.100 1 1101 75
i 5.177 29.728 0.100 1 1099 67
i 5.178 29.747 0.100 1 1099 75
i 5.179 29.896 0.100 1 1105 74
i 5.180 30.003 0.100 1 1098 76
i 5.181 30.155 0.100 1 1093 52
i 5.182 30.521 0.100 1 1095 71
i 5.183 30.561 0.100 1 1103 75
i 5.184 30.771 0.100 1 1098 54
i 5.185 30.799 0.100 1 1093 52
i 5.186 30.860 0.100 1 1103 56
i 5.187 31.245 0.100 1 1098 81
i 5.188 31.332 0.100 1 1101 57
i 5.189 31.541 0.100 1 1105 54
i 5.190 31.589 0.100 1 1097 81
i 5.191 31.591 0.100 1 1100 78
i 4.109 32.001 0.490 3 41 127 0
i 4.110 32.501 0.490 3 41 127 1
i 4.111 33.501 0.490 3 41 127 2
i 4.112 35.001 0.490 3 41 127 3
i 4.113 37.001 0.490 3 41 127 4
i 5.192 32.024 0.100 1 1092 82
i 5.193 32.040 0.100 1 1098 82
i 5.194 32.416 0.100 1 1095 82
i 5.195 32.497 0.100 1 1092 75
i 5.196 32.583 0.100 1 1100 80
i 4.115 32.751 0.490 3 43 127 0
i 5.197 32.744 0.100 1 1090 75
i 4.116 33.251 0.490 3 43 127 1
i 4.117 34.251 0.490 3 43 127 2
i 4.118 35.751 0.490 3 43 127 3
i 4.119 37.751 0.490 3 43 127 4
i 5.198 32.924 0.100 1 1100 82
i 5.199 33.005 0.100 1 1092 80
i 5.200 33.144 0.100 1 1097 55
i 5.201 33.341 0.100 1 1096 83
i 5.202 33.527 0.100 1 1100 62
i 5.203 33.587 0.100 1 1100 55
i 5.204 33.725 0.100 1 1101 76
i 5.205 33.865 0.100 1 1102 61
i 5.206 34.243 0.100 1 1098 59
i 5.207 34.292 0.100 1 1098 57
i 5.208 34.320 0.100 1 1094 75
i 5.209 34.420 0.100 1 1097 58
i 5.210 34.631 0.100 1 1092 81
i 5.211 35.004 0.100 1 1104 71
i 5.212 35.029 0.100 1 1096 71
i 5.213 35.108 0.100 1 1104 64
i 5.214 35.167 0.100 1 1099 60
i 5.215 35.220 0.100 1 1094 80
i 5.216 35.309 0.100 1 1092 68
i 5.217 35.741 0.100 1 1098 73
i 5.218 35.808 0.100 1 1100 74
i 5.219 35.863 0.100 1 1106 83
i 4.121 36.001 0.490 3 36 127 0
i 4.122 36.501 0.490 3 36 127 1
i 4.123 37.501 0.490 3 36 127 2
i 4.124 39.001 0.490 3 36 127 3
i 4.125 41.001 0.490 3 36 127 4
i 5.220 36.008 0.100 1 1101 55
i 5.221 36.057 0.100 1 1102 67
i 5.222 36.209 0.100 1 1090 77
i 5.223 36.532 0.100 1 1092 79
i 5.224 36.572 0.100 1 1098 74
i 5.225 36.720 0.100 1 1100 63
i 4.127 36.751 0.490 3 38 127 0
i 4.128 37.251 0.490 3 38 127 1
i 4.129 38.251 0.490 3 38 127 2
i 4.130 39.751 0.490 3 38 127 3
i 4.131 41.751 0.490 3 38 127 4
i 5.226 36.859 0.100 1 1096 83
i 5.227 36.875 0.100 1 1098 79
i 5.228 36.936 0.100 1 1091 63
i 5.229 37.240 0.100 1 1091 64
i 5.230 37.301 0.100 1 1098 77
i 5.231 37.451 0.100 1 1093 54
i 5.232 37.511 0.100 1 1100 56
i 5.233 37.708 0.100 1 1098 66
i 5.234 37.795 0.100 1 1100 57
i 5.235 38.035 0.100 1 1099 59
i 5.236 38.053 0.100 1 1099 74
i 5.237 38.131 0.100 1 1094 68
i 5.238 38.397 0.100 1 1103 78
i 5.239 38.411 0.100 1 1100 70
i 5.240 38.641 0.100 1 1095 56
i 5.241 38.740 0.100 1 1097 78
i 5.242 38.865 0.100 1 1097 74
i 5.243 38.868 0.100 1 1097 60
i 5.244 38.967 0.100 1 1098 68
i 5.245 39.108 0.100 1 1093 56
i 5.246 39.532 0.100 1 1093 80
i 5.247 39.539 0.100 1 1097 52
i 5.248 39.559 0.100 1 1105 58
i 5.249 39.591 0.100 1 1100 73
i 5.250 39.643 0.100 1 1095 68
i 5.251 39.723 0.100 1 1091 60
i 4.133 40.001 0.490 3 41 127 0
i 4.134 40.501 0.490 3 41 127 1
i 4.135 41.501 0.490 3 41 127 2
i 4.136 43.001 0.490 3 41 127 3
i 4.137 45.001 0.490 3 41 127 4
i 5.252 40.240 0.100 1 1099 73
i 5.253 40.285 0.100 1 1099 74
i 5.254 40.296 0.100 1 1105 60
i 5.255 40.408 0.100 1 1103 56
i 5.256 40.453 0.100 1 1102 75
i 5.257 40.668 0.100 1 1089 76
i 4.139 40.751 0.490 3 40 127 0
i 4.140 41.251 0.490 3 40 127 1
i 4.141 42.251 0.490 3 40 127 2
i 4.142 43.751 0.490 3 40 127 3
i 4.143 45.751 0.490 3 40 127 4
i 5.258 41.043 0.100 1 1091 72
i 5.259 41.104 0.100 1 1097 55
i 5.260 41.180 0.100 1 1097 76
i 5.261 41.204 0.100 1 1099 53
i 5.262 41.269 0.100 1 1101 77
i 5.263 41.403 0.100 1 1092 77
i 5.264 41.424 0.100 1 1103 75
i 5.265 41.740 0.100 1 1091 69
i 5.266 41.831 0.100 1 1097 53
i 5.267 41.940 0.100 1 1094 84
i 5.268 42.097 0.100 1 1101 52
i 5.269 42.151 0.100 1 1099 81
i 5.270 42.175 0.100 1 1099 81
i 5.271 42.381 0.100 1 1101 74
i 5.272 42.547 0.100 1 1098 72
i 5.273 42.564 0.100 1 1098 77
i 5.274 42.615 0.100 1 1095 63
i 5.275 42.929 0.100 1 1103 54
i 5.276 42.975 0.100 1 1099 60
i 5.277 42.984 0.100 1 1103 66
i 5.278 43.007 0.100 1 1101 62
i 5.279 43.240 0.100 1 1096 64
i 5.280 43.308 0.100 1 1097 49
i 5.281 43.355 0.100 1 1096 68
i 5.282 43.585 0.100 1 1094 64
i 5.283 43.644 0.100 1 1105 70
i 5.284 43.652 0.100 1 1097 80
i 5.285 43.941 0.100 1 1095 73
i 4.145 44.001 0.490 3 40 127 0
i 4.146 44.501 0.490 3 40 127 1
i 4.147 45.501 0.490 3 40 127 2
i 4.148 47.001 0.490 3 40 127 3
i 4.149 49.001 0.490 3 40 127 4
i 5.286 44.051 0.100 1 1098 73
i 5.287 44.059 0.100 1 1100 65
i 5.288 44.107 0.100 1 1096 53
i 5.289 44.183 0.100 1 1105 80
i 5.290 44.207 0.100 1 1091 49
i 5.291 44.428 0.100 1 1095 67
i 5.292 44.740 0.100 1 1100 56
i 5.293 44.744 0.100 1 1093 81
i 4.151 44.751 0.490 3 38 127 0
i 4.152 45.251 0.490 3 38 127 1
i 4.153 46.251 0.490 3 38 127 2
i 4.154 47.751 0.490 3 38 127 3
i 4.155 49.751 0.490 3 38 127 4
i 5.294 44.800 0.100 1 1105 71
i 5.295 44.804 0.100 1 1098 58
i 5.296 44.943 0.100 1 1102 62
i 5.297 45.155 0.100 1 1098 49
i 5.298 45.196 0.100 1 1090 65
i 5.299 45.555 0.100 1 1090 67
i 5.300 45.564 0.100 1 1098 81
i 5.301 45.677 0.100 1 1096 74
i 5.302 45.708 0.100 1 1102 71
i 5.303 45.777 0.100 1 1098 67
i 5.304 45.915 0.100 1 1093 71
i 5.305 45.988 0.100 1 1102 55
i 5.306 46.240 0.100 1 1092 80
i 5.307 46.449 0.100 1 1096 71
i 5.308 46.473 0.100 1 1095 74
i 5.309 46.473 0.100 1 1100 73
i 5.310 46.481 0.100 1 1100 57
i 5.311 46.631 0.100 1 1102 84
i 5.312 46.825 0.100 1 1090 62
i 5.313 46.879 0.100 1 1100 61
i 5.314 47.059 0.100 1 1098 54
i 5.315 47.119 0.100 1 1097 63
i 5.316 47.188 0.100 1 1096 50
i 5.317 47.368 0.100 1 1088 62
i 5.318 47.408 0.100 1 1104 81
i 5.319 47.419 0.100 1 1098 77
i 5.320 47.432 0.100 1 1104 76
i 5.321 47.475 0.100 1 1100 58
i 5.322 47.740 0.100 1 1096 80
i 5.323 47.836 0.100 1 1098 75
i 5.324 47.888 0.100 1 1095 83
i 5.325 47.937 0.100 1 1106 65
i 4.157 48.001 0.490 3 36 127 0
i 4.158 48.501 0.490 3 36 127 1
i 4.159 49.501 0.490 3 36 127 2
i 4.160 51.001 0.490 3 36 127 3
i 4.161 53.001 0.490 3 36 127 4
i 5.326 48.009 0.100 1 1094 67
i 5.327 48.091 0.100 1 1098 63
i 5.328 48.217 0.100 1 1096 78
i 5.329 48.219 0.100 1 1102 78
i 5.330 48.561 0.100 1 1099 65
i 5.331 48.571 0.100 1 1101 79
i 5.332 48.585 0.100 1 1096 73
i 4.163 48.751 0.490 3 36 127 0
i 4.164 49.251 0.490 3 36 127 1
i 4.165 50.251 0.490 3 36 127 2
i 4.166 51.751 0.490 3 36 127 3
i 4.167 53.751 0.490 3 36 127 4
i 5.333 48.780 0.100 1 1090 64
i 5.334 48.869 0.100 1 1106 52
i 5.335 48.876 0.100 1 1096 50
i 5.336 48.993 0.100 1 1096 52
i 5.337 49.197 0.100 1 1094 83
i 5.338 49.239 0.100 1 1101 67
i 5.339 49.337 0.100 1 1097 64
i 5.340 49.375 0.100 1 1104 81
i 5.341 49.476 0.100 1 1103 72
i 5.342 49.747 0.100 1 1090 56
i 5.343 49.756 0.100 1 1098 58
i 5.344 49.912 0.100 1 1094 75
i 5.345 49.913 0.100 1 1094 74
i 5.346 50.017 0.100 1 1098 61
i 5.347 50.064 0.100 1 1091 74
i 5.348 50.265 0.100 1 1095 53
i 5.349 50.372 0.100 1 1097 50
i 5.350 50.435 0.100 1 1102 64
i 5.351 50.469 0.100 1 1093 65
i 5.352 50.653 0.100 1 1096 57
i 5.353 50.737 0.100 1 1093 56
i 5.354 50.807 0.100 1 1101 80
i 5.355 50.861 0.100 1 1102 70
i 5.356 51.049 0.100 1 1096 61
i 5.357 51.088 0.100 1 1095 60
i 5.358 51.164 0.100 1 1103 73
i 5.359 51.171 0.100 1 1099 70
i 5.360 51.213 0.100 1 1089 72
i 5.361 51.547 0.100 1 1099 79
i 5.362 51.567 0.100 1 1097 59
i 5.363 51.716 0.100 1 1096 65
i 5.364 51.741 0.100 1 1097 64
i 5.365 51.783 0.100 1 1097 49
i 5.366 51.835 0.100 1 1089 63
i 5.367 51.879 0.100 1 1105 77
i 5.368 51.887 0.100 1 1103 62
i 4.169 52.001 0.490 3 36 127 0
i 4.170 52.501 0.490 3 36 127 1
i 4.171 53.501 0.490 3 36 127 2
i 4.172 55.001 0.490 3 36 127 3
i 4.173 57.001 0.490 3 36 127 4
i 5.369 52.236 0.100 1 1095 66
i 5.370 52.385 0.100 1 1099 76
i 5.371 52.433 0.100 1 1095 62
i 5.372 52.464 0.100 1 1094 72
i 5.373 52.467 0.100 1 1101 78
i 5.374 52.529 0.100 1 1107 72
i 5.375 52.635 0.100 1 1097 71
i 5.376 52.661 0.100 1 1095 81
i 4.175 52.751 0.490 3 38 127 0
i 4.176 53.251 0.490 3 38 127 1
i 4.177 54.251 0.490 3 38 127 2
i 4.178 55.751 0.490 3 38 127 3
i 4.179 57.751 0.490 3 38 127 4
i 5.377 53.064 0.100 1 1097 77
i 5.378 53.069 0.100 1 1099 64
i 5.379 53.123 0.100 1 1103 62
i 5.380 53.125 0.100 1 1102 65
i 5.381 53.375 0.100 1 1089 75
i 5.382 53.435 0.100 1 1105 58
i 5.383 53.439 0.100 1 1097 57
i 5.384 53.615 0.100 1 1095 62
i 5.385 53.735 0.100 1 1102 57
i 5.386 53.871 0.100 1 1097 70
i 5.387 54.013 0.100 1 1093 72
i 5.388 54.053 0.100 1 1102 69
i 5.389 54.061 0.100 1 1103 57
i 5.390 54.296 0.100 1 1091 63
i 5.391 54.405 0.100 1 1099 72
i 5.392 54.456 0.100 1 1095 55
i 5.393 54.572 0.100 1 1092 74
i 5.394 54.583 0.100 1 1099 77
i 5.395 54.640 0.100 1 1095 62
i 5.396 54.853 0.100 1 1094 82
i 5.397 54.871 0.100 1 1105 76
i 5.398 54.929 0.100 1 1101 67
i 5.399 54.967 0.100 1 1097 49
i 5.400 55.040 0.100 1 1094 54
i 5.401 55.117 0.100 1 1097 48
i 5.402 55.233 0.100 1 1094 56
i 5.403 55.251 0.100 1 1101 83
i 5.404 55.469 0.100 1 1103 52
i 5.405 55.503 0.100 1 1101 52
i 5.406 55.511 0.100 1 1099 48
i 5.407 55.636 0.100 1 1089 47
i 5.408 55.641 0.100 1 1096 83
i 5.409 55.697 0.100 1 1104 72
i 5.410 55.728 0.100 1 1095 80
i 4.181 56.001 0.490 3 41 127 0
i 4.182 56.501 0.490 3 41 127 1
i 4.183 57.501 0.490 3 41 127 2
i 4.184 59.001 0.490 3 41 127 3
i 4.185 61.001 0.490 3 41 127 4
i 5.411 56.065 0.100 1 1097 63
i 5.412 56.075 0.100 1 1096 80
i 5.413 56.100 0.100 1 1099 58
i 5.414 56.329 0.100 1 1096 57
i 5.415 56.335 0.100 1 1089 54
i 5.416 56.340 0.100 1 1103 61
i 5.417 56.365 0.100 1 1102 64
i 5.418 56.372 0.100 1 1105 49
i 5.419 56.377 0.100 1 1098 55
i 5.420 56.732 0.100 1 1094 62
i 4.187 56.751 0.490 3 40 127 0
i 4.188 57.251 0.490 3 40 127 1
i 4.189 58.251 0.490 3 40 127 2
i 4.190 59.751 0.490 3 40 127 3
i 4.191 61.751 0.490 3 40 127 4
i 5.421 56.875 0.100 1 1096 83
i 5.422 56.933 0.100 1 1101 57
i 5.423 56.936 0.100 1 1100 62
i 5.424 57.001 0.100 1 1105 58
i 5.425 57.025 0.100 1 1094 80
i 5.426 57.056 0.100 1 1093 53
i 5.427 57.176 0.100 1 1106 49
i 5.428 57.213 0.100 1 1096 71
i 5.429 57.501 0.100 1 1104 67
i 5.430 57.560 0.100 1 1098 79
i 5.431 57.577 0.100 1 1100 74
i 5.432 57.696 0.100 1 1103 72
i 5.433 57.809 0.100 1 1096 56
i 5.434 57.904 0.100 1 1090 56
i 5.435 57.920 0.100 1 1104 55
i 5.436 57.931 0.100 1 1098 76
i 5.437 58.156 0.100 1 1094 50
i 5.438 58.231 0.100 1 1102 78
i 5.439 58.305 0.100 1 1094 62
i 5.440 58.421 0.100 1 1096 56
i 5.441 58.533 0.100 1 1098 79
i 5.442 58.645 0.100 1 1101 83
i 5.443 58.668 0.100 1 1102 67
i 5.444 58.743 0.100 1 1100 61
i 5.445 58.780 0.100 1 1092 76
i 5.446 58.844 0.100 1 1096 76
i 5.447 58.920 0.100 1 1096 60
i 5.448 59.080 0.100 1 1092 54
i 5.449 59.269 0.100 1 1100 68
i 5.450 59.279 0.100 1 1104 70
i 5.451 59.375 0.100 1 1100 66
i 5.452 59.385 0.100 1 1094 59
i 5.453 59.496 0.100 1 1096 49
i 5.454 59.504 0.100 1 1098 44
i 5.455 59.611 0.100 1 1095 67
i 5.456 59.619 0.100 1 1100 82
i 5.457 59.731 0.100 1 1095 80
i 5.458 59.816 0.100 1 1102 66
i 5.459 59.948 0.100 1 1098 76
i 4.193 60.001 0.490 3 36 127 0
i 4.194 60.501 0.490 3 36 127 1
i 4.195 61.501 0.490 3 36 127 2
i 4.196 63.001 0.490 3 36 127 3
i 4.197 65.001 0.490 3 36 127 4
i 5.460 60.065 0.100 1 1102 69
i 5.461 60.101 0.100 1 1088 48
i 5.462 60.128 0.100 1 1098 75
i 5.463 60.175 0.100 1 1104 76
i 5.464 60.233 0.100 1 1097 56
i 5.465 60.303 0.100 1 1094 66
i 5.466 60.509 0.100 1 1096 55
i 5.467 60.584 0.100 1 1095 84
i 5.468 60.748 0.100 1 1104 53
i 4.199 60.751 0.490 3 38 127 0
i 4.200 61.251 0.490 3 38 127 1
i 4.201 62.251 0.490 3 38 127 2
i 4.202 63.751 0.490 3 38 127 3
i 4.203 65.751 0.490 3 38 127 4
i 5.469 60.788 0.100 1 1101 65
i 5.470 60.873 0.100 1 1102 70
i 5.471 60.879 0.100 1 1090 46
i 5.472 60.907 0.100 1 1098 66
i 5.473 60.933 0.100 1 1106 68
i 5.474 60.943 0.100 1 1095 80
i 5.475 61.231 0.100 1 1093 79
i 5.476 61.349 0.100 1 1094 72
i 5.477 61.352 0.100 1 1097 73
i 5.478 61.395 0.100 1 1104 60
i 5.479 61.420 0.100 1 1101 75
i 5.480 61.597 0.100 1 1106 52
i 5.481 61.648 0.100 1 1093 84
i 5.482 61.836 0.100 1 1096 72
i 5.483 61.892 0.100 1 1106 57
i 5.484 62.088 0.100 1 1101 74
i 5.485 62.092 0.100 1 1099 69
i 5.486 62.111 0.100 1 1094 79
i 5.487 62.219 0.100 1 1096 53
i 5.488 62.265 0.100 1 1102 57
i 5.489 62.336 0.100 1 1103 69
i 5.490 62.343 0.100 1 1091 49
i 5.491 62.492 0.100 1 1099 70
i 5.492 62.661 0.100 1 1097 62
i 5.493 62.701 0.100 1 1093 73
i 5.494 62.731 0.100 1 1101 58
i 5.495 63.008 0.100 1 1095 74
i 5.496 63.131 0.100 1 1098 54
i 5.497 63.149 0.100 1 1101 67
i 5.498 63.175 0.100 1 1093 54
i 5.499 63.205 0.100 1 1101 54
i 5.500 63.236 0.100 1 1100 56
i 5.501 63.348 0.100 1 1099 70
i 5.502 63.387 0.100 1 1097 45
i 5.503 63.592 0.100 1 1093 66
i 5.504 63.689 0.100 1 1103 61
i 5.505 63.892 0.100 1 1099 47
i 5.506 63.917 0.100 1 1093 80
i 5.507 63.928 0.100 1 1097 53
i 5.508 63.928 0.100 1 1101 71
i 5.509 63.935 0.100 1 1095 72
i 5.510 63.935 0.100 1 1099 67
i 4.205 64.001 0.490 3 41 127 0
i 4.206 64.501 0.490 3 41 127 1
i 4.207 65.501 0.490 3 41 127 2
i 4.208 67.001 0.490 3 41 127 3
i 4.209 69.001 0.490 3 41 127 4
i 5.511 64.180 0.100 1 1096 74
i 5.512 64.231 0.100 1 1095 69
i 5.513 64.504 0.100 1 1103 79
i 5.514 64.568 0.100 1 1089 45
i 5.515 64.585 0.100 1 1103 73
i 5.516 64.652 0.100 1 1103 83
i 5.517 64.663 0.100 1 1097 77
i 5.518 64.664 0.100 1 1101 76
i 4.211 64.751 0.490 3 43 127 0
i 4.212 65.251 0.490 3 43 127 1
i 4.213 66.251 0.490 3 43 127 2
i 4.214 67.751 0.490 3 43 127 3
i 4.215 69.751 0.490 3 43 127 4
i 5.519 64.785 0.100 1 1093 54
i 5.520 64.824 0.100 1 1098 61
i 5.521 65.076 0.100 1 1095 58
i 5.522 65.096 0.100 1 1095 72
i 5.523 65.169 0.100 1 1105 69
i 5.524 65.195 0.100 1 1105 71
i 5.525 65.211 0.100 1 1101 75
i 5.526 65.245 0.100 1 1107 77
i 5.527 65.344 0.100 1 1099 50
i 5.528 65.423 0.100 1 1091 56
i 5.529 65.493 0.100 1 1107 55
i 5.530 65.555 0.100 1 1094 53
i 5.531 65.731 0.100 1 1092 70
i 5.532 65.795 0.100 1 1095 57
i 5.533 65.823 0.100 1 1095 56
i 5.534 65.829 0.100 1 1098 72
i 5.535 65.877 0.100 1 1101 67
i 5.536 66.005 0.100 1 1105 62
i 5.537 66.133 0.100 1 1107 56
i 5.538 66.237 0.100 1 1092 62
i 5.539 66.381 0.100 1 1105 63
i 5.540 66.389 0.100 1 1095 57
i 5.541 66.461 0.100 1 1097 64
i 5.542 66.600 0.100 1 1102 78
i 5.543 66.624 0.100 1 1100 70
i 5.544 66.645 0.100 1 1103 56
i 5.545 66.660 0.100 1 1103 64
i 5.546 66.701 0.100 1 1097 74
i 5.547 66.755 0.100 1 1091 67
i 5.548 66.833 0.100 1 1102 79
i 5.549 66.937 0.100 1 1099 69
i 5.550 67.060 0.100 1 1098 58
i 5.551 67.176 0.100 1 1093 63
i 5.552 67.231 0.100 1 1100 57
i 5.553 67.441 0.100 1 1101 67
i 5.554 67.541 0.100 1 1094 56
i 5.555 67.595 0.100 1 1094 81
i 5.556 67.604 0.100 1 1099 66
i 5.557 67.628 0.100 1 1106 78
i 5.558 67.649 0.100 1 1101 64
i 5.559 67.728 0.100 1 1096 79
i 5.560 67.783 0.100 1 1097 69
i 5.561 67.825 0.100 1 1100 59
i 4.217 68.001 0.490 3 36 127 0
i 4.218 68.501 0.490 3 36 127 1
i 4.219 69.501 0.490 3 36 127 2
i 4.220 71.001 0.490 3 36 127 3
i 4.221 73.001 0.490 3 36 127 4
i 5.562 68.104 0.100 1 1094 73
i 5.563 68.235 0.100 1 1103 78
i 5.564 68.297 0.100 1 1104 54
i 5.565 68.347 0.100 1 1094 79
i 5.566 68.356 0.100 1 1100 67
i 5.567 68.381 0.100 1 1098 80
i 5.568 68.449 0.100 1 1092 53
i 5.569 68.493 0.100 1 1102 63
i 5.570 68.527 0.100 1 1098 77
i 5.571 68.731 0.100 1 1096 61
i 5.572 68.748 0.100 1 1097 82
i 4.223 68.751 0.490 3 38 127 0
i 4.224 69.251 0.490 3 38 127 1
i 4.225 70.251 0.490 3 38 127 2
i 4.226 71.751 0.490 3 38 127 3
i 4.227 73.751 0.490 3 38 127 4
i 5.573 68.995 0.100 1 1104 71
i 5.574 69.075 0.100 1 1100 52
i 5.575 69.109 0.100 1 1090 44
i 5.576 69.129 0.100 1 1102 62
i 5.577 69.191 0.100 1 1104 83
i 5.578 69.243 0.100 1 1092 52
i 5.579 69.249 0.100 1 1098 77
i 5.580 69.264 0.100 1 1096 74
i 5.581 69.413 0.100 1 1099 53
i 5.582 69.535 0.100 1 1096 60
i 5.583 69.607 0.100 1 1094 82
i 5.584 69.633 0.100 1 1100 78
i 5.585 69.741 0.100 1 1094 62
i 5.586 69.757 0.100 1 1100 79
i 5.587 69.768 0.100 1 1106 54
i 5.588 69.940 0.100 1 1106 66
i 5.589 70.043 0.100 1 1092 71
i 5.590 70.092 0.100 1 1106 53
i 5.591 70.165 0.100 1 1093 57
i 5.592 70.229 0.100 1 1092 53
i 5.593 70.261 0.100 1 1098 65
i 5.594 70.307 0.100 1 1098 62
i 5.595 70.335 0.100 1 1100 58
i 5.596 70.339 0.100 1 1096 69
i 5.597 70.545 0.100 1 1108 63
i 5.598 70.631 0.100 1 1104 77
i 5.599 70.675 0.100 1 1104 71
i 5.600 70.772 0.100 1 1098 59
i 5.601 70.827 0.100 1 1091 54
i 5.602 70.931 0.100 1 1094 75
i 5.603 71.083 0.100 1 1102 76
i 5.604 71.109 0.100 1 1101 70
i 5.605 71.156 0.100 1 1100 77
i 5.606 71.168 0.100 1 1092 64
i 5.607 71.213 0.100 1 1104 62
i 5.608 71.301 0.100 1 1098 75
i 5.609 71.384 0.100 1 1100 73
i 5.610 71.401 0.100 1 1101 72
i 5.611 71.528 0.100 1 1096 54
i 5.612 71.639 0.100 1 1092 51
i 5.613 71.728 0.100 1 1099 73
i 5.614 71.909 0.100 1 1094 50
i 5.615 71.973 0.100 1 1100 78
i 4.229 72.001 0.490 3 41 127 0
i 4.230 72.501 0.490 3 41 127 1
i 4.231 73.501 0.490 3 41 127 2
i 4.232 75.001 0.490 3 41 127 3
i 4.233 77.001 0.490 3 41 127 4
i 5.616 72.012 0.100 1 1106 70
i 5.617 72.016 0.100 1 1100 53
i 5.618 72.036 0.100 1 1102 80
i 5.619 72.048 0.100 1 1105 73
i 5.620 72.132 0.100 1 1093 71
i 5.621 72.168 0.100 1 1098 66
i 5.622 72.389 0.100 1 1099 71
i 5.623 72.612 0.100 1 1095 72
i 5.624 72.691 0.100 1 1098 56
i 4.235 72.751 0.490 3 40 127 0
i 4.236 73.251 0.490 3 40 127 1
i 4.237 74.251 0.490 3 40 127 2
i 4.238 75.751 0.490 3 40 127 3
i 4.239 77.751 0.490 3 40 127 4
i 5.625 72.760 0.100 1 1093 69
i 5.626 72.820 0.100 1 1100 50
i 5.627 72.833 0.100 1 1103 70
i 5.628 72.835 0.100 1 1102 59
i 5.629 72.932 0.100 1 1093 82
i 5.630 72.937 0.100 1 1102 58
i 5.631 72.943 0.100 1 1098 54
i 5.632 73.227 0.100 1 1097 68
i 5.633 73.291 0.100 1 1097 66
i 5.634 73.383 0.100 1 1097 63
i 5.635 73.487 0.100 1 1100 78
i 5.636 73.557 0.100 1 1101 82
i 5.637 73.633 0.100 1 1099 50
i 5.638 73.652 0.100 1 1091 55
i 5.639 73.701 0.100 1 1091 71
i 5.640 73.756 0.100 1 1105 73
i 5.641 73.907 0.100 1 1095 64
i 5.642 73.977 0.100 1 1100 56
i 5.643 74.109 0.100 1 1099 62
i 5.644 74.115 0.100 1 1093 59
i 5.645 74.197 0.100 1 1099 53
i 5.646 74.233 0.100 1 1101 65
i 5.647 74.367 0.100 1 1106 55
i 5.648 74.428 0.100 1 1095 61
i 5.649 74.429 0.100 1 1105 62
i 5.650 74.572 0.100 1 1105 58
i 5.651 74.641 0.100 1 1093 51
i 5.652 74.725 0.100 1 1091 53
i 5.653 74.752 0.100 1 1092 82
i 5.654 74.776 0.100 1 1097 59
i 5.655 74.837 0.100 1 1099 61
i 5.656 74.856 0.100 1 1099 72
i 5.657 74.953 0.100 1 1097 53
i 5.658 74.956 0.100 1 1107 69
i 5.659 75.009 0.100 1 1103 56
i 5.660 75.255 0.100 1 1103 50
i 5.661 75.392 0.100 1 1092 61
i 5.662 75.452 0.100 1 1093 51
i 5.663 75.576 0.100 1 1101 78
i 5.664 75.617 0.100 1 1101 74
i 5.665 75.620 0.100 1 1095 73
i 5.666 75.644 0.100 1 1093 63
i 5.667 75.741 0.100 1 1101 59
i 5.668 75.873 0.100 1 1101 58
i 5.669 75.899 0.100 1 1099 51
i 5.670 75.945 0.100 1 1100 69
i 4.241 76.001 0.490 3 40 127 0
i 4.242 76.501 0.490 3 40 127 1
i 4.243 77.501 0.490 3 40 127 2
i 4.244 79.001 0.490 3 40 127 3
i 4.245 81.001 0.490 3 40 127 4
i 5.671 76.059 0.100 1 1105 60
i 5.672 76.083 0.100 1 1091 73
i 5.673 76.224 0.100 1 1099 80
i 5.674 76.228 0.100 1 1105 61
i 5.675 76.341 0.100 1 1095 72
i 5.676 76.345 0.100 1 1099 54
i 5.677 76.425 0.100 1 1101 57
i 5.678 76.633 0.100 1 1099 68
i 5.679 76.636 0.100 1 1107 72
i 5.680 76.663 0.100 1 1093 73
i 5.681 76.680 0.100 1 1103 59
i 5.682 76.737 0.100 1 1109 78
i 4.247 76.751 0.490 3 38 127 0
i 4.248 77.251 0.490 3 38 127 1
i 4.249 78.251 0.490 3 38 127 2
i 4.250 79.751 0.490 3 38 127 3
i 4.251 81.751 0.490 3 38 127 4
i 5.683 76.912 0.100 1 1098 76
i 5.684 77.101 0.100 1 1102 78
i 5.685 77.120 0.100 1 1096 65
i 5.686 77.180 0.100 1 1097 59
i 5.687 77.236 0.100 1 1093 75
i 5.688 77.261 0.100 1 1103 75
i 5.689 77.364 0.100 1 1099 44
i 5.690 77.408 0.100 1 1094 82
i 5.691 77.421 0.100 1 1101 74
i 5.692 77.432 0.100 1 1097 71
i 5.693 77.621 0.100 1 1107 72
i 5.694 77.723 0.100 1 1098 75
i 5.695 77.739 0.100 1 1098 76
i 5.696 77.792 0.100 1 1098 75
i 5.697 77.959 0.100 1 1099 77
i 5.698 77.979 0.100 1 1100 59
i 5.699 78.017 0.100 1 1099 60
i 5.700 78.200 0.100 1 1105 82
i 5.701 78.223 0.100 1 1091 63
i 5.702 78.243 0.100 1 1095 79
i 5.703 78.273 0.100 1 1091 59
i 5.704 78.500 0.100 1 1100 65
i 5.705 78.529 0.100 1 1104 51
i 5.706 78.585 0.100 1 1098 83
i 5.707 78.623 0.100 1 1092 82
i 5.708 78.641 0.100 1 1100 51
i 5.709 78.735 0.100 1 1104 57
i 5.710 78.800 0.100 1 1100 55
i 5.711 78.876 0.100 1 1105 72
i 5.712 78.892 0.100 1 1107 57
i 5.713 78.992 0.100 1 1095 52
i 5.714 79.185 0.100 1 1093 55
i 5.715 79.221 0.100 1 1090 66
i 5.716 79.228 0.100 1 1106 66
i 5.717 79.296 0.100 1 1092 58
i 5.718 79.308 0.100 1 1096 79
i 5.719 79.368 0.100 1 1100 60
i 5.720 79.452 0.100 1 1102 64
i 5.721 79.468 0.100 1 1098 72
i 5.722 79.491 0.100 1 1107 73
i 5.723 79.639 0.100 1 1098 53
i 5.724 79.639 0.100 1 1102 57
i 5.725 79.740 0.100 1 1100 66
i 5.726 79.915 0.100 1 1093 59
i 5.727 79.917 0.100 1 1092 45
i 4.253 80.001 0.490 3 36 127 0
i 4.254 80.501 0.490 3 36 127 1
i 4.255 81.501 0.490 3 36 127 2
i 4.256 83.001 0.490 3 36 127 3
i 4.257 85.001 0.490 3 36 127 4
i 5.728 80.125 0.100 1 1100 82
i 5.729 80.140 0.100 1 1100 80
i 5.730 80.211 0.100 1 1094 55
i 5.731 80.239 0.100 1 1094 76
i 5.732 80.327 0.100 1 1102 82
i 5.733 80.361 0.100 1 1100 64
i 5.734 80.435 0.100 1 1102 64
i 5.735 80.447 0.100 1 1099 75
i 5.736 80.460 0.100 1 1098 75
i 5.737 80.469 0.100 1 1090 73
i 5.738 80.616 0.100 1 1106 59
i 5.739 80.721 0.100 1 1098 53
i 4.259 80.751 0.490 3 36 127 0
i 4.260 81.251 0.490 3 36 127 1
i 4.261 82.251 0.490 3 36 127 2
i 4.262 83.751 0.490 3 36 127 3
i 4.263 85.751 0.490 3 36 127 4
i 5.740 80.788 0.100 1 1098 78
i 5.741 80.863 0.100 1 1096 67
i 5.742 80.935 0.100 1 1104 54
i 5.743 81.023 0.100 1 1102 56
i 5.744 81.097 0.100 1 1100 51
i 5.745 81.193 0.100 1 1092 57
i 5.746 81.260 0.100 1 1108 77
i 5.747 81.389 0.100 1 1108 68
i 5.748 81.392 0.100 1 1097 62
i 5.749 81.395 0.100 1 1104 61
i 5.750 81.583 0.100 1 1104 70
i 5.751 81.629 0.100 1 1096 58
i 5.752 81.803 0.100 1 1092 71
i 5.753 81.831 0.100 1 1100 69
i 5.754 81.884 0.100 1 1094 70
i 5.755 81.895 0.100 1 1102 79
i 5.756 81.905 0.100 1 1098 69
i 5.757 81.993 0.100 1 1096 57
i 5.758 82.024 0.100 1 1098 74
i 5.759 82.221 0.100 1 1099 69
i 5.760 82.251 0.100 1 1099 60
i 5.761 82.252 0.100 1 1106 53
i 5.762 82.399 0.100 1 1100 68
i 5.763 82.524 0.100 1 1106 81
i 5.764 82.555 0.100 1 1098 73
i 5.765 82.620 0.100 1 1098 80
i 5.766 82.641 0.100 1 1100 77
i 5.767 82.649 0.100 1 1096 57
i 5.768 82.773 0.100 1 1090 49
i 5.769 82.893 0.100 1 1092 74
i 5.770 82.907 0.100 1 1104 71
i 5.771 82.981 0.100 1 1101 81
i 5.772 83.060 0.100 1 1097 73
i 5.773 83.133 0.100 1 1091 72
i 5.774 83.145 0.100 1 1104 52
i 5.775 83.300 0.100 1 1108 49
i 5.776 83.395 0.100 1 1100 65
i 5.777 83.437 0.100 1 1096 70
i 5.778 83.437 0.100 1 1104 66
i 5.779 83.463 0.100 1 1107 56
i 5.780 83.609 0.100 1 1101 56
i 5.781 83.721 0.100 1 1091 59
i 5.782 83.727 0.100 1 1094 51
i 5.783 83.799 0.100 1 1091 78
i 5.784 83.897 0.100 1 1101 82
i 5.785 84.021 0.100 1 1102 48
i 5.786 84.087 0.100 1 1106 79
i 5.787 84.107 0.100 1 1097 59
i 5.788 84.168 0.100 1 1102 76
i 5.789 84.204 0.100 1 1098 84
i 5.790 84.228 0.100 1 1099 60
i 5.791 84.364 0.100 1 1095 51
i 5.792 84.380 0.100 1 1092 53
i 5.793 84.396 0.100 1 1093 62
i 5.794 84.637 0.100 1 1099 61
i 5.795 84.769 0.100 1 1100 50
i 5.796 84.777 0.100 1 1107 74
i 5.797 84.804 0.100 1 1095 73
i 5.798 84.825 0.100 1 1099 63
i 5.799 84.885 0.100 1 1103 59
i 5.800 84.907 0.100 1 1099 69
i 5.801 84.907 0.100 1 1089 62
i 5.802 84.997 0.100 1 1103 73
i 5.803 85.203 0.100 1 1099 78
i 5.804 85.221 0.100 1 1097 67
i 5.805 85.347 0.100 1 1093 71
i 5.806 85.352 0.100 1 1097 83
i 5.807 85.411 0.100 1 1097 76
i 5.808 85.613 0.100 1 1099 55
i 5.809 85.619 0.100 1 1102 66
i 5.810 85.643 0.100 1 1109 49
i 5.811 85.697 0.100 1 1093 61
i 5.812 85.831 0.100 1 1096 53
i 5.813 85.884 0.100 1 1105 49
i 4.265 86.001 0.490 3 36 127 0
i 4.266 86.501 0.490 3 36 127 1
i 4.267 87.501 0.490 3 36 127 2
i 4.268 89.001 0.490 3 36 127 3
i 4.269 91.001 0.490 3 36 127 4
i 5.814 86.021 0.100 1 1107 55
i 5.815 86.025 0.100 1 1105 71
i 5.816 86.131 0.100 1 1103 56
i 5.817 86.141 0.100 1 1097 61
i 5.818 86.240 0.100 1 1099 57
i 5.819 86.333 0.100 1 1095 64
i 5.820 86.396 0.100 1 1091 66
i 5.821 86.441 0.100 1 1095 70
i 5.822 86.500 0.100 1 1097 53
i 5.823 86.628 0.100 1 1099 64
i 5.824 86.631 0.100 1 1105 56
i 5.825 86.667 0.100 1 1100 76
i 5.826 86.721 0.100 1 1099 74
i 4.271 86.751 0.490 3 36 127 0
i 4.272 87.251 0.490 3 36 127 1
i 4.273 88.251 0.490 3 36 127 2
i 4.274 89.751 0.490 3 36 127 3
i 4.275 91.751 0.490 3 36 127 4
i 5.827 86.845 0.100 1 1105 77
i 5.828 86.875 0.100 1 1099 65
i 5.829 86.943 0.100 1 1097 71
i 5.830 87.084 0.100 1 1101 61
i 5.831 87.152 0.100 1 1097 61
i 5.832 87.232 0.100 1 1105 51
i 5.833 87.233 0.100 1 1101 79
i 5.834 87.321 0.100 1 1089 51
i 5.835 87.419 0.100 1 1102 74
i 5.836 87.435 0.100 1 1093 59
i 5.837 87.591 0.100 1 1097 63
i 5.838 87.645 0.100 1 1091 83
i 5.839 87.711 0.100 1 1107 59
i 5.840 87.812 0.100 1 1097 55
i 5.841 87.885 0.100 1 1103 49
i 5.842 87.897 0.100 1 1099 61
i 5.843 87.959 0.100 1 1103 49
i 5.844 87.988 0.100 1 1099 55
i 5.845 88.043 0.100 1 1107 56
i 5.846 88.191 0.100 1 1095 43
i 5.847 88.221 0.100 1 1092 68
i 5.848 88.257 0.100 1 1092 80
i 5.849 88.483 0.100 1 1102 64
i 5.850 88.615 0.100 1 1101 77
i 5.851 88.685 0.100 1 1105 63
i 5.852 88.700 0.100 1 1099 70
i 5.853 88.745 0.100 1 1097 68
i 5.854 88.767 0.100 1 1091 45
i 5.855 88.769 0.100 1 1101 50
i 5.856 88.821 0.100 1 1101 68
i 5.857 88.833 0.100 1 1094 84
i 5.858 89.025 0.100 1 1099 76
i 5.859 89.149 0.100 1 1098 75
i 5.860 89.151 0.100 1 1107 58
i 5.861 89.191 0.100 1 1101 49
i 5.862 89.345 0.100 1 1098 65
i 5.863 89.372 0.100 1 1089 56
i 5.864 89.396 0.100 1 1111 79
i 5.865 89.399 0.100 1 1095 52
i 5.866 89.416 0.100 1 1104 66
i 5.867 89.441 0.100 1 1099 77
i 5.868 89.444 0.100 1 1103 72
i 5.869 89.664 0.100 1 1094 67
i 5.870 89.721 0.100 1 1096 74
i 5.871 89.799 0.100 1 1100 54
i 5.872 89.923 0.100 1 1108 50
i 5.873 89.961 0.100 1 1098 53
i 5.874 90.037 0.100 1 1097 68
i 5.875 90.067 0.100 1 1108 51
i 5.876 90.155 0.100 1 1103 75
i 5.877 90.157 0.100 1 1099 62
i 5.878 90.173 0.100 1 1094 63
i 5.879 90.176 0.100 1 1105 56
i 5.880 90.248 0.100 1 1096 77
i 5.881 90.363 0.100 1 1106 68
i 5.882 90.559 0.100 1 1094 69
i 5.883 90.589 0.100 1 1106 73
i 5.884 90.599 0.100 1 1104 78
i 5.885 90.653 0.100 1 1098 56
i 5.886 90.723 0.100 1 1099 56
i 5.887 90.755 0.100 1 1096 58
i 5.888 90.863 0.100 1 1100 59
i 5.889 90.888 0.100 1 1096 75
i 5.890 90.933 0.100 1 1090 75
i 5.891 91.009 0.100 1 1104 61
i 5.892 91.063 0.100 1 1101 53
i 5.893 91.121 0.100 1 1096 55
i 5.894 91.221 0.100 1 1100 53
i 5.895 91.221 0.100 1 1106 55
i 5.896 91.288 0.100 1 1104 83
i 5.897 91.351 0.100 1 1098 71
i 5.898 91.431 0.100 1 1102 79
i 5.899 91.541 0.100 1 1098 69
i 5.900 91.625 0.100 1 1096 73
i 5.901 91.688 0.100 1 1102 76
i 5.902 91.803 0.100 1 1102 55
i 5.903 91.813 0.100 1 1090 66
i 5.904 91.836 0.100 1 1103 53
i 5.905 91.864 0.100 1 1106 64
i 5.906 91.979 0.100 1 1094 69
i 4.277 92.001 0.490 3 36 127 0
i 4.278 92.501 0.490 3 36 127 1
i 4.279 93.501 0.490 3 36 127 2
i 4.280 95.001 0.490 3 36 127 3
i 4.281 97.001 0.490 3 36 127 4
i 5.907 92.121 0.100 1 1096 57
i 5.908 92.133 0.100 1 1098 82
i 5.909 92.156 0.100 1 1090 77
i 5.910 92.256 0.100 1 1106 51
i 5.911 92.296 0.100 1 1100 81
i 5.912 92.447 0.100 1 1102 65
i 5.913 92.521 0.100 1 1100 73
i 5.914 92.525 0.100 1 1098 49
i 5.915 92.633 0.100 1 1102 58
i 5.916 92.656 0.100 1 1096 71
i 5.917 92.696 0.100 1 1093 70
i 5.918 92.720 0.100 1 1092 69
i 4.283 92.751 0.490 3 36 127 0
i 4.284 93.251 0.490 3 36 127 1
i 4.285 94.251 0.490 3 36 127 2
i 4.286 95.751 0.490 3 36 127 3
i 4.287 97.751 0.490 3 36 127 4
i 5.919 92.801 0.100 1 1108 59
i 5.920 93.037 0.100 1 1110 51
i 5.921 93.068 0.100 1 1102 69
i 5.922 93.096 0.100 1 1104 68
i 5.923 93.125 0.100 1 1100 66
i 5.924 93.160 0.100 1 1090 59
i 5.925 93.197 0.100 1 1100 74
i 5.926 93.200 0.100 1 1100 71
i 5.927 93.251 0.100 1 1095 80
i 5.928 93.328 0.100 1 1096 74
i 5.929 93.409 0.100 1 1100 72
i 5.930 93.529 0.100 1 1098 73
i 5.931 93.659 0.100 1 1097 68
i 5.932 93.784 0.100 1 1097 80
i 5.933 93.789 0.100 1 1102 69
i 5.934 93.843 0.100 1 1088 44
i 5.935 93.852 0.100 1 1108 61
i 5.936 93.887 0.100 1 1108 65
i 5.937 93.929 0.100 1 1104 50
i 5.938 93.936 0.100 1 1096 63
i 5.939 93.947 0.100 1 1104 54
i 5.940 93.988 0.100 1 1098 80
i 5.941 94.033 0.100 1 1102 57
i 5.942 94.048 0.100 1 1100 70
i 5.943 94.219 0.100 1 1095 62
i 5.944 94.453 0.100 1 1098 49
i 5.945 94.464 0.100 1 1105 48
i 5.946 94.507 0.100 1 1106 53
i 5.947 94.567 0.100 1 1104 75
i 5.948 94.581 0.100 1 1108 55
i 5.949 94.649 0.100 1 1095 76
i 5.950 94.664 0.100 1 1095 69
i 5.951 94.704 0.100 1 1096 69
i 5.952 94.705 0.100 1 1098 59
i 5.953 94.739 0.100 1 1106 77
i 5.954 94.964 0.100 1 1094 65
i 5.955 95.156 0.100 1 1100 59
i 5.956 95.161 0.100 1 1099 59
i 5.957 95.176 0.100 1 1097 78
i 5.958 95.273 0.100 1 1106 80
i 5.959 95.323 0.100 1 1098 57
i 5.960 95.372 0.100 1 1096 75
i 5.961 95.373 0.100 1 1107 74
i 5.962 95.380 0.100 1 1089 51
i 5.963 95.457 0.100 1 1101 53
i 5.964 95.639 0.100 1 1103 50
i 5.965 95.664 0.100 1 1096 44
i 5.966 95.717 0.100 1 1101 70
i 5.967 95.771 0.100 1 1094 55
i 5.968 95.827 0.100 1 1097 79
i 5.969 95.851 0.100 1 1103 82
i 4.289 96.001 0.490 3 36 127 0
i 4.290 96.501 0.490 3 36 127 1
i 4.291 97.501 0.490 3 36 127 2
i 4.292 99.001 0.490 3 36 127 3
i 4.293 101.001 0.490 3 36 127 4
i 5.970 96.037 0.100 1 1096 49
i 5.971 96.081 0.100 1 1101 63
i 5.972 96.111 0.100 1 1103 52
i 5.973 96.180 0.100 1 1099 66
i 5.974 96.216 0.100 1 1091 61
i 5.975 96.252 0.100 1 1103 62
i 5.976 96.443 0.100 1 1095 73
i 5.977 96.531 0.100 1 1107 61
i 5.978 96.575 0.100 1 1099 68
i 5.979 96.652 0.100 1 1095 62
i 5.980 96.664 0.100 1 1091 83
i 5.981 96.731 0.100 1 1101 70
i 4.295 96.751 0.490 3 36 127 0
i 4.296 97.251 0.490 3 36 127 1
i 4.297 98.251 0.490 3 36 127 2
i 4.298 99.751 0.490 3 36 127 3
i 4.299 101.751 0.490 3 36 127 4
i 5.982 96.856 0.100 1 1106 59
i 5.983 96.931 0.100 1 1101 62
i 5.984 96.945 0.100 1 1101 60
i 5.985 96.972 0.100 1 1097 78
i 5.986 97.041 0.100 1 1097 51
i 5.987 97.077 0.100 1 1099 75
i 5.988 97.133 0.100 1 1094 58
i 5.989 97.213 0.100 1 1109 61
i 5.990 97.216 0.100 1 1093 74
i 5.991 97.445 0.100 1 1101 70
i 5.992 97.508 0.100 1 1099 68
i 5.993 97.508 0.100 1 1103 78
i 5.994 97.623 0.100 1 1089 72
i 5.995 97.652 0.100 1 1103 73
i 5.996 97.667 0.100 1 1096 76
i 5.997 97.732 0.100 1 1099 57
i 5.998 97.739 0.100 1 1099 75
i 5.999 97.740 0.100 1 1099 78
i 5.001 97.820 0.100 1 1095 58
i 5.002 97.881 0.100 1 1109 52
i 5.003 98.167 0.100 1 1097 80
i 5.004 98.223 0.100 1 1096 72
i 5.005 98.375 0.100 1 1105 64
i 5.006 98.383 0.100 1 1097 52
i 5.007 98.384 0.100 1 1089 48
i 5.008 98.388 0.100 1 1103 60
i 5.009 98.429 0.100 1 1097 65
i 5.010 98.476 0.100 1 1103 75
i 5.011 98.476 0.100 1 1101 69
i 5.012 98.497 0.100 1 1101 79
i 5.013 98.639 0.100 1 1109 56
i 5.014 98.715 0.100 1 1095 55
i 5.015 98.781 0.100 1 1107 62
i 5.016 98.912 0.100 1 1099 56
i 5.017 98.952 0.100 1 1107 79
i 5.018 98.977 0.100 1 1105 61
i 5.019 99.081 0.100 1 1094 65
i 5.020 99.124 0.100 1 1095 54
i 5.021 99.165 0.100 1 1107 69
i 5.022 99.245 0.100 1 1103 65
i 5.023 99.267 0.100 1 1095 62
i 5.024 99.325 0.100 1 1097 67
i 5.025 99.421 0.100 1 1105 56
i 5.026 99.653 0.100 1 1098 60
i 5.027 99.669 0.100 1 1100 61
i 5.028 99.680 0.100 1 1105 74
i 5.029 99.793 0.100 1 1089 80
i 5.030 99.812 0.100 1 1101 72
i 5.031 99.853 0.100 1 1102 76
i 5.032 99.920 0.100 1 1097 51
i 5.033 99.933 0.100 1 1097 74
i 5.034 99.957 0.100 1 1105 65
i 4.301 100.001 0.490 3 36 127 0
i 4.302 100.501 0.490 3 36 127 1
i 4.303 101.501 0.490 3 36 127 2
i 4.304 103.001 0.490 3 36 127 3
i 4.305 105.001 0.490 3 36 127 4
i 5.035 100.205 0.100 1 1095 55
i 5.036 100.213 0.100 1 1102 66
i 5.037 100.228 0.100 1 1093 51
i 5.038 100.269 0.100 1 1103 77
i 5.039 100.359 0.100 1 1096 56
i 5.040 100.447 0.100 1 1097 61
i 5.041 100.484 0.100 1 1107 72
i 5.042 100.501 0.100 1 1103 63
i 5.043 100.547 0.100 1 1103 59
i 5.044 100.584 0.100 1 1091 72
i 5.045 100.669 0.100 1 1102 52
i 4.307 100.751 0.490 3 36 127 0
i 4.308 101.251 0.490 3 36 127 1
i 4.309 102.251 0.490 3 36 127 2
i 4.310 103.751 0.490 3 36 127 3
i 4.311 105.751 0.490 3 36 127 4
i 5.046 100.896 0.100 1 1099 50
i 5.047 100.907 0.100 1 1095 70
i 5.048 100.908 0.100 1 1108 59
i 5.049 100.947 0.100 1 1095 79
i 5.050 101.104 0.100 1 1099 63
i 5.051 101.160 0.100 1 1100 73
i 5.052 101.172 0.100 1 1092 71
i 5.053 101.239 0.100 1 1094 59
i 5.054 101.385 0.100 1 1096 78
i 5.055 101.428 0.100 1 1097 62
i 5.056 101.443 0.100 1 1105 57
i 5.057 101.479 0.100 1 1100 61
i 5.058 101.480 0.100 1 1110 61
i 5.059 101.492 0.100 1 1101 58
i 5.060 101.572 0.100 1 1094 57
i 5.061 101.713 0.100 1 1094 65
i 5.062 101.853 0.100 1 1102 79
i 5.063 101.900 0.100 1 1101 81
i 5.064 101.980 0.100 1 1103 50
i 4.313 102.001 0.490 3 36 127 0
i 4.314 102.501 0.490 3 36 127 1
i 4.315 103.501 0.490 3 36 127 2
i 4.316 105.001 0.490 3 36 127 3
i 4.317 107.001 0.490 3 36 127 4
i 5.065 102.031 0.100 1 1112 49
i 5.066 102.084 0.100 1 1097 66
i 5.067 102.088 0.100 1 1088 67
i 5.068 102.147 0.100 1 1098 58
i 5.069 102.153 0.100 1 1098 67
i 5.070 102.184 0.100 1 1104 84
i 5.071 102.188 0.100 1 1100 48
i 5.072 102.261 0.100 1 1100 54
i 5.073 102.277 0.100 1 1094 68
i 5.074 102.589 0.100 1 1098 56
i 5.075 102.661 0.100 1 1095 66
i 5.076 102.676 0.100 1 1096 62
i 5.077 102.749 0.100 1 1096 63
i 4.319 102.751 0.490 3 36 127 0
i 4.320 103.251 0.490 3 36 127 1
i 4.321 104.251 0.490 3 36 127 2
i 4.322 105.751 0.490 3 36 127 3
i 4.323 107.751 0.490 3 36 127 4
i 5.078 102.796 0.100 1 1098 64
i 5.079 102.863 0.100 1 1110 60
i 5.080 102.913 0.100 1 1103 73
i 5.081 102.928 0.100 1 1090 65
i 5.082 102.936 0.100 1 1106 48
i 5.083 102.953 0.100 1 1102 57
i 5.084 103.027 0.100 1 1108 62
i 5.085 103.099 0.100 1 1108 79
i 5.086 103.213 0.100 1 1094 81
i 5.087 103.251 0.100 1 1102 64
i 5.088 103.369 0.100 1 1100 69
i 5.089 103.499 0.100 1 1093 72
i 5.090 103.512 0.100 1 1106 66
i 5.091 103.513 0.100 1 1102 74
i 5.092 103.547 0.100 1 1096 83
i 5.093 103.668 0.100 1 1106 51
i 5.094 103.708 0.100 1 1094 58
i 5.095 103.712 0.100 1 1106 65
i 5.096 103.775 0.100 1 1106 72
i 5.097 103.808 0.100 1 1104 73
i 5.098 103.911 0.100 1 1096 47
i 4.325 104.001 0.490 3 36 127 0
i 4.326 104.501 0.490 3 36 127 1
i 4.327 105.501 0.490 3 36 127 2
i 4.328 107.001 0.490 3 36 127 3
i 4.329 109.001 0.490 3 36 127 4
i 5.099 104.053 0.100 1 1104 79
i 4.331 104.125 0.490 3 43 127 0
i 4.332 104.625 0.490 3 43 127 1
i 4.333 105.625 0.490 3 43 127 2
i 5.100 104.131 0.100 1 1098 72
i 4.334 107.125 0.490 3 43 127 3
i 4.335 109.125 0.490 3 43 127 4
i 5.101 104.173 0.100 1 1104 69
i 5.102 104.180 0.100 1 1100 56
i 5.103 104.205 0.100 1 1090 60
i 5.104 104.249 0.100 1 1103 66
i 5.105 104.383 0.100 1 1096 71
i 5.106 104.495 0.100 1 1098 51
i 5.107 104.520 0.100 1 1104 69
i 5.108 104.527 0.100 1 1106 69
i 5.109 104.643 0.100 1 1102 74
i 5.110 104.647 0.100 1 1102 69
i 5.111 104.713 0.100 1 1101 79
i 5.112 104.713 0.100 1 1094 63
i 5.113 104.751 0.100 1 1106 75
i 4.337 104.751 0.490 3 36 127 0
i 4.338 105.251 0.490 3 36 127 1
i 4.339 106.251 0.490 3 36 127 2
i 4.340 107.751 0.490 3 36 127 3
i 4.341 109.751 0.490 3 36 127 4
i 4.343 104.876 0.490 3 43 127 0
i 4.344 105.376 0.490 3 43 127 1
i 4.345 106.376 0.490 3 43 127 2
i 4.346 107.876 0.490 3 43 127 3
i 4.347 109.876 0.490 3 43 127 4
i 5.114 104.891 0.100 1 1096 67
i 5.115 104.951 0.100 1 1092 75
i 5.116 105.044 0.100 1 1098 57
i 5.117 105.044 0.100 1 1108 74
i 5.118 105.068 0.100 1 1094 67
i 5.119 105.087 0.100 1 1101 75
i 5.120 105.156 0.100 1 1104 57
i 5.121 105.185 0.100 1 1102 80
i 5.122 105.264 0.100 1 1108 80
i 5.123 105.336 0.100 1 1096 67
i 5.124 105.379 0.100 1 1100 76
i 5.125 105.580 0.100 1 1104 76
i 5.126 105.684 0.100 1 1093 79
i 5.127 105.699 0.100 1 1096 71
i 5.128 105.704 0.100 1 1100 58
i 5.129 105.764 0.100 1 1100 56
i 5.130 105.764 0.100 1 1100 73
i 5.131 105.797 0.100 1 1096 57
i 5.132 105.825 0.100 1 1093 64
i 5.133 105.852 0.100 1 1104 54
i 5.134 105.895 0.100 1 1098 60
i 5.135 105.937 0.100 1 1100 75
i 4.349 106.001 0.490 3 36 127 0
i 4.350 106.501 0.490 3 36 127 1
i 4.351 107.501 0.490 3 36 127 2
i 4.352 109.001 0.490 3 36 127 3
i 4.353 111.001 0.490 3 36 127 4
i 5.136 106.011 0.100 1 1095 53
i 5.137 106.089 0.100 1 1110 63
i 4.355 106.125 0.490 3 43 127 0
i 4.356 106.625 0.490 3 43 127 1
i 4.357 107.625 0.490 3 43 127 2
i 4.358 109.125 0.490 3 43 127 3
i 4.359 111.125 0.490 3 43 127 4
i 5.138 106.213 0.100 1 1095 64
i 5.139 106.296 0.100 1 1102 71
i 5.140 106.332 0.100 1 1102 66
i 5.141 106.344 0.100 1 1101 62
i 5.142 106.439 0.100 1 1098 57
i 5.143 106.523 0.100 1 1097 82
i 5.144 106.537 0.100 1 1098 73
i 5.145 106.564 0.100 1 1100 69
i 5.146 106.576 0.100 1 1102 70
i 5.147 106.632 0.100 1 1088 61
i 5.148 106.716 0.100 1 1103 52
i 5.149 106.735 0.100 1 1093 58
i 4.361 106.751 0.490 3 36 127 0
i 4.362 107.251 0.490 3 36 127 1
i 4.363 108.251 0.490 3 36 127 2
i 4.364 109.751 0.490 3 36 127 3
i 4.365 111.751 0.490 3 36 127 4
i 4.367 106.876 0.490 3 43 127 0
i 4.368 107.376 0.490 3 43 127 1
i 4.369 108.376 0.490 3 43 127 2
i 4.370 109.876 0.490 3 43 127 3
i 4.371 111.876 0.490 3 43 127 4
i 5.150 106.899 0.100 1 1112 67
i 5.151 106.968 0.100 1 1107 70
i 5.152 107.056 0.100 1 1101 69
i 5.153 107.107 0.100 1 1096 75
i 5.154 107.121 0.100 1 1095 61
i 5.155 107.165 0.100 1 1098 80
i 5.156 107.188 0.100 1 1095 63
i 5.157 107.191 0.100 1 1107 52
i 5.158 107.263 0.100 1 1099 54
i 5.159 107.321 0.100 1 1104 65
i 5.160 107.383 0.100 1 1107 69
i 5.161 107.411 0.100 1 1109 69
i 5.162 107.431 0.100 1 1101 59
i 5.163 107.549 0.100 1 1091 62
i 5.164 107.644 0.100 1 1105 53
i 5.165 107.713 0.100 1 1093 75
i 5.166 107.813 0.100 1 1103 70
i 5.167 107.881 0.100 1 1101 56
i 5.168 107.937 0.100 1 1092 71
i 5.169 107.969 0.100 1 1097 61
i 5.170 108.001 0.100 1 1102 61
i 4.373 108.001 0.490 3 36 127 0
i 4.374 108.501 0.490 3 36 127 1
i 4.375 109.501 0.490 3 36 127 2
i 4.376 111.001 0.490 3 36 127 3
i 4.377 113.001 0.490 3 36 127 4
i 5.171 108.028 0.100 1 1095 74
i 5.172 108.036 0.100 1 1105 57
i 5.173 108.108 0.100 1 1106 61
i 4.379 108.125 0.490 3 43 127 0
i 4.380 108.625 0.490 3 43 127 1
i 4.381 109.625 0.490 3 43 127 2
i 4.382 111.125 0.490 3 43 127 3
i 4.383 113.125 0.490 3 43 127 4
i 5.174 108.159 0.100 1 1105 48
i 5.175 108.172 0.100 1 1107 48
i 4.385 108.251 0.490 3 48 127 0
i 4.386 108.751 0.490 3 48 127 1
i 4.387 109.751 0.490 3 48 127 2
i 4.388 111.251 0.490 3 48 127 3
i 4.389 113.251 0.490 3 48 127 4
i 5.176 108.269 0.100 1 1105 48
i 5.177 108.361 0.100 1 1103 63
i 5.178 108.453 0.100 1 1095 61
i 5.179 108.573 0.100 1 1105 55
i 5.180 108.608 0.100 1 1099 58
i 5.181 108.667 0.100 1 1102 63
i 5.182 108.673 0.100 1 1091 52
i 5.183 108.692 0.100 1 1101 74
i 4.391 108.751 0.490 3 36 127 0
i 4.392 109.251 0.490 3 36 127 1
i 4.393 110.251 0.490 3 36 127 2
i 4.394 111.751 0.490 3 36 127 3
i 4.395 113.751 0.490 3 36 127 4
i 5.184 108.773 0.100 1 1107 60
i 5.185 108.791 0.100 1 1097 52
i 4.397 108.876 0.490 3 43 127 0
i 4.398 109.376 0.490 3 43 127 1
i 4.399 110.376 0.490 3 43 127 2
i 4.400 111.876 0.490 3 43 127 3
i 4.401 113.876 0.490 3 43 127 4
i 5.186 108.941 0.100 1 1099 51
i 5.187 108.943 0.100 1 1109 73
i 5.188 108.961 0.100 1 1103 74
i 4.403 109.001 0.490 3 48 127 0
i 4.404 109.501 0.490 3 48 127 1
i 4.405 110.501 0.490 3 48 127 2
i 4.406 112.001 0.490 3 48 127 3
i 4.407 114.001 0.490 3 48 127 4
i 5.189 109.023 0.100 1 1101 53
i 5.190 109.072 0.100 1 1103 80
i 5.191 109.177 0.100 1 1093 49
i 5.192 109.213 0.100 1 1101 58
i 5.193 109.375 0.100 1 1093 50
i 5.194 109.380 0.100 1 1095 62
i 5.195 109.423 0.100 1 1095 53
i 5.196 109.512 0.100 1 1099 59
i 5.197 109.525 0.100 1 1100 59
i 5.198 109.624 0.100 1 1103 66
i 5.199 109.640 0.100 1 1099 52
i 5.200 109.672 0.100 1 1101 78
i 5.201 109.721 0.100 1 1097 74
i 5.202 109.748 0.100 1 1101 65
i 5.203 109.780 0.100 1 1105 73
i 5.204 109.893 0.100 1 1109 53
i 5.205 109.923 0.100 1 1097 57
i 4.409 110.001 0.490 3 36 127 0
i 4.410 110.501 0.490 3 36 127 1
i 4.411 111.501 0.490 3 36 127 2
i 4.412 113.001 0.490 3 36 127 3
i 4.413 115.001 0.490 3 36 127 4
i 4.415 110.125 0.490 3 43 127 0
i 4.416 110.625 0.490 3 43 127 1
i 4.417 111.625 0.490 3 43 127 2
i 4.418 113.125 0.490 3 43 127 3
i 4.419 115.125 0.490 3 43 127 4
i 5.206 110.196 0.100 1 1093 52
i 4.421 110.251 0.490 3 52 64 0
i 4.422 110.751 0.490 3 52 64 1
i 4.423 111.751 0.490 3 52 64 2
i 4.424 113.251 0.490 3 52 64 3
i 4.425 115.251 0.490 3 52 64 4
i 5.207 110.261 0.100 1 1103 65
i 5.208 110.265 0.100 1 1095 55
i 5.209 110.357 0.100 1 1099 69
i 5.210 110.379 0.100 1 1101 59
i 5.211 110.385 0.100 1 1099 74
i 5.212 110.388 0.100 1 1101 77
i 5.213 110.412 0.100 1 1093 63
i 5.214 110.471 0.100 1 1096 68
i 5.215 110.588 0.100 1 1101 71
i 5.216 110.609 0.100 1 1099 64
i 5.217 110.701 0.100 1 1099 59
i 5.218 110.713 0.100 1 1096 62
i 4.427 110.751 0.490 3 36 127 0
i 4.428 111.251 0.490 3 36 127 1
i 4.429 112.251 0.490 3 36 127 2
i 4.430 113.751 0.490 3 36 127 3
i 4.431 115.751 0.490 3 36 127 4
i 5.219 110.815 0.100 1 1109 75
i 4.433 110.876 0.490 3 43 127 0
i 4.434 111.376 0.490 3 43 127 1
i 4.435 112.376 0.490 3 43 127 2
i 4.436 113.876 0.490 3 43 127 3
i 4.437 115.876 0.490 3 43 127 4
i 5.220 110.896 0.100 1 1103 72
i 5.221 111.004 0.100 1 1098 64
i 4.439 111.001 0.490 3 52 64 0
i 4.440 111.501 0.490 3 52 64 1
i 4.441 112.501 0.490 3 52 64 2
i 4.442 114.001 0.490 3 52 64 3
i 4.443 116.001 0.490 3 52 64 4
i 5.222 111.041 0.100 1 1097 80
i 5.223 111.044 0.100 1 1107 64
i 5.224 111.161 0.100 1 1097 52
i 5.225 111.173 0.100 1 1089 44
i 5.226 111.173 0.100 1 1101 71
i 5.227 111.215 0.100 1 1097 51
i 5.228 111.248 0.100 1 1103 60
i 5.229 111.248 0.100 1 1093 53
i 5.230 111.512 0.100 1 1111 49
i 5.231 111.527 0.100 1 1101 63
i 5.232 111.551 0.100 1 1095 75
i 5.233 111.624 0.100 1 1094 57
i 5.234 111.700 0.100 1 1094 72
i 5.235 111.731 0.100 1 1107 64
i 5.236 111.732 0.100 1 1105 61
i 5.237 111.821 0.100 1 1099 74
i 5.238 111.908 0.100 1 1100 82
i 5.239 111.944 0.100 1 1107 68
i 5.240 111.964 0.100 1 1103 79
i 5.241 112.007 0.100 1 1104 77
i 4.445 112.001 0.490 3 36 127 0
i 4.446 112.501 0.490 3 36 127 1
i 4.447 113.501 0.490 3 36 127 2
i 4.448 115.001 0.490 3 36 127 3
i 4.449 117.001 0.490 3 36 127 4
i 5.242 112.031 0.100 1 1104 75
i 6.001 112.001 -1 3 26 14
i 6.002 112.090 -1 3 8 21
i 6.003 112.179 -1 3 27 23
i 6.004 112.268 -1 3 3 13
i 6.005 112.357 -1 3 0 4
i 6.006 112.446 -1 3 15 3
i 6.007 112.535 -1 3 18 13
i 6.008 112.624 -1 3 25 29
i 6.009 112.712 -1 3 26 27
i 6.010 112.801 -1 3 16 24
i 6.011 112.890 -1 3 20 29
i 6.012 112.979 -1 3 13 17
i 6.013 113.068 -1 3 21 10
i 6.014 113.157 -1 3 0 11
i 6.015 113.246 -1 3 22 21
i 6.016 113.335 -1 3 22 22
i 6.017 113.424 -1 3 7 27
i 6.018 113.512 -1 3 9 1
i 6.019 113.601 -1 3 0 26
i 6.020 113.690 -1 3 16 23
i 6.021 113.779 -1 3 27 26
i 6.022 113.868 -1 3 11 29
i 6.023 113.957 -1 3 18 5
i 6.024 114.046 -1 3 24 0
i 6.025 114.135 -1 3 12 29
i 6.026 114.224 -1 3 20 11
i 6.027 114.312 -1 3 26 5
i 6.028 114.401 -1 3 3 17
i 6.029 114.490 -1 3 24 19
i 6.030 114.579 -1 3 13 8
i 6.031 114.668 -1 3 29 0
i 6.032 114.757 -1 3 6 4
i 6.033 114.846 -1 3 27 16
i 6.034 114.935 -1 3 21 28
i 6.035 115.024 -1 3 12 12
i 6.036 115.112 -1 3 22 0
i 6.037 115.201 -1 3 3 22
i 6.038 115.290 -1 3 9 15
i 6.039 115.379 -1 3 7 15
i 6.040 115.468 -1 3 26 21
i 6.041 115.557 -1 3 12 8
i 6.042 115.646 -1 3 0 2
i 6.043 115.735 -1 3 3 28
i 6.044 115.824 -1 3 21 20
i 6.045 115.912 -1 3 22 28
i 6.046 116.001 -1 3 19 2
i 6.047 116.090 -1 3 10 23
i 6.048 116.179 -1 3 27 25
i 6.049 116.268 -1 3 14 12
i 6.050 116.357 -1 3 14 21
i 6.051 116.446 -1 3 26 28
i 6.052 116.535 -1 3 20 17
i 6.053 116.624 -1 3 2 25
i 6.054 116.712 -1 3 25 1
i 6.055 116.801 -1 3 17 1
i 6.056 116.890 -1 3 23 8
i 6.057 116.979 -1 3 23 29
i 6.058 117.068 -1 3 28 10
i 6.059 117.157 -1 3 6 24
i 6.060 117.246 -1 3 28 17
i 6.061 117.335 -1 3 19 15
i 6.062 117.424 -1 3 24 16
i 6.063 117.512 -1 3 15 19
i 6.064 117.601 -1 3 11 6
i 6.065 117.690 -1 3 28 26
i 6.066 117.779 -1 3 11 23
i 6.067 117.868 -1 3 15 5
i 6.068 117.957 -1 3 22 3
i 6.069 118.046 -1 3 15 20
i 6.070 118.135 -1 3 29 8
i 6.071 118.224 -1 3 8 7
i 6.072 118.312 -1 3 0 14
i 6.073 118.401 -1 3 24 29
i 6.074 118.490 -1 3 3 16
i 6.075 118.579 -1 3 9 24
i 6.076 118.668 -1 3 7 28
i 6.077 118.757 -1 3 6 7
i 6.078 118.846 -1 3 13 0
i 6.079 118.935 -1 3 11 19
i 6.080 119.024 -1 3 29 12
i 6.081 119.112 -1 3 15 18
i 6.082 119.201 -1 3 22 20
i 6.083 119.290 -1 3 25 22
i 6.084 119.379 -1 3 16 1
i 6.085 119.468 -1 3 3 7
i 6.086 119.557 -1 3 21 29
i 6.087 119.646 -1 3 3 4
i 6.088 119.735 -1 3 3 19
i 6.089 119.824 -1 3 24 27
i 6.090 119.912 -1 3 27 13
i 6.091 120.001 -1 3 9 3
i 6.092 120.090 -1 3 0 24
i 6.093 120.179 -1 3 16 7
i 6.094 120.268 -1 3 21 0
i 6.095 120.357 -1 3 16 21
i 6.096 120.446 -1 3 3 26
i 6.097 120.535 -1 3 10 0
i 6.098 120.624 -1 3 27 27
i 6.099 120.712 -1 3 12 10
i 6.100 120.801 -1 3 4 1
i 6.101 120.890 -1 3 10 6
i 6.102 120.979 -1 3 21 3
i 6.103 121.068 -1 3 2 26
i 6.104 121.157 -1 3 19 19
i 6.105 121.246 -1 3 0 1
i 6.106 121.335 -1 3 1 10
i 6.107 121.424 -1 3 1 20
i 6.108 121.512 -1 3 14 9
i 6.109 121.601 -1 3 29 28
i 6.110 121.690 -1 3 6 0
i 6.111 121.779 -1 3 17 29
i 6.112 121.868 -1 3 9 2
i 6.113 121.957 -1 3 10 18
i 6.114 122.046 -1 3 25 14
i 6.115 122.135 -1 3 24 18
i 6.116 122.224 -1 3 0 19
i 6.117 122.312 -1 3 10 21
i 6.118 122.401 -1 3 17 11
i 6.119 122.490 -1 3 28 1
i 6.120 122.579 -1 3 8 24
i 6.121 122.668 -1 3 7 10
i 6.122 122.757 -1 3 2 16
i 6.123 122.846 -1 3 23 22
i 6.124 122.935 -1 3 26 26
i 6.125 123.024 -1 3 28 4
i 6.126 123.112 -1 3 11 9
i 6.127 123.201 -1 3 11 14
i 6.128 123.290 -1 3 3 21
i 6.129 123.379 -1 3 4 17
i 6.130 123.468 -1 3 19 18
i 6.131 123.557 -1 3 6 27
i 6.132 123.646 -1 3 6 23
i 6.133 123.735 -1 3 21 11
i 6.134 123.824 -1 3 21 19
i 6.135 123.912 -1 3 7 6
i 6.136 124.001 -1 3 25 11
i 6.137 124.090 -1 3 0 7
i 6.138 124.179 -1 3 2 27
i 6.139 124.268 -1 3 12 23
i 6.140 124.357 -1 3 17 14
i 6.141 124.446 -1 3 17 9
i 6.142 124.535 -1 3 5 10
i 6.143 124.624 -1 3 11 7
i 6.144 124.712 -1 3 11 2
i 6.145 124.801 -1 3 20 24
i 6.146 124.890 -1 3 6 6
i 6.147 124.979 -1 3 17 15
i 6.148 125.068 -1 3 11 0
i 6.149 125.157 -1 3 7 7
i 6.150 125.246 -1 3 23 11
i 6.151 125.335 -1 3 27 6
i 6.152 125.424 -1 3 10 24
i 6.153 125.512 -1 3 0 29
i 6.154 125.601 -1 3 4 3
i 6.155 125.690 -1 3 23 6
i 6.156 125.779 -1 3 28 25
i 6.157 125.868 -1 3 23 25
i 6.158 125.957 -1 3 16 13
i 6.159 126.046 -1 3 28 19
i 6.160 126.135 -1 3 3 11
i 6.161 126.224 -1 3 7 12
i 6.162 126.312 -1 3 19 1
i 6.163 126.401 -1 3 28 12
i 6.164 126.490 -1 3 20 13
i 6.165 126.579 -1 3 24 3
i 6.166 126.668 -1 3 5 7
i 6.167 126.757 -1 3 11 25
i 6.168 126.846 -1 3 4 28
i 6.169 126.935 -1 3 6 11
i 6.170 127.024 -1 3 24 10
i 6.171 127.112 -1 3 29 7
i 6.172 127.201 -1 3 18 18
i 6.173 127.290 -1 3 27 29
i 6.174 127.379 -1 3 1 24
i 6.175 127.468 -1 3 21 21
i 6.176 127.557 -1 3 21 7
i 6.177 127.646 -1 3 1 19
i 6.178 127.735 -1 3 29 4
i 6.179 127.824 -1 3 24 11
i 6.180 127.912 -1 3 4 26
i 6.181 128.001 -1 3 5 9
i 6.182 128.090 -1 3 20 28
i 6.183 128.179 -1 3 1 2
i 6.184 128.268 -1 3 27 22
i 6.185 128.357 -1 3 12 15
i 6.186 128.446 -1 3 27 20
i 6.187 128.535 -1 3 21 4
i 6.188 128.624 -1 3 12 20
i 6.189 128.712 -1 3 18 3
i 6.190 128.801 -1 3 12 3
i 6.191 128.890 -1 3 25 20
i 6.192 128.979 -1 3 28 6
i 6.193 129.068 -1 3 7 24
i 6.194 129.157 -1 3 18 8
i 6.195 129.246 -1 3 13 9
i 6.196 129.335 -1 3 14 26
i 6.197 129.424 -1 3 23 7
i 6.198 129.512 -1 3 4 13
i 6.199 129.601 -1 3 10 25
i 6.200 129.690 -1 3 22 16
i 6.201 129.779 -1 3 7 16
i 6.202 129.868 -1 3 28 5
i 6.203 129.957 -1 3 18 2
i 6.204 130.046 -1 3 14 11
i 6.205 130.135 -1 3 16 10
i 6.206 130.224 -1 3 0 6
i 6.207 130.312 -1 3 10 7
i 6.208 130.401 -1 3 29 9
i 6.209 130.490 -1 3 19 22
i 6.210 130.579 -1 3 29 24
i 6.211 130.668 -1 3 3 5
i 6.212 130.757 -1 3 8 16
i 6.213 130.846 -1 3 17 10
i 6.214 130.935 -1 3 20 21
i 6.215 131.024 -1 3 13 7
i 6.216 131.112 -1 3 6 14
i 6.217 131.201 -1 3 27 8
i 6.218 131.290 -1 3 17 3
i 6.219 131.379 -1 3 14 6
i 6.220 131.468 -1 3 9 16
i 6.221 131.557 -1 3 11 10
i 6.222 131.646 -1 3 16 17
i 6.223 131.735 -1 3 10 10
i 6.224 131.824 -1 3 15 8
i 6.225 131.912 -1 3 17 5
i 6.226 132.001 -1 3 1 12
i 6.227 132.090 -1 3 14 14
i 6.228 132.179 -1 3 29 5
i 6.229 132.268 -1 3 25 2
i 6.230 132.357 -1 3 20 16
i 6.231 132.446 -1 3 3 27
i 6.232 132.535 -1 3 11 22
i 6.233 132.624 -1 3 0 16
i 6.234 132.712 -1 3 12 5
i 6.235 132.801 -1 3 19 10
i 6.236 132.890 -1 3 25 24
i 6.237 132.979 -1 3 13 6
i 6.238 133.068 -1 3 18 11
i 6.239 133.157 -1 3 15 15
i 6.240 133.246 -1 3 24 23
i 6.241 133.335 -1 3 16 29
i 6.242 133.424 -1 3 24 17
i 6.243 133.512 -1 3 27 7
i 6.244 133.601 -1 3 29 13
i 6.245 133.690 -1 3 27 18
i 6.246 133.779 -1 3 1 13
i 6.247 133.868 -1 3 12 16
i 6.248 133.957 -1 3 29 27
i 6.249 134.046 -1 3 9 13
i 6.250 134.135 -1 3 10 17
i 6.251 134.224 -1 3 9 4
i 6.252 134.312 -1 3 15 25
i 6.253 134.401 -1 3 18 7
i 6.254 134.490 -1 3 3 8
i 6.255 134.579 -1 3 8 19
i 6.256 134.668 -1 3 24 9
i 6.257 134.757 -1 3 10 14
i 6.258 134.846 -1 3 2 5
i 6.259 134.935 -1 3 22 2
i 6.260 135.024 -1 3 22 1
i 6.261 135.112 -1 3 5 14
i 6.262 135.201 -1 3 25 5
i 6.263 135.290 -1 3 22 27
i 6.264 135.379 -1 3 11 5
i 6.265 135.468 -1 3 19 20
i 6.266 135.557 -1 3 10 11
i 6.267 135.646 -1 3 23 12
i 6.268 135.735 -1 3 8 25
i 6.269 135.824 -1 3 3 20
i 6.270 135.912 -1 3 28 18
i 6.271 136.001 -1 3 6 8
i 6.272 136.090 -1 3 2 8
i 6.273 136.179 -1 3 16 15
i 6.274 136.268 -1 3 21 16
i 6.275 136.357 -1 3 17 26
i 6.276 136.446 -1 3 23 10
i 6.277 136.535 -1 3 19 23
i 6.278 136.624 -1 3 28 21
i 6.279 136.712 -1 3 11 17
i 6.280 136.801 -1 3 18 22
i 6.281 136.890 -1 3 19 27
i 6.282 136.979 -1 3 23 13
i 6.283 137.068 -1 3 25 23
i 6.284 137.157 -1 3 22 13
i 6.285 137.246 -1 3 9 25
i 6.286 137.335 -1 3 17 4
i 6.287 137.424 -1 3 6 13
i 6.288 137.512 -1 3 27 21
i 6.289 137.601 -1 3 15 12
i 6.290 137.690 -1 3 16 6
i 6.291 137.779 -1 3 22 18
i 6.292 137.868 -1 3 23 2
i 6.293 137.957 -1 3 1 0
i 6.294 138.046 -1 3 15 23
i 6.295 138.135 -1 3 16 0
i 6.296 138.224 -1 3 18 10
i 6.297 138.312 -1 3 18 20
i 6.298 138.401 -1 3 4 8
i 6.299 138.490 -1 3 3 1
i 6.300 138.579 -1 3 4 29
i 6.301 138.668 -1 3 18 19
i 6.302 138.757 -1 3 15 11
i 6.303 138.846 -1 3 0 9
i 6.304 138.935 -1 3 16 8
i 6.305 139.024 -1 3 5 11
i 6.306 139.112 -1 3 19 14
i 6.307 139.201 -1 3 12 9
i 6.308 139.290 -1 3 17 18
i 6.309 139.379 -1 3 8 2
i 6.310 139.468 -1 3 18 27
i 6.311 139.557 -1 3 27 4
i 6.312 139.646 -1 3 2 0
i 6.313 139.735 -1 3 8 1
i 6.314 139.824 -1 3 15 17
i 6.315 139.912 -1 3 4 25
i 6.316 140.001 -1 3 15 1
i 6.317 140.090 -1 3 3 12
i 6.318 140.179 -1 3 29 14
i 6.319 140.268 -1 3 8 9
i 6.320 140.357 -1 3 29 23
i 6.321 140.446 -1 3 23 0
i 6.322 140.535 -1 3 2 1
i 6.323 140.624 -1 3 29 29
i 6.324 140.712 -1 3 11 3
i 6.325 140.801 -1 3 18 12
i 6.326 140.890 -1 3 20 26
i 6.327 140.979 -1 3 25 4
i 6.328 141.068 -1 3 17 13
i 6.329 141.157 -1 3 17 24
i 6.330 141.246 -1 3 8 20
i 6.331 141.335 -1 3 2 15
i 6.332 141.424 -1 3 18 28
i 6.333 141.512 -1 3 14 29
i 6.334 141.601 -1 3 9 0
i 6.335 141.690 -1 3 4 4
i 6.336 141.779 -1 3 6 12
i 6.337 141.868 -1 3 22 11
i 6.338 141.957 -1 3 8 4
i 6.339 142.046 -1 3 14 8
i 6.340 142.135 -1 3 18 6
i 6.341 142.224 -1 3 7 13
i 6.342 142.312 -1 3 6 16
i 6.343 142.401 -1 3 20 18
i 6.344 142.490 -1 3 24 7
i 6.345 142.579 -1 3 20 27
i 6.346 142.668 -1 3 14 28
i 6.347 142.757 -1 3 18 26
i 6.348 142.846 -1 3 5 5
i 6.349 142.935 -1 3 29 20
i 6.350 143.024 -1 3 21 15
i 6.351 143.112 -1 3 8 6
i 6.352 143.201 -1 3 6 17
i 6.353 143.290 -1 3 15 24
i 6.354 143.379 -1 3 25 25
i 6.355 143.468 -1 3 23 1
i 6.356 143.557 -1 3 5 1
i 6.357 143.646 -1 3 5 27
i 6.358 143.735 -1 3 5 28
i 6.359 143.824 -1 3 4 23
i 6.360 143.912 -1 3 10 8
i 6.361 144.001 -1 3 15 27
i 6.362 144.090 -1 3 17 21
i 6.363 144.179 -1 3 17 17
i 6.364 144.268 -1 3 22 5
i 6.365 144.357 -1 3 26 2
i 6.366 144.446 -1 3 21 9
i 6.367 144.535 -1 3 13 14
i 6.368 144.624 -1 3 1 27
i 6.369 144.712 -1 3 10 20
i 6.370 144.801 -1 3 28 20
i 6.371 144.890 -1 3 25 28
i 6.372 144.979 -1 3 11 4
i 6.373 145.068 -1 3 3 3
i 6.374 145.157 -1 3 24 5
i 6.375 145.246 -1 3 16 19
i 6.376 145.335 -1 3 28 23
i 6.377 145.424 -1 3 23 28
i 6.378 145.512 -1 3 25 6
i 6.379 145.601 -1 3 2 14
i 6.380 145.690 -1 3 26 24
i 6.381 145.779 -1 3 15 14
i 6.382 145.868 -1 3 21 6
i 6.383 145.957 -1 3 19 17
i 6.384 146.046 -1 3 27 15
i 6.385 146.135 -1 3 1 23
i 6.386 146.224 -1 3 26 22
i 6.387 146.312 -1 3 8 27
i 6.388 146.401 -1 3 2 23
i 6.389 146.490 -1 3 1 21
i 6.390 146.579 -1 3 25 18
i 6.391 146.668 -1 3 5 18
i 6.392 146.757 -1 3 15 2
i 6.393 146.846 -1 3 19 26
i 6.394 146.935 -1 3 29 16
i 6.395 147.024 -1 3 26 15
i 6.396 147.112 -1 3 9 6
i 6.397 147.201 -1 3 7 5
i 6.398 147.290 -1 3 17 25
i 6.399 147.379 -1 3 14 5
i 6.400 147.468 -1 3 5 19
i 6.401 147.557 -1 3 26 7
i 6.402 147.646 -1 3 22 12
i 6.403 147.735 -1 3 12 27
i 6.404 147.824 -1 3 22 19
i 6.405 147.912 -1 3 10 19
i 6.406 148.001 -1 3 12 24
i 6.407 148.090 -1 3 15 4
i 6.408 148.179 -1 3 5 16
i 6.409 148.268 -1 3 19 28
i 6.410 148.357 -1 3 23 20
i 6.411 148.446 -1 3 21 24
i 6.412 148.535 -1 3 21 1
i 6.413 148.624 -1 3 26 1
i 6.414 148.712 -1 3 8 26
i 6.415 148.801 -1 3 14 2
i 6.416 148.890 -1 3 13 25
i 6.417 148.979 -1 3 8 28
i 6.418 149.068 -1 3 26 0
i 6.419 149.157 -1 3 21 14
i 6.420 149.246 -1 3 12 28
i 6.421 149.335 -1 3 13 3
i 6.422 149.424 -1 3 12 17
i 6.423 149.512 -1 3 20 22
i 6.424 149.601 -1 3 9 21
i 6.425 149.690 -1 3 13 18
i 6.426 149.779 -1 3 17 22
i 6.427 149.868 -1 3 18 17
i 6.428 149.957 -1 3 1 6
i 6.429 150.046 -1 3 22 26
i 6.430 150.135 -1 3 9 5
i 6.431 150.224 -1 3 11 24
i 6.432 150.312 -1 3 22 29
i 6.433 150.401 -1 3 26 29
i 6.434 150.490 -1 3 12 26
i 6.435 150.579 -1 3 1 11
i 6.436 150.668 -1 3 28 16
i 6.437 150.757 -1 3 16 18
i 6.438 150.846 -1 3 3 9
i 6.439 150.935 -1 3 20 12
i 6.440 151.024 -1 3 22 9
i 6.441 151.112 -1 3 20 2
i 6.442 151.201 -1 3 27 0
i 6.443 151.290 -1 3 4 22
i 6.444 151.379 -1 3 13 1
i 6.445 151.468 -1 3 16 14
i 6.446 151.557 -1 3 8 11
i 6.447 151.646 -1 3 14 20
i 6.448 151.735 -1 3 9 28
i 6.449 151.824 -1 3 1 8
i 6.450 151.912 -1 3 3 24
i 6.451 152.001 -1 3 1 1
i 6.452 152.090 -1 3 24 28
i 6.453 152.179 -1 3 20 14
i 6.454 152.268 -1 3 19 21
i 6.455 152.357 -1 3 20 3
i 6.456 152.446 -1 3 16 20
i 6.457 152.535 -1 3 20 19
i 6.458 152.624 -1 3 25 12
i 6.459 152.712 -1 3 25 15
i 6.460 152.801 -1 3 11 28
i 6.461 152.890 -1 3 1 4
i 6.462 152.979 -1 3 18 9
i 6.463 153.068 -1 3 29 17
i 6.464 153.157 -1 3 1 5
i 6.465 153.246 -1 3 24 14
i 6.466 153.335 -1 3 14 10
i 6.467 153.424 -1 3 10 5
i 6.468 153.512 -1 3 13 15
i 6.469 153.601 -1 3 7 22
i 6.470 153.690 -1 3 23 26
i 6.471 153.779 -1 3 9 17
i 6.472 153.868 -1 3 13 16
i 6.473 153.957 -1 3 13 23
i 6.474 154.046 -1 3 26 10
i 6.475 154.135 -1 3 10 9
i 6.476 154.224 -1 3 23 17
i 6.477 154.312 -1 3 23 19
i 6.478 154.401 -1 3 28 14
i 6.479 154.490 -1 3 2 17
i 6.480 154.579 -1 3 2 7
i 6.481 154.668 -1 3 23 5
i 6.482 154.757 -1 3 22 14
i 6.483 154.846 -1 3 3 18
i 6.484 154.935 -1 3 5 2
i 6.485 155.024 -1 3 3 0
i 6.486 155.112 -1 3 6 25
i 6.487 155.201 -1 3 5 17
i 6.488 155.290 -1 3 17 16
i 6.489 155.379 -1 3 10 26
i 6.490 155.468 -1 3 7 1
i 6.491 155.557 -1 3 29 15
i 6.492 155.646 -1 3 23 24
i 6.493 155.735 -1 3 5 15
i 6.494 155.824 -1 3 22 15
i 6.495 155.912 -1 3 18 23
i 6.496 156.001 -1 3 9 7
i 6.497 156.090 -1 3 23 15
i 6.498 156.179 -1 3 3 25
i 6.499 156.268 -1 3 0 17
i 6.500 156.357 -1 3 5 4
i 6.501 156.446 -1 3 2 3
i 6.502 156.535 -1 3 10 28
i 6.503 156.624 -1 3 26 8
i 6.504 156.712 -1 3 22 17
i 6.505 156.801 -1 3 29 2
i 6.506 156.890 -1 3 18 0
i 6.507 156.979 -1 3 21 12
i 6.508 157.068 -1 3 5 24
i 6.509 157.157 -1 3 4 10
i 6.510 157.246 -1 3 28 22
i 6.511 157.335 -1 3 6 2
i 6.512 157.424 -1 3 7 14
i 6.513 157.512 -1 3 23 27
i 6.514 157.601 -1 3 15 9
i 6.515 157.690 -1 3 23 16
i 6.516 157.779 -1 3 21 27
i 6.517 157.868 -1 3 0 13
i 6.518 157.957 -1 3 23 9
i 6.519 158.046 -1 3 13 4
i 6.520 158.135 -1 3 10 13
i 6.521 158.224 -1 3 24 12
i 6.522 158.312 -1 3 16 28
i 6.523 158.401 -1 3 25 13
i 6.524 158.490 -1 3 8 13
i 6.525 158.579 -1 3 26 16
i 6.526 158.668 -1 3 11 13
i 6.527 158.757 -1 3 13 12
i 6.528 158.846 -1 3 1 14
i 6.529 158.935 -1 3 20 4
i 6.530 159.024 -1 3 4 21
i 6.531 159.112 -1 3 12 25
i 6.532 159.201 -1 3 6 29
i 6.533 159.290 -1 3 14 19
i 6.534 159.379 -1 3 21 13
i 6.535 159.468 -1 3 24 21
i 6.536 159.557 -1 3 17 2
i 6.537 159.646 -1 3 8 10
i 6.538 159.735 -1 3 7 21
i 6.539 159.824 -1 3 0 3
i 6.540 159.912 -1 3 0 25
i 6.541 160.001 -1 3 24 4
i 6.542 160.090 -1 3 13 26
i 6.543 160.179 -1 3 14 18
i 6.544 160.268 -1 3 17 0
i 6.545 160.357 -1 3 4 2
i 6.546 160.446 -1 3 28 27
i 6.547 160.535 -1 3 19 25
i 6.548 160.624 -1 3 4 14
i 6.549 160.712 -1 3 22 4
i 6.550 160.801 -1 3 26 11
i 6.551 160.890 -1 3 25 21
i 6.552 160.979 -1 3 11 12
i 6.553 161.068 -1 3 14 13
i 6.554 161.157 -1 3 26 3
i 6.555 161.246 -1 3 18 25
i 6.556 161.335 -1 3 28 15
i 6.557 161.424 -1 3 7 4
i 6.558 161.512 -1 3 19 13
i 6.559 161.601 -1 3 5 0
i 6.560 161.690 -1 3 19 4
i 6.561 161.779 -1 3 7 8
i 6.562 161.868 -1 3 6 9
i 6.563 161.957 -1 3 1 28
i 6.564 162.046 -1 3 5 3
i 6.565 162.135 -1 3 6 22
i 6.566 162.224 -1 3 19 6
i 6.567 162.312 -1 3 26 17
i 6.568 162.401 -1 3 15 26
i 6.569 162.490 -1 3 28 0
i 6.570 162.579 -1 3 4 12
i 6.571 162.668 -1 3 9 19
i 6.572 162.757 -1 3 11 21
i 6.573 162.846 -1 3 11 27
i 6.574 162.935 -1 3 4 5
i 6.575 163.024 -1 3 8 17
i 6.576 163.112 -1 3 26 4
i 6.577 163.201 -1 3 17 19
i 6.578 163.290 -1 3 5 20
i 6.579 163.379 -1 3 11 20
i 6.580 163.468 -1 3 8 8
i 6.581 163.557 -1 3 20 5
i 6.582 163.646 -1 3 1 16
i 6.583 163.735 -1 3 26 20
i 6.584 163.824 -1 3 24 1
i 6.585 163.912 -1 3 9 10
i 6.586 164.001 -1 3 5 23
i 6.587 164.090 -1 3 0 12
i 6.588 164.179 -1 3 15 13
i 6.589 164.268 -1 3 0 18
i 6.590 164.357 -1 3 6 3
i 6.591 164.446 -1 3 3 10
i 6.592 164.535 -1 3 22 6
i 6.593 164.624 -1 3 27 11
i 6.594 164.712 -1 3 16 9
i 6.595 164.801 -1 3 2 22
i 6.596 164.890 -1 3 24 22
i 6.597 164.979 -1 3 25 10
i 6.598 165.068 -1 3 28 9
i 6.599 165.157 -1 3 26 13
i 6.600 165.246 -1 3 22 25
i 6.601 165.335 -1 3 15 6
i 6.602 165.424 -1 3 22 23
i 6.603 165.512 -1 3 8 22
i 6.604 165.601 -1 3 9 23
i 6.605 165.690 -1 3 5 22
i 6.606 165.779 -1 3 0 10
i 6.607 165.868 -1 3 14 1
i 6.608 165.957 -1 3 27 9
i 6.609 166.046 -1 3 24 24
i 6.610 166.135 -1 3 3 29
i 6.611 166.224 -1 3 11 18
i 6.612 166.312 -1 3 12 13
i 6.613 166.401 -1 3 6 15
i 6.614 166.490 -1 3 24 20
i 6.615 166.579 -1 3 5 13
i 6.616 166.668 -1 3 7 0
i 6.617 166.757 -1 3 9 18
i 6.618 166.846 -1 3 0 8
i 6.619 166.935 -1 3 27 17
i 6.620 167.024 -1 3 20 23
i 6.621 167.112 -1 3 9 22
i 6.622 167.201 -1 3 0 20
i 6.623 167.290 -1 3 8 18
i 6.624 167.379 -1 3 28 13
i 6.625 167.468 -1 3 25 16
i 6.626 167.557 -1 3 6 20
i 6.627 167.646 -1 3 20 25
i 6.628 167.735 -1 3 9 11
i 6.629 167.824 -1 3 29 11
i 6.630 167.912 -1 3 8 0
i 6.631 168.001 -1 3 22 24
i 6.632 168.090 -1 3 29 18
i 6.633 168.179 -1 3 2 28
i 6.634 168.268 -1 3 26 12
i 6.635 168.357 -1 3 24 26
i 6.636 168.446 -1 3 17 8
i 6.637 168.535 -1 3 24 15
i 6.638 168.624 -1 3 16 5
i 6.639 168.712 -1 3 18 21
i 6.640 168.801 -1 3 17 28
i 6.641 168.890 -1 3 2 12
i 6.642 168.979 -1 3 10 27
i 6.643 169.068 -1 3 0 27
i 6.644 169.157 -1 3 4 7
i 6.645 169.246 -1 3 20 0
i 6.646 169.335 -1 3 17 6
i 6.647 169.424 -1 3 15 22
i 6.648 169.512 -1 3 29 19
i 6.649 169.601 -1 3 25 26
i 6.650 169.690 -1 3 25 7
i 6.651 169.779 -1 3 20 15
i 6.652 169.868 -1 3 29 10
i 6.653 169.957 -1 3 27 24
i 6.654 170.046 -1 3 15 28
i 6.655 170.135 -1 3 9 26
i 6.656 170.224 -1 3 28 11
i 6.657 170.312 -1 3 2 2
i 6.658 170.401 -1 3 25 0
i 6.659 170.490 -1 3 29 25
i 6.660 170.579 -1 3 4 24
i 6.661 170.668 -1 3 7 23
i 6.662 170.757 -1 3 10 2
i 6.663 170.846 -1 3 19 11
i 6.664 170.935 -1 3 12 18
i 6.665 171.024 -1 3 25 17
i 6.666 171.112 -1 3 10 22
i 6.667 171.201 -1 3 7 3
i 6.668 171.290 -1 3 26 9
i 6.669 171.379 -1 3 14 16
i 6.670 171.468 -1 3 25 8
i 6.671 171.557 -1 3 0 5
i 6.672 171.646 -1 3 2 11
i 6.673 171.735 -1 3 14 15
i 6.674 171.824 -1 3 5 29
i 6.675 171.912 -1 3 13 24
i 6.676 172.001 -1 3 9 9
i 6.677 172.090 -1 3 16 2
i 6.678 172.179 -1 3 24 6
i 6.679 172.268 -1 3 28 7
i 6.680 172.357 -1 3 25 3
i 6.681 172.446 -1 3 14 24
i 6.682 172.535 -1 3 13 29
i 6.683 172.624 -1 3 7 17
i 6.684 172.712 -1 3 16 4
i 6.685 172.801 -1 3 1 3
i 6.686 172.890 -1 3 26 18
i 6.687 172.979 -1 3 14 4
i 6.688 173.068 -1 3 15 16
i 6.689 173.157 -1 3 8 3
i 6.690 173.246 -1 3 24 25
i 6.691 173.335 -1 3 22 10
i 6.692 173.424 -1 3 5 25
i 6.693 173.512 -1 3 12 0
i 6.694 173.601 -1 3 21 22
i 6.695 173.690 -1 3 27 2
i 6.696 173.779 -1 3 1 29
i 6.697 173.868 -1 3 8 5
i 6.698 173.957 -1 3 12 4
i 6.699 174.046 -1 3 7 19
i 6.700 174.135 -1 3 16 12
i 6.701 174.224 -1 3 1 22
i 6.702 174.312 -1 3 6 28
i 6.703 174.401 -1 3 10 4
i 6.704 174.490 -1 3 9 8
i 6.705 174.579 -1 3 1 7
i 6.706 174.668 -1 3 18 1
i 6.707 174.757 -1 3 29 1
i 6.708 174.846 -1 3 6 1
i 6.709 174.935 -1 3 7 11
i 6.710 175.024 -1 3 24 2
i 6.711 175.112 -1 3 11 16
i 6.712 175.201 -1 3 8 15
i 6.713 175.290 -1 3 7 9
i 6.714 175.379 -1 3 0 0
i 6.715 175.468 -1 3 19 0
i 6.716 175.557 -1 3 19 9
i 6.717 175.646 -1 3 10 16
i 6.718 175.735 -1 3 8 29
i 6.719 175.824 -1 3 21 23
i 6.720 175.912 -1 3 19 5
i 6.721 176.001 -1 3 2 4
i 6.722 176.090 -1 3 10 12
i 6.723 176.179 -1 3 1 15
i 6.724 176.268 -1 3 16 3
i 6.725 176.357 -1 3 2 20
i 6.726 176.446 -1 3 4 16
i 6.727 176.535 -1 3 21 5
i 6.728 176.624 -1 3 8 23
i 6.729 176.712 -1 3 4 20
i 6.730 176.801 -1 3 11 11
i 6.731 176.890 -1 3 1 17
i 6.732 176.979 -1 3 1 26
i 6.733 177.068 -1 3 17 27
i 6.734 177.157 -1 3 18 16
i 6.735 177.246 -1 3 6 21
i 6.736 177.335 -1 3 14 17
i 6.737 177.424 -1 3 6 5
i 6.738 177.512 -1 3 11 26
i 6.739 177.601 -1 3 13 20
i 6.740 177.690 -1 3 12 11
i 6.741 177.779 -1 3 5 6
i 6.742 177.868 -1 3 28 8
i 6.743 177.957 -1 3 3 15
i 6.744 178.046 -1 3 9 20
i 6.745 178.135 -1 3 4 15
i 6.746 178.224 -1 3 14 7
i 6.747 178.312 -1 3 14 23
i 6.748 178.401 -1 3 7 20
i 6.749 178.490 -1 3 5 26
i 6.750 178.579 -1 3 20 10
i 6.751 178.668 -1 3 19 8
i 6.752 178.757 -1 3 6 26
i 6.753 178.846 -1 3 18 14
i 6.754 178.935 -1 3 3 6
i 6.755 179.024 -1 3 12 6
i 6.756 179.112 -1 3 21 18
i 6.757 179.201 -1 3 29 21
i 6.758 179.290 -1 3 0 21
i 6.759 179.379 -1 3 23 18
i 6.760 179.468 -1 3 4 18
i 6.761 179.557 -1 3 15 21
i 6.762 179.646 -1 3 20 9
i 6.763 179.735 -1 3 0 22
i 6.764 179.824 -1 3 12 7
i 6.765 179.912 -1 3 0 28
i 6.766 180.001 -1 3 12 19
i 6.767 180.090 -1 3 22 7
i 6.768 180.179 -1 3 27 5
i 6.769 180.268 -1 3 14 25
i 6.770 180.357 -1 3 23 4
i 6.771 180.446 -1 3 26 25
i 6.772 180.535 -1 3 20 7
i 6.773 180.624 -1 3 24 8
i 6.774 180.712 -1 3 12 2
i 6.775 180.801 -1 3 14 3
i 6.776 180.890 -1 3 13 5
i 6.777 180.979 -1 3 18 15
i 6.778 181.068 -1 3 11 1
i 6.779 181.157 -1 3 19 24
i 6.780 181.246 -1 3 1 18
i 6.781 181.335 -1 3 9 27
i 6.782 181.424 -1 3 13 10
i 6.783 181.512 -1 3 10 29
i 6.784 181.601 -1 3 6 19
i 6.785 181.690 -1 3 0 23
i 6.786 181.779 -1 3 20 6
i 6.787 181.868 -1 3 13 11
i 6.788 181.957 -1 3 15 10
i 6.789 182.046 -1 3 25 9
i 6.790 182.135 -1 3 24 13
i 6.791 182.224 -1 3 20 1
i 6.792 182.312 -1 3 8 12
i 6.793 182.401 -1 3 18 29
i 6.794 182.490 -1 3 6 10
i 6.795 182.579 -1 3 2 24
i 6.796 182.668 -1 3 14 27
i 6.797 182.757 -1 3 15 7
i 6.798 182.846 -1 3 5 12
i 6.799 182.935 -1 3 20 8
i 6.800 183.024 -1 3 23 21
i 6.801 183.112 -1 3 2 10
i 6.802 183.201 -1 3 0 15
i 6.803 183.290 -1 3 1 9
i 6.804 183.379 -1 3 13 21
i 6.805 183.468 -1 3 18 24
i 6.806 183.557 -1 3 12 1
i 6.807 183.646 -1 3 29 6
i 6.808 183.735 -1 3 25 27
i 6.809 183.824 -1 3 12 14
i 6.810 183.912 -1 3 7 2
i 6.811 184.001 -1 3 17 20
i 6.812 184.090 -1 3 19 16
i 6.813 184.179 -1 3 29 22
i 6.814 184.268 -1 3 4 11
i 6.815 184.357 -1 3 21 8
i 6.816 184.446 -1 3 26 19
i 6.817 184.535 -1 3 2 18
i 6.818 184.624 -1 3 7 26
i 6.819 184.712 -1 3 19 12
i 6.820 184.801 -1 3 1 25
i 6.821 184.890 -1 3 9 29
i 6.822 184.979 -1 3 29 26
i 6.823 185.068 -1 3 9 12
i 6.824 185.157 -1 3 27 1
i 6.825 185.246 -1 3 3 2
i 6.826 185.335 -1 3 27 10
i 6.827 185.424 -1 3 16 27
i 6.828 185.512 -1 3 5 21
i 6.829 185.601 -1 3 27 19
i 6.830 185.690 -1 3 13 13
i 6.831 185.779 -1 3 13 22
i 6.832 185.868 -1 3 16 25
i 6.833 185.957 -1 3 25 19
i 6.834 186.046 -1 3 26 23
i 6.835 186.135 -1 3 16 22
i 6.836 186.224 -1 3 2 19
i 6.837 186.312 -1 3 2 29
i 6.838 186.401 -1 3 3 14
i 6.839 186.490 -1 3 7 25
i 6.840 186.579 -1 3 6 18
i 6.841 186.668 -1 3 11 8
i 6.842 186.757 -1 3 27 14
i 6.843 186.846 -1 3 28 3
i 6.844 186.935 -1 3 17 7
i 6.845 187.024 -1 3 2 6
i 6.846 187.112 -1 3 7 18
i 6.847 187.201 -1 3 7 29
i 6.848 187.290 -1 3 4 19
i 6.849 187.379 -1 3 12 22
i 6.850 187.468 -1 3 21 25
i 6.851 187.557 -1 3 16 16
i 6.852 187.646 -1 3 21 17
i 6.853 187.735 -1 3 8 14
i 6.854 187.824 -1 3 28 29
i 6.855 187.912 -1 3 15 0
i 6.856 188.001 -1 3 19 3
i 6.857 188.090 -1 3 20 20
i 6.858 188.179 -1 3 23 3
i 6.859 188.268 -1 3 4 9
i 6.860 188.357 -1 3 3 23
i 6.861 188.446 -1 3 15 29
i 6.862 188.535 -1 3 19 7
i 6.863 188.624 -1 3 2 13
i 6.864 188.712 -1 3 22 8
i 6.865 188.801 -1 3 14 22
i 6.866 188.890 -1 3 27 3
i 6.867 188.979 -1 3 4 27
i 6.868 189.068 -1 3 16 11
i 6.869 189.157 -1 3 21 26
i 6.870 189.246 -1 3 18 4
i 6.871 189.335 -1 3 29 3
i 6.872 189.424 -1 3 27 28
i 6.873 189.512 -1 3 17 23
i 6.874 189.601 -1 3 10 15
i 6.875 189.690 -1 3 26 6
i 6.876 189.779 -1 3 2 9
i 6.877 189.868 -1 3 21 2
i 6.878 189.957 -1 3 5 8
i 6.879 190.046 -1 3 28 24
i 6.880 190.135 -1 3 13 27
i 6.881 190.224 -1 3 4 6
i 6.882 190.312 -1 3 19 29
i 6.883 190.401 -1 3 10 3
i 6.884 190.490 -1 3 13 2
i 6.885 190.579 -1 3 11 15
i 6.886 190.668 -1 3 4 0
i 6.887 190.757 -1 3 13 28
i 6.888 190.846 -1 3 28 2
i 6.889 190.935 -1 3 16 26
i 6.890 191.024 -1 3 10 1
i 6.891 191.112 -1 3 27 12
i 6.892 191.201 -1 3 17 12
i 6.893 191.290 -1 3 2 21
i 6.894 191.379 -1 3 9 14
i 6.895 191.468 -1 3 13 19
i 6.896 191.557 -1 3 28 28
i 6.897 191.646 -1 3 23 14
i 6.898 191.735 -1 3 12 21
i 6.899 191.824 -1 3 14 0
i 6.900 191.912 -1 3 23 23
i 5.243 112.169 0.100 1 1091 43
i 5.244 112.213 0.100 1 1092 72
i 5.245 112.323 0.100 1 1109 68
i 5.246 112.351 0.100 1 1095 65
i 5.247 112.419 0.100 1 1092 78
i 5.248 112.425 0.100 1 1098 81
i 5.249 112.481 0.100 1 1105 74
i 5.250 112.485 0.100 1 1100 54
i 5.251 112.543 0.100 1 1104 50
i 5.252 112.707 0.100 1 1107 53
i 5.253 112.737 0.100 1 1102 59
i 4.451 112.751 0.490 3 38 127 0
i 4.452 113.251 0.490 3 38 127 1
i 4.453 114.251 0.490 3 38 127 2
i 4.454 115.751 0.490 3 38 127 3
i 4.455 117.751 0.490 3 38 127 4
i 5.254 112.767 0.100 1 1108 60
i 5.255 112.904 0.100 1 1105 59
i 5.256 112.995 0.100 1 1095 48
i 5.257 113.020 0.100 1 1105 65
i 5.258 113.119 0.100 1 1100 62
i 5.259 113.127 0.100 1 1101 81
i 5.260 113.201 0.100 1 1096 54
i 5.261 113.203 0.100 1 1102 83
i 5.262 113.212 0.100 1 1097 65
i 5.263 113.232 0.100 1 1092 58
i 5.264 113.235 0.100 1 1104 74
i 5.265 113.297 0.100 1 1102 67
i 5.266 113.423 0.100 1 1100 61
i 5.267 113.604 0.100 1 1108 56
i 5.268 113.641 0.100 1 1092 61
i 5.269 113.653 0.100 1 1100 61
i 5.270 113.709 0.100 1 1110 71
i 5.271 113.712 0.100 1 1100 82
i 5.272 113.748 0.100 1 1098 69
i 5.273 113.888 0.100 1 1094 75
i 5.274 113.988 0.100 1 1094 58
i 5.275 113.999 0.100 1 1102 53
i 4.457 114.001 0.490 3 52 49 0
i 4.458 114.501 0.490 3 52 49 1
i 4.459 115.501 0.490 3 52 49 2
i 4.460 117.001 0.490 3 52 49 3
i 4.461 119.001 0.490 3 52 49 4
i 5.276 114.007 0.100 1 1099 63
i 5.277 114.135 0.100 1 1102 78
i 5.278 114.164 0.100 1 1106 76
i 5.279 114.176 0.100 1 1098 72
i 5.280 114.176 0.100 1 1099 66
i 5.281 114.205 0.100 1 1100 83
i 5.282 114.439 0.100 1 1098 82
i 5.283 114.523 0.100 1 1112 50
i 5.284 114.529 0.100 1 1110 73
i 5.285 114.565 0.100 1 1100 49
i 5.286 114.705 0.100 1 1094 69
i 5.287 114.744 0.100 1 1102 75
i 4.463 114.751 0.490 3 53 49 0
i 4.464 115.251 0.490 3 53 49 1
i 4.465 116.251 0.490 3 53 49 2
i 4.466 117.751 0.490 3 53 49 3
i 4.467 119.751 0.490 3 53 49 4
i 5.288 114.779 0.100 1 1100 74
i 5.289 114.824 0.100 1 1094 55
i 5.290 114.867 0.100 1 1098 54
i 5.291 114.891 0.100 1 1100 52
i 5.292 114.945 0.100 1 1092 81
i 5.293 114.967 0.100 1 1102 54
i 5.294 114.975 0.100 1 1097 63
i 5.295 115.015 0.100 1 1096 79
i 5.296 115.116 0.100 1 1098 66
i 5.297 115.197 0.100 1 1108 76
i 5.298 115.211 0.100 1 1096 53
i 5.299 115.335 0.100 1 1112 70
i 5.300 115.413 0.100 1 1102 52
i 5.301 115.529 0.100 1 1099 52
i 5.302 115.536 0.100 1 1110 58
i 5.303 115.581 0.100 1 1104 74
i 5.304 115.647 0.100 1 1100 52
i 5.305 115.676 0.100 1 1104 72
i 5.306 115.677 0.100 1 1096 74
i 5.307 115.727 0.100 1 1102 64
i 5.308 115.740 0.100 1 1102 79
i 5.309 115.785 0.100 1 1090 73
i 5.310 115.785 0.100 1 1098 77
i 5.311 115.799 0.100 1 1092 49
i 4.469 116.001 0.490 3 41 127 0
i 4.470 116.501 0.490 3 41 127 1
i 4.471 117.501 0.490 3 41 127 2
i 4.472 119.001 0.490 3 41 127 3
i 4.473 121.001 0.490 3 41 127 4
i 5.312 116.048 0.100 1 1104 69
i 5.313 116.115 0.100 1 1094 73
i 5.314 116.171 0.100 1 1093 62
i 5.315 116.208 0.100 1 1093 53
i 5.316 116.277 0.100 1 1106 59
i 5.317 116.281 0.100 1 1104 54
i 5.318 116.332 0.100 1 1100 65
i 5.319 116.365 0.100 1 1106 68
i 5.320 116.407 0.100 1 1108 69
i 5.321 116.416 0.100 1 1100 55
i 5.322 116.427 0.100 1 1106 54
i 5.323 116.492 0.100 1 1104 71
i 5.324 116.575 0.100 1 1106 75
i 5.325 116.709 0.100 1 1091 82
i 5.326 116.713 0.100 1 1092 48
i 4.475 116.751 0.490 3 40 127 0
i 4.476 117.251 0.490 3 40 127 1
i 4.477 118.251 0.490 3 40 127 2
i 4.478 119.751 0.490 3 40 127 3
i 4.479 121.751 0.490 3 40 127 4
i 5.327 116.785 0.100 1 1106 63
i 5.328 116.795 0.100 1 1096 54
i 5.329 116.904 0.100 1 1099 81
i 5.330 116.913 0.100 1 1096 65
i 5.331 116.944 0.100 1 1091 79
i 5.332 117.117 0.100 1 1108 55
i 5.333 117.117 0.100 1 1104 67
i 5.334 117.125 0.100 1 1100 69
i 5.335 117.167 0.100 1 1104 68
i 5.336 117.233 0.100 1 1104 74
i 5.337 117.391 0.100 1 1106 74
i 5.338 117.452 0.100 1 1102 55
i 5.339 117.461 0.100 1 1094 45
i 5.340 117.524 0.100 1 1106 65
i 5.341 117.548 0.100 1 1098 79
i 5.342 117.620 0.100 1 1102 69
i 5.343 117.631 0.100 1 1101 74
i 5.344 117.652 0.100 1 1101 66
i 5.345 117.696 0.100 1 1104 80
i 5.346 117.709 0.100 1 1101 58
i 5.347 117.811 0.100 1 1098 56
i 5.348 117.827 0.100 1 1093 52
i 5.349 117.871 0.100 1 1100 69
i 4.481 118.001 0.490 3 57 49 0
i 4.482 118.501 0.490 3 57 49 1
i 4.483 119.501 0.490 3 57 49 2
i 4.484 121.001 0.490 3 57 49 3
i 4.485 123.001 0.490 3 57 49 4
i 5.350 118.029 0.100 1 1092 53
i 5.351 118.071 0.100 1 1109 63
i 5.352 118.151 0.100 1 1097 75
i 5.353 118.213 0.100 1 1099 75
i 5.354 118.239 0.100 1 1104 69
i 5.355 118.284 0.100 1 1099 66
i 5.356 118.295 0.100 1 1108 56
i 5.357 118.437 0.100 1 1095 76
i 5.358 118.451 0.100 1 1103 71
i 5.359 118.533 0.100 1 1099 56
i 5.360 118.547 0.100 1 1107 69
i 5.361 118.576 0.100 1 1093 61
i 5.362 118.588 0.100 1 1100 59
i 5.363 118.592 0.100 1 1100 73
i 5.364 118.643 0.100 1 1098 48
i 5.365 118.727 0.100 1 1111 71
i 4.487 118.751 0.490 3 55 49 0
i 4.488 119.251 0.490 3 55 49 1
i 4.489 120.251 0.490 3 55 49 2
i 4.490 121.751 0.490 3 55 49 3
i 4.491 123.751 0.490 3 55 49 4
i 5.366 118.815 0.100 1 1095 81
i 5.367 118.907 0.100 1 1109 77
i 5.368 119.049 0.100 1 1113 50
i 5.369 119.085 0.100 1 1101 72
i 5.370 119.209 0.100 1 1095 84
i 5.371 119.277 0.100 1 1097 61
i 5.372 119.344 0.100 1 1102 74
i 5.373 119.388 0.100 1 1105 54
i 5.374 119.419 0.100 1 1093 74
i 5.375 119.429 0.100 1 1097 48
i 5.376 119.436 0.100 1 1099 73
i 5.377 119.475 0.100 1 1103 56
i 5.378 119.479 0.100 1 1093 82
i 5.379 119.495 0.100 1 1107 51
i 5.380 119.523 0.100 1 1098 70
i 5.381 119.585 0.100 1 1101 78
i 5.382 119.717 0.100 1 1097 72
i 5.383 119.763 0.100 1 1101 54
i 5.384 119.885 0.100 1 1111 77
i 4.493 120.001 0.490 3 36 127 0
i 4.494 120.501 0.490 3 36 127 1
i 4.495 121.501 0.490 3 36 127 2
i 4.496 123.001 0.490 3 36 127 3
i 4.497 125.001 0.490 3 36 127 4
i 5.385 120.059 0.100 1 1099 49
i 5.386 120.081 0.100 1 1103 55
i 5.387 120.099 0.100 1 1100 58
i 5.388 120.145 0.100 1 1103 56
i 5.389 120.168 0.100 1 1099 70
i 5.390 120.205 0.100 1 1101 59
i 5.391 120.211 0.100 1 1105 59
i 5.392 120.291 0.100 1 1103 67
i 5.393 120.327 0.100 1 1109 64
i 5.394 120.348 0.100 1 1091 76
i 5.395 120.393 0.100 1 1095 56
i 5.396 120.408 0.100 1 1091 51
i 5.397 120.527 0.100 1 1105 66
i 5.398 120.625 0.100 1 1097 57
i 5.399 120.709 0.100 1 1093 65
i 4.499 120.751 0.490 3 38 127 0
i 4.500 121.251 0.490 3 38 127 1
i 4.501 122.251 0.490 3 38 127 2
i 4.502 123.751 0.490 3 38 127 3
i 4.503 125.751 0.490 3 38 127 4
i 5.400 120.756 0.100 1 1099 79
i 5.401 120.761 0.100 1 1092 53
i 5.402 120.800 0.100 1 1095 82
i 5.403 120.877 0.100 1 1107 62
i 5.404 120.877 0.100 1 1107 55
i 5.405 120.908 0.100 1 1105 66
i 5.406 120.988 0.100 1 1105 74
i 5.407 121.011 0.100 1 1101 58
i 5.408 121.144 0.100 1 1107 78
i 5.409 121.159 0.100 1 1105 68
i 5.410 121.221 0.100 1 1091 83
i 5.411 121.257 0.100 1 1093 57
i 5.412 121.287 0.100 1 1105 54
i 5.413 121.348 0.100 1 1099 63
i 5.414 121.359 0.100 1 1097 70
i 5.415 121.383 0.100 1 1099 67
i 5.416 121.445 0.100 1 1103 49
i 5.417 121.513 0.100 1 1092 67
i 5.418 121.529 0.100 1 1107 51
i 5.419 121.541 0.100 1 1107 67
i 5.420 121.640 0.100 1 1103 57
i 5.421 121.764 0.100 1 1099 50
i 5.422 121.789 0.100 1 1103 67
i 5.423 121.863 0.100 1 1097 75
i 5.424 121.927 0.100 1 1093 61
i 4.505 122.001 0.490 3 52 49 0
i 4.506 122.501 0.490 3 52 49 1
i 4.507 123.501 0.490 3 52 49 2
i 4.508 125.001 0.490 3 52 49 3
i 4.509 127.001 0.490 3 52 49 4
i 5.425 122.053 0.100 1 1105 69
i 5.426 122.064 0.100 1 1101 73
i 5.427 122.073 0.100 1 1101 78
i 5.428 122.112 0.100 1 1109 50
i 5.429 122.179 0.100 1 1100 65
i 5.430 122.185 0.100 1 1101 60
i 5.431 122.209 0.100 1 1100 73
i 5.432 122.319 0.100 1 1109 53
i 5.433 122.409 0.100 1 1099 70
i 5.434 122.421 0.100 1 1093 75
i 5.435 122.432 0.100 1 1101 70
i 5.436 122.439 0.100 1 1091 50
i 5.437 122.540 0.100 1 1105 58
i 5.438 122.615 0.100 1 1094 78
i 5.439 122.651 0.100 1 1099 74
i 5.440 122.724 0.100 1 1098 61
i 5.441 122.744 0.100 1 1111 49
i 4.511 122.751 0.490 3 53 49 0
i 4.512 123.251 0.490 3 53 49 1
i 4.513 124.251 0.490 3 53 49 2
i 4.514 125.751 0.490 3 53 49 3
i 4.515 127.751 0.490 3 53 49 4
i 5.442 122.915 0.100 1 1099 75
i 5.443 122.987 0.100 1 1103 67
i 5.444 122.988 0.100 1 1095 75
i 5.445 122.999 0.100 1 1101 58
i 5.446 123.103 0.100 1 1098 73
i 5.447 123.129 0.100 1 1099 54
i 5.448 123.131 0.100 1 1104 76
i 5.449 123.164 0.100 1 1092 82
i 5.450 123.167 0.100 1 1103 74
i 5.451 123.171 0.100 1 1107 59
i 5.452 123.209 0.100 1 1101 72
i 5.453 123.283 0.100 1 1108 71
i 5.454 123.315 0.100 1 1102 54
i 5.455 123.531 0.100 1 1113 78
i 5.456 123.681 0.100 1 1098 56
i 5.457 123.708 0.100 1 1096 53
i 5.458 123.912 0.100 1 1102 75
i 5.459 123.912 0.100 1 1103 55
i 5.460 123.941 0.100 1 1101 55
i 5.461 123.963 0.100 1 1092 69
i 5.462 123.992 0.100 1 1097 62
i 5.463 124.000 0.100 1 1099 73
i 4.517 124.001 0.490 3 41 127 0
i 4.518 124.501 0.490 3 41 127 1
i 4.519 125.501 0.490 3 41 127 2
i 4.520 127.001 0.490 3 41 127 3
i 4.521 129.001 0.490 3 41 127 4
i 5.464 124.012 0.100 1 1094 65
i 5.465 124.043 0.100 1 1104 59
i 5.466 124.049 0.100 1 1110 74
i 5.467 124.093 0.100 1 1098 56
i 5.468 124.124 0.100 1 1106 50
i 5.469 124.207 0.100 1 1101 49
i 5.470 124.227 0.100 1 1098 56
i 5.471 124.457 0.100 1 1098 59
i 5.472 124.468 0.100 1 1099 70
i 5.473 124.569 0.100 1 1104 76
i 5.474 124.572 0.100 1 1100 50
i 5.475 124.684 0.100 1 1100 75
i 5.476 124.691 0.100 1 1101 64
i 4.523 124.751 0.490 3 43 127 0
i 4.524 125.251 0.490 3 43 127 1
i 4.525 126.251 0.490 3 43 127 2
i 4.526 127.751 0.490 3 43 127 3
i 4.527 129.751 0.490 3 43 127 4
i 5.477 124.769 0.100 1 1106 76
i 5.478 124.847 0.100 1 1090 76
i 5.479 124.875 0.100 1 1096 77
i 5.480 124.951 0.100 1 1092 44
i 5.481 125.044 0.100 1 1106 56
i 5.482 125.075 0.100 1 1104 75
i 5.483 125.091 0.100 1 1108 71
i 5.484 125.189 0.100 1 1098 73
i 5.485 125.207 0.100 1 1092 80
i 5.486 125.268 0.100 1 1100 65
i 5.487 125.343 0.100 1 1104 60
i 5.488 125.375 0.100 1 1091 74
i 5.489 125.393 0.100 1 1102 55
i 5.490 125.436 0.100 1 1104 48
i 5.491 125.464 0.100 1 1107 75
i 5.492 125.480 0.100 1 1096 56
i 5.493 125.555 0.100 1 1100 54
i 5.494 125.729 0.100 1 1090 60
i 5.495 125.816 0.100 1 1106 54
i 5.496 125.843 0.100 1 1096 62
i 5.497 125.861 0.100 1 1106 77
i 5.498 125.871 0.100 1 1100 81
i 5.499 125.940 0.100 1 1102 73
i 5.500 126.001 0.100 1 1106 59
i 4.529 126.001 0.490 3 57 49 0
i 4.530 126.501 0.490 3 57 49 1
i 4.531 127.501 0.490 3 57 49 2
i 4.532 129.001 0.490 3 57 49 3
i 4.533 131.001 0.490 3 57 49 4
i 5.501 126.015 0.100 1 1110 52
i 5.502 126.015 0.100 1 1108 73
i 5.503 126.044 0.100 1 1098 80
i 5.504 126.105 0.100 1 1093 70
i 5.505 126.193 0.100 1 1102 78
i 5.506 126.349 0.100 1 1100 61
i 5.507 126.353 0.100 1 1098 76
i 5.508 126.515 0.100 1 1112 44
i 5.509 126.519 0.100 1 1108 61
i 5.510 126.571 0.100 1 1104 63
i 5.511 126.628 0.100 1 1100 78
i 5.512 126.683 0.100 1 1094 63
i 5.513 126.705 0.100 1 1100 78
i 5.514 126.728 0.100 1 1102 67
i 5.515 126.748 0.100 1 1099 78
i 4.535 126.751 0.490 3 59 49 0
i 4.536 127.251 0.490 3 59 49 1
i 4.537 128.251 0.490 3 59 49 2
i 4.538 129.751 0.490 3 59 49 3
i 4.539 131.751 0.490 3 59 49 4
i 5.516 126.885 0.100 1 1102 61
i 5.517 126.935 0.100 1 1100 62
i 5.518 126.935 0.100 1 1110 48
i 5.519 126.965 0.100 1 1094 78
i 5.520 127.027 0.100 1 1098 65
i 5.521 127.061 0.100 1 1114 41
i 5.522 127.063 0.100 1 1110 49
i 5.523 127.151 0.100 1 1102 68
i 5.524 127.165 0.100 1 1106 71
i 5.525 127.232 0.100 1 1097 67
i 5.526 127.287 0.100 1 1104 62
i 5.527 127.359 0.100 1 1098 68
i 5.528 127.487 0.100 1 1096 69
i 5.529 127.533 0.100 1 1102 63
i 5.530 127.633 0.100 1 1100 76
i 5.531 127.652 0.100 1 1102 52
i 5.532 127.693 0.100 1 1097 57
i 5.533 127.696 0.100 1 1092 78
i 5.534 127.757 0.100 1 1108 59
i 5.535 127.773 0.100 1 1104 75
i 5.536 127.913 0.100 1 1108 64
i 4.541 128.001 0.490 3 36 127 0
i 4.542 128.501 0.490 3 36 127 1
i 4.543 129.501 0.490 3 36 127 2
i 4.544 131.001 0.490 3 36 127 3
i 4.545 133.001 0.490 3 36 127 4
i 5.537 128.044 0.100 1 1104 57
i 5.538 128.048 0.100 1 1112 69
i 5.539 128.156 0.100 1 1101 56
i 5.540 128.204 0.100 1 1097 66
i 5.541 128.235 0.100 1 1104 62
i 5.542 128.316 0.100 1 1102 72
i 5.543 128.404 0.100 1 1100 49
i 5.544 128.417 0.100 1 1092 68
i 5.545 128.444 0.100 1 1096 74
i 5.546 128.469 0.100 1 1098 61
i 5.547 128.489 0.100 1 1095 66
i 5.548 128.628 0.100 1 1106 44
i 5.549 128.639 0.100 1 1105 53
i 5.550 128.663 0.100 1 1099 60
i 5.551 128.735 0.100 1 1099 78
i 4.547 128.751 0.490 3 38 127 0
i 4.548 129.251 0.490 3 38 127 1
i 4.549 130.251 0.490 3 38 127 2
i 4.550 131.751 0.490 3 38 127 3
i 4.551 133.751 0.490 3 38 127 4
i 5.552 128.789 0.100 1 1099 73
i 5.553 128.819 0.100 1 1106 66
i 5.554 128.921 0.100 1 1110 73
i 5.555 129.065 0.100 1 1098 63
i 5.556 129.107 0.100 1 1099 80
i 5.557 129.112 0.100 1 1108 57
i 5.558 129.139 0.100 1 1100 73
i 5.559 129.172 0.100 1 1096 64
i 5.560 129.213 0.100 1 1106 53
i 5.561 129.257 0.100 1 1089 56
i 5.562 129.281 0.100 1 1101 60
i 5.563 129.452 0.100 1 1103 54
i 5.564 129.481 0.100 1 1108 48
i 5.565 129.516 0.100 1 1105 63
i 5.566 129.575 0.100 1 1106 80
i 5.567 129.667 0.100 1 1097 62
i 5.568 129.688 0.100 1 1101 68
i 5.569 129.688 0.100 1 1103 73
i 5.570 129.703 0.100 1 1091 71
i 5.571 129.873 0.100 1 1108 75
i 5.572 129.888 0.100 1 1103 64
i 5.573 129.987 0.100 1 1091 81
i 4.553 130.001 0.490 3 52 49 0
i 4.554 130.501 0.490 3 52 49 1
i 4.555 131.501 0.490 3 52 49 2
i 4.556 133.001 0.490 3 52 49 3
i 4.557 135.001 0.490 3 52 49 4
i 5.574 130.009 0.100 1 1099 79
i 5.575 130.021 0.100 1 1105 65
i 5.576 130.029 0.100 1 1107 77
i 5.577 130.045 0.100 1 1096 81
i 5.578 130.193 0.100 1 1105 61
i 5.579 130.237 0.100 1 1091 63
i 5.580 130.252 0.100 1 1109 70
i 5.581 130.343 0.100 1 1101 58
i 5.582 130.351 0.100 1 1095 80
i 5.583 130.403 0.100 1 1101 72
i 5.584 130.545 0.100 1 1101 61
i 5.585 130.597 0.100 1 1106 72
i 5.586 130.617 0.100 1 1101 73
i 5.587 130.696 0.100 1 1094 55
i 5.588 130.731 0.100 1 1099 56
i 5.589 130.752 0.100 1 1099 70
i 4.559 130.751 0.490 3 53 49 0
i 4.560 131.251 0.490 3 53 49 1
i 4.561 132.251 0.490 3 53 49 2
i 4.562 133.751 0.490 3 53 49 3
i 4.563 135.751 0.490 3 53 49 4
i 5.590 130.853 0.100 1 1097 71
i 5.591 130.917 0.100 1 1113 58
i 5.592 131.000 0.100 1 1109 78
i 5.593 131.052 0.100 1 1103 71
i 5.594 131.201 0.100 1 1099 57
i 5.595 131.252 0.100 1 1111 70
i 5.596 131.269 0.100 1 1099 53
i 5.597 131.279 0.100 1 1093 61
i 5.598 131.315 0.100 1 1103 82
i 5.599 131.317 0.100 1 1098 79
i 5.600 131.343 0.100 1 1101 52
i 5.601 131.420 0.100 1 1095 78
i 5.602 131.427 0.100 1 1107 55
i 5.603 131.447 0.100 1 1103 77
i 5.604 131.683 0.100 1 1099 56
i 5.605 131.740 0.100 1 1097 62
i 5.606 131.759 0.100 1 1113 47
i 5.607 131.827 0.100 1 1101 78
i 5.608 131.865 0.100 1 1111 79
i 5.609 131.879 0.100 1 1097 68
i 5.610 131.945 0.100 1 1097 58
i 5.611 131.971 0.100 1 1103 71
i 4.565 132.001 0.490 3 41 127 0
i 4.566 132.501 0.490 3 41 127 1
i 4.567 133.501 0.490 3 41 127 2
i 4.568 135.001 0.490 3 41 127 3
i 4.569 137.001 0.490 3 41 127 4
i 5.612 132.047 0.100 1 1109 53
i 5.613 132.129 0.100 1 1103 79
i 5.614 132.228 0.100 1 1093 75
i 5.615 132.239 0.100 1 1109 53
i 5.616 132.284 0.100 1 1096 53
i 5.617 132.355 0.100 1 1105 69
i 5.618 132.405 0.100 1 1105 57
i 5.619 132.544 0.100 1 1107 71
i 5.620 132.577 0.100 1 1111 57
i 5.621 132.617 0.100 1 1101 55
i 5.622 132.635 0.100 1 1105 58
i 5.623 132.700 0.100 1 1097 58
i 4.571 132.751 0.490 3 40 127 0
i 4.572 133.251 0.490 3 40 127 1
i 4.573 134.251 0.490 3 40 127 2
i 4.574 135.751 0.490 3 40 127 3
i 4.575 137.751 0.490 3 40 127 4
i 5.624 132.812 0.100 1 1099 58
i 5.625 132.831 0.100 1 1091 66
i 5.626 132.921 0.100 1 1095 65
i 5.627 132.928 0.100 1 1101 68
i 5.628 132.965 0.100 1 1095 61
i 5.629 133.044 0.100 1 1103 54
i 5.630 133.171 0.100 1 1099 57
i 5.631 133.196 0.100 1 1105 63
i 5.632 133.232 0.100 1 1100 60
i 5.633 133.243 0.100 1 1100 53
i 5.634 133.256 0.100 1 1103 74
i 5.635 133.325 0.100 1 1107 57
i 5.636 133.352 0.100 1 1109 57
i 5.637 133.495 0.100 1 1097 78
i 5.638 133.528 0.100 1 1099 82
i 5.639 133.537 0.100 1 1105 84
i 5.640 133.625 0.100 1 1089 59
i 5.641 133.649 0.100 1 1100 73
i 5.642 133.661 0.100 1 1097 74
i 5.643 133.723 0.100 1 1101 70
i 5.644 133.743 0.100 1 1105 66
i 5.645 133.755 0.100 1 1105 55
i 5.646 133.781 0.100 1 1107 70
i 5.647 133.860 0.100 1 1107 65
i 5.648 133.872 0.100 1 1102 69
i 4.577 134.001 0.490 3 57 49 0
i 4.578 134.501 0.490 3 57 49 1
i 4.579 135.501 0.490 3 57 49 2
i 4.580 137.001 0.490 3 57 49 3
i 4.581 139.001 0.490 3 57 49 4
i 5.649 134.053 0.100 1 1107 54
i 5.650 134.143 0.100 1 1096 66
i 5.651 134.200 0.100 1 1090 79
i 5.652 134.283 0.100 1 1107 77
i 5.653 134.364 0.100 1 1103 50
i 5.654 134.371 0.100 1 1105 77
i 5.655 134.395 0.100 1 1103 69
i 5.656 134.423 0.100 1 1099 48
i 5.657 134.491 0.100 1 1097 55
i 5.658 134.521 0.100 1 1108 66
i 5.659 134.599 0.100 1 1092 63
i 5.660 134.636 0.100 1 1102 59
i 5.661 134.644 0.100 1 1103 59
i 5.662 134.731 0.100 1 1109 65
i 5.663 134.747 0.100 1 1092 53
i 4.583 134.751 0.490 3 55 49 0
i 4.584 135.251 0.490 3 55 49 1
i 4.585 136.251 0.490 3 55 49 2
i 4.586 137.751 0.490 3 55 49 3
i 4.587 139.751 0.490 3 55 49 4
i 5.664 134.763 0.100 1 1105 56
i 5.665 134.933 0.100 1 1102 58
i 5.666 135.073 0.100 1 1109 79
i 5.667 135.104 0.100 1 1100 60
i 5.668 135.176 0.100 1 1101 61
i 5.669 135.195 0.100 1 1105 53
i 5.670 135.247 0.100 1 1100 64
i 5.671 135.285 0.100 1 1094 58
i 5.672 135.297 0.100 1 1099 70
i 5.673 135.311 0.100 1 1096 59
i 5.674 135.387 0.100 1 1094 83
i 5.675 135.427 0.100 1 1114 68
i 5.676 135.497 0.100 1 1098 79
i 5.677 135.579 0.100 1 1103 53
i 5.678 135.692 0.100 1 1108 50
i 5.679 135.700 0.100 1 1098 66
i 5.680 135.753 0.100 1 1101 67
i 5.681 135.833 0.100 1 1096 65
i 5.682 135.885 0.100 1 1097 71
i 5.683 135.889 0.100 1 1112 55
i 5.684 135.900 0.100 1 1104 73
i 5.685 135.923 0.100 1 1104 58
i 5.686 135.957 0.100 1 1098 68
i 4.589 136.001 0.490 3 40 127 0
i 4.590 136.501 0.490 3 40 127 1
i 4.591 137.501 0.490 3 40 127 2
i 4.592 139.001 0.490 3 40 127 3
i 4.593 141.001 0.490 3 40 127 4
i 5.687 136.052 0.100 1 1110 78
i 5.688 136.200 0.100 1 1112 42
i 5.689 136.251 0.100 1 1096 80
i 5.690 136.313 0.100 1 1100 66
i 5.691 136.373 0.100 1 1094 74
i 5.692 136.404 0.100 1 1098 76
i 5.693 136.452 0.100 1 1102 71
i 5.694 136.471 0.100 1 1096 64
i 5.695 136.560 0.100 1 1108 50
i 5.696 136.660 0.100 1 1108 59
i 5.697 136.727 0.100 1 1106 72
i 5.698 136.728 0.100 1 1103 80
i 4.595 136.751 0.490 3 38 127 0
i 4.596 137.251 0.490 3 38 127 1
i 4.597 138.251 0.490 3 38 127 2
i 4.598 139.751 0.490 3 38 127 3
i 4.599 141.751 0.490 3 38 127 4
i 5.699 136.759 0.100 1 1094 69
i 5.700 136.819 0.100 1 1102 77
i 5.701 136.873 0.100 1 1095 76
i 5.702 136.920 0.100 1 1106 77
i 5.703 136.992 0.100 1 1106 72
i 5.704 137.056 0.100 1 1110 78
i 5.705 137.105 0.100 1 1106 62
i 5.706 137.153 0.100 1 1102 69
i 5.707 137.200 0.100 1 1098 63
i 5.708 137.233 0.100 1 1098 53
i 5.709 137.244 0.100 1 1090 67
i 5.710 137.269 0.100 1 1104 77
i 5.711 137.365 0.100 1 1096 53
i 5.712 137.441 0.100 1 1096 61
i 5.713 137.508 0.100 1 1100 63
i 5.714 137.523 0.100 1 1104 72
i 5.715 137.636 0.100 1 1108 78
i 5.716 137.636 0.100 1 1108 50
i 5.717 137.755 0.100 1 1100 62
i 5.718 137.777 0.100 1 1104 75
i 5.719 137.800 0.100 1 1101 69
i 5.720 137.859 0.100 1 1106 64
i 5.721 137.887 0.100 1 1104 70
i 5.722 137.932 0.100 1 1112 42
i 5.723 137.947 0.100 1 1098 54
i 5.724 137.949 0.100 1 1098 57
i 5.725 137.993 0.100 1 1090 69
i 4.601 138.001 0.490 3 55 49 0
i 4.602 138.501 0.490 3 55 49 1
i 4.603 139.501 0.490 3 55 49 2
i 4.604 141.001 0.490 3 55 49 3
i 4.605 143.001 0.490 3 55 49 4
i 5.726 138.111 0.100 1 1100 60
i 5.727 138.197 0.100 1 1096 61
i 5.728 138.281 0.100 1 1102 73
i 5.729 138.335 0.100 1 1106 50
i 5.730 138.461 0.100 1 1103 54
i 5.731 138.472 0.100 1 1102 56
i 5.732 138.557 0.100 1 1106 42
i 5.733 138.581 0.100 1 1108 62
i 5.734 138.619 0.100 1 1096 77
i 5.735 138.623 0.100 1 1106 61
i 5.736 138.700 0.100 1 1091 55
i 4.607 138.751 0.490 3 53 49 0
i 4.608 139.251 0.490 3 53 49 1
i 4.609 140.251 0.490 3 53 49 2
i 4.610 141.751 0.490 3 53 49 3
i 4.611 143.751 0.490 3 53 49 4
i 5.737 138.765 0.100 1 1106 66
i 5.738 138.815 0.100 1 1098 71
i 5.739 138.836 0.100 1 1098 71
i 5.740 138.836 0.100 1 1114 49
i 5.741 138.920 0.100 1 1100 69
i 5.742 138.924 0.100 1 1102 69
i 5.743 139.072 0.100 1 1104 55
i 5.744 139.157 0.100 1 1100 53
i 5.745 139.175 0.100 1 1102 77
i 5.746 139.211 0.100 1 1093 78
i 5.747 139.259 0.100 1 1093 58
i 5.748 139.315 0.100 1 1108 64
i 5.749 139.355 0.100 1 1104 49
i 5.750 139.464 0.100 1 1103 61
i 5.751 139.552 0.100 1 1110 59
i 5.752 139.587 0.100 1 1104 49
i 5.753 139.668 0.100 1 1104 67
i 5.754 139.676 0.100 1 1110 53
i 5.755 139.688 0.100 1 1100 51
i 5.756 139.743 0.100 1 1100 70
i 5.757 139.769 0.100 1 1096 67
i 5.758 139.848 0.100 1 1102 64
i 5.759 139.876 0.100 1 1095 55
i 5.760 139.891 0.100 1 1100 52
i 5.761 139.973 0.100 1 1110 63
i 4.613 140.001 0.490 3 36 127 0
i 4.614 140.501 0.490 3 36 127 1
i 4.615 141.501 0.490 3 36 127 2
i 4.616 143.001 0.490 3 36 127 3
i 4.617 145.001 0.490 3 36 127 4
i 5.762 140.023 0.100 1 1114 42
i 5.763 140.059 0.100 1 1102 71
i 5.764 140.085 0.100 1 1098 66
i 5.765 140.200 0.100 1 1097 65
i 5.766 140.293 0.100 1 1096 65
i 5.767 140.299 0.100 1 1102 72
i 5.768 140.321 0.100 1 1108 64
i 5.769 140.444 0.100 1 1103 77
i 5.770 140.455 0.100 1 1097 59
i 5.771 140.457 0.100 1 1107 65
i 5.772 140.479 0.100 1 1112 52
i 5.773 140.483 0.100 1 1104 79
i 5.774 140.491 0.100 1 1106 61
i 5.775 140.524 0.100 1 1098 68
i 5.776 140.577 0.100 1 1102 60
i 5.777 140.637 0.100 1 1112 70
i 5.778 140.648 0.100 1 1101 55
i 5.779 140.687 0.100 1 1093 60
i 4.619 140.751 0.490 3 36 127 0
i 4.620 141.251 0.490 3 36 127 1
i 4.621 142.251 0.490 3 36 127 2
i 4.622 143.751 0.490 3 36 127 3
i 4.623 145.751 0.490 3 36 127 4
i 5.780 140.763 0.100 1 1095 67
i 5.781 140.908 0.100 1 1099 68
i 5.782 141.036 0.100 1 1105 78
i 5.783 141.069 0.100 1 1107 70
i 5.784 141.088 0.100 1 1103 57
i 5.785 141.133 0.100 1 1107 79
i 5.786 141.139 0.100 1 1104 79
i 5.787 141.159 0.100 1 1096 78
i 5.788 141.248 0.100 1 1095 64
i 5.789 141.296 0.100 1 1105 72
i 5.790 141.435 0.100 1 1109 66
i 5.791 141.447 0.100 1 1095 82
i 5.792 141.459 0.100 1 1107 46
i 5.793 141.535 0.100 1 1109 79
i 5.794 141.585 0.100 1 1095 73
i 5.795 141.672 0.100 1 1105 62
i 5.796 141.697 0.100 1 1101 67
i 5.797 141.700 0.100 1 1099 53
i 5.798 141.704 0.100 1 1089 76
i 5.799 141.811 0.100 1 1105 67
i 5.800 141.832 0.100 1 1098 79
i 5.801 141.876 0.100 1 1097 83
i 5.802 141.912 0.100 1 1107 53
i 5.803 141.927 0.100 1 1097 60
i 4.625 142.001 0.490 3 52 49 0
i 4.626 142.501 0.490 3 52 49 1
i 4.627 143.501 0.490 3 52 49 2
i 4.628 145.001 0.490 3 52 49 3
i 4.629 147.001 0.490 3 52 49 4
i 5.804 142.145 0.100 1 1107 56
i 5.805 142.153 0.100 1 1103 65
i 5.806 142.203 0.100 1 1109 45
i 5.807 142.267 0.100 1 1101 60
i 5.808 142.332 0.100 1 1103 81
i 5.809 142.352 0.100 1 1102 73
i 5.810 142.409 0.100 1 1091 75
i 5.811 142.424 0.100 1 1097 83
i 5.812 142.453 0.100 1 1101 56
i 5.813 142.468 0.100 1 1107 63
i 5.814 142.587 0.100 1 1101 79
i 5.815 142.609 0.100 1 1097 78
i 5.816 142.647 0.100 1 1105 53
i 5.817 142.663 0.100 1 1099 61
i 5.818 142.691 0.100 1 1103 55
i 4.631 142.751 0.490 3 52 49 0
i 4.632 143.251 0.490 3 52 49 1
i 4.633 144.251 0.490 3 52 49 2
i 4.634 145.751 0.490 3 52 49 3
i 4.635 147.751 0.490 3 52 49 4
i 5.819 142.896 0.100 1 1105 63
i 5.820 143.009 0.100 1 1113 70
i 5.821 143.035 0.100 1 1102 79
i 5.822 143.060 0.100 1 1109 61
i 5.823 143.088 0.100 1 1107 48
i 5.824 143.139 0.100 1 1099 67
i 5.825 143.148 0.100 1 1095 59
i 5.826 143.200 0.100 1 1091 80
i 5.827 143.297 0.100 1 1097 68
i 5.828 143.323 0.100 1 1099 79
i 5.829 143.365 0.100 1 1105 63
i 5.830 143.485 0.100 1 1101 58
i 5.831 143.527 0.100 1 1115 52
i 5.832 143.559 0.100 1 1099 74
i 5.833 143.579 0.100 1 1101 67
i 5.834 143.596 0.100 1 1103 50
i 5.835 143.677 0.100 1 1111 55
i 5.836 143.769 0.100 1 1103 63
i 5.837 143.771 0.100 1 1093 77
i 5.838 143.805 0.100 1 1094 58
i 5.839 143.815 0.100 1 1109 55
i 4.637 144.001 0.490 3 36 127 0
i 4.638 144.501 0.490 3 36 127 1
i 4.639 145.501 0.490 3 36 127 2
i 4.640 147.001 0.490 3 36 127 3
i 4.641 149.001 0.490 3 36 127 4
i 4.643 144.001 0.490 3 48 56 0
i 4.644 144.501 0.490 3 48 56 1
i 4.645 145.501 0.490 3 48 56 2
i 4.646 147.001 0.490 3 48 56 3
i 4.647 149.001 0.490 3 48 56 4
i 5.840 144.048 0.100 1 1103 75
i 5.841 144.080 0.100 1 1103 53
i 5.842 144.092 0.100 1 1101 71
i 5.843 144.197 0.100 1 1105 43
i 5.844 144.220 0.100 1 1101 74
i 5.845 144.276 0.100 1 1095 64
i 5.846 144.313 0.100 1 1099 60
i 5.847 144.329 0.100 1 1109 74
i 5.848 144.332 0.100 1 1099 77
i 5.849 144.333 0.100 1 1113 43
i 5.850 144.365 0.100 1 1099 50
i 5.851 144.449 0.100 1 1096 57
i 5.852 144.535 0.100 1 1111 63
i 5.853 144.537 0.100 1 1101 64
i 5.854 144.700 0.100 1 1096 52
i 4.649 144.751 0.490 3 38 127 0
i 4.650 145.251 0.490 3 38 127 1
i 4.651 146.251 0.490 3 38 127 2
i 4.652 147.751 0.490 3 38 127 3
i 4.653 149.751 0.490 3 38 127 4
i 4.655 144.751 0.490 3 50 56 0
i 4.656 145.251 0.490 3 50 56 1
i 4.657 146.251 0.490 3 50 56 2
i 4.658 147.751 0.490 3 50 56 3
i 4.659 149.751 0.490 3 50 56 4
i 5.855 144.845 0.100 1 1097 75
i 5.856 144.875 0.100 1 1107 40
i 5.857 144.899 0.100 1 1103 70
i 5.858 144.928 0.100 1 1105 57
i 5.859 144.973 0.100 1 1103 68
i 5.860 144.995 0.100 1 1097 68
i 5.861 145.007 0.100 1 1096 84
i 5.862 145.025 0.100 1 1101 50
i 5.863 145.060 0.100 1 1103 77
i 5.864 145.168 0.100 1 1109 80
i 5.865 145.263 0.100 1 1107 59
i 5.866 145.273 0.100 1 1094 65
i 5.867 145.333 0.100 1 1111 52
i 5.868 145.360 0.100 1 1111 55
i 5.869 145.373 0.100 1 1103 60
i 5.870 145.399 0.100 1 1109 65
i 5.871 145.433 0.100 1 1107 76
i 5.872 145.505 0.100 1 1099 77
i 5.873 145.551 0.100 1 1105 59
i 5.874 145.695 0.100 1 1107 50
i 5.875 145.723 0.100 1 1096 65
i 5.876 145.751 0.100 1 1095 74
i 5.877 145.900 0.100 1 1107 66
i 5.878 145.928 0.100 1 1104 50
i 5.879 145.977 0.100 1 1094 63
i 5.880 145.987 0.100 1 1093 71
i 4.661 146.001 0.490 3 52 43 0
i 4.662 146.501 0.490 3 52 43 1
i 4.663 147.501 0.490 3 52 43 2
i 4.664 149.001 0.490 3 52 43 3
i 4.665 151.001 0.490 3 52 43 4
i 4.667 146.001 0.490 3 40 43 0
i 4.668 146.501 0.490 3 40 43 1
i 4.669 147.501 0.490 3 40 43 2
i 4.670 149.001 0.490 3 40 43 3
i 4.671 151.001 0.490 3 40 43 4
i 5.881 146.064 0.100 1 1109 73
i 5.882 146.072 0.100 1 1103 73
i 5.883 146.128 0.100 1 1106 52
i 5.884 146.199 0.100 1 1100 70
i 5.885 146.256 0.100 1 1090 70
i 5.886 146.269 0.100 1 1106 49
i 5.887 146.289 0.100 1 1101 64
i 5.888 146.296 0.100 1 1098 81
i 5.889 146.360 0.100 1 1105 53
i 5.890 146.381 0.100 1 1097 80
i 5.891 146.431 0.100 1 1097 52
i 5.892 146.671 0.100 1 1105 78
i 4.673 146.751 0.490 3 41 42 0
i 4.674 147.251 0.490 3 41 42 1
i 4.675 148.251 0.490 3 41 42 2
i 4.676 149.751 0.490 3 41 42 3
i 4.677 151.751 0.490 3 41 42 4
i 4.679 146.751 0.490 3 53 43 0
i 4.680 147.251 0.490 3 53 43 1
i 4.681 148.251 0.490 3 53 43 2
i 4.682 149.751 0.490 3 53 43 3
i 4.683 151.751 0.490 3 53 43 4
i 5.893 146.771 0.100 1 1110 71
i 5.894 146.776 0.100 1 1102 71
i 5.895 146.779 0.100 1 1107 73
i 5.896 146.797 0.100 1 1096 66
i 5.897 146.819 0.100 1 1102 50
i 5.898 146.861 0.100 1 1102 62
i 5.899 146.899 0.100 1 1096 83
i 5.900 146.899 0.100 1 1102 59
i 5.901 146.965 0.100 1 1108 72
i 5.902 146.987 0.100 1 1114 63
i 5.903 147.020 0.100 1 1097 58
i 5.904 147.076 0.100 1 1104 54
i 5.905 147.185 0.100 1 1104 72
i 5.906 147.272 0.100 1 1100 73
i 5.907 147.465 0.100 1 1104 59
i 5.908 147.500 0.100 1 1108 57
i 5.909 147.541 0.100 1 1110 76
i 5.910 147.567 0.100 1 1101 52
i 5.911 147.584 0.100 1 1100 81
i 5.912 147.677 0.100 1 1094 74
i 5.913 147.697 0.100 1 1092 80
i 5.914 147.743 0.100 1 1100 77
i 5.915 147.753 0.100 1 1100 72
i 5.916 147.813 0.100 1 1102 54
i 5.917 147.924 0.100 1 1114 45
i 5.918 147.927 0.100 1 1100 71
i 5.919 147.940 0.100 1 1100 55
i 5.920 147.963 0.100 1 1105 64
i 4.685 148.001 0.490 3 41 127 0
i 4.686 148.501 0.490 3 41 127 1
i 4.687 149.501 0.490 3 41 127 2
i 4.688 151.001 0.490 3 41 127 3
i 4.689 153.001 0.490 3 41 127 4
i 4.691 148.001 0.490 3 53 56 0
i 4.692 148.501 0.490 3 53 56 1
i 4.693 149.501 0.490 3 53 56 2
i 4.694 151.001 0.490 3 53 56 3
i 4.695 153.001 0.490 3 53 56 4
i 5.921 148.029 0.100 1 1110 59
i 5.922 148.207 0.100 1 1102 54
i 5.923 148.279 0.100 1 1094 82
i 5.924 148.279 0.100 1 1112 61
i 5.925 148.359 0.100 1 1095 71
i 5.926 148.416 0.100 1 1102 61
i 5.927 148.489 0.100 1 1102 51
i 5.928 148.535 0.100 1 1098 81
i 5.929 148.555 0.100 1 1112 53
i 5.930 148.632 0.100 1 1104 65
i 5.931 148.667 0.100 1 1098 76
i 5.932 148.668 0.100 1 1100 50
i 5.933 148.697 0.100 1 1098 77
i 4.697 148.751 0.490 3 40 127 0
i 4.698 149.251 0.490 3 40 127 1
i 4.699 150.251 0.490 3 40 127 2
i 4.700 151.751 0.490 3 40 127 3
i 4.701 153.751 0.490 3 40 127 4
i 4.703 148.751 0.490 3 52 56 0
i 4.704 149.251 0.490 3 52 56 1
i 4.705 150.251 0.490 3 52 56 2
i 4.706 151.751 0.490 3 52 56 3
i 4.707 153.751 0.490 3 52 56 4
i 5.934 148.767 0.100 1 1100 64
i 5.935 148.835 0.100 1 1106 60
i 5.936 148.981 0.100 1 1097 81
i 5.937 149.031 0.100 1 1112 46
i 5.938 149.067 0.100 1 1102 68
i 5.939 149.196 0.100 1 1096 62
i 5.940 149.384 0.100 1 1106 75
i 5.941 149.395 0.100 1 1096 53
i 5.942 149.409 0.100 1 1110 50
i 5.943 149.485 0.100 1 1104 65
i 5.944 149.503 0.100 1 1102 58
i 5.945 149.517 0.100 1 1095 64
i 5.946 149.520 0.100 1 1102 74
i 5.947 149.579 0.100 1 1108 63
i 5.948 149.612 0.100 1 1108 62
i 5.949 149.624 0.100 1 1108 51
i 5.950 149.628 0.100 1 1112 35
i 5.951 149.644 0.100 1 1110 71
i 5.952 149.713 0.100 1 1102 51
i 5.953 149.781 0.100 1 1093 58
i 5.954 149.879 0.100 1 1104 60
i 4.709 150.001 0.490 3 57 43 0
i 4.710 150.501 0.490 3 57 43 1
i 4.711 151.501 0.490 3 57 43 2
i 4.712 153.001 0.490 3 57 43 3
i 4.713 155.001 0.490 3 57 43 4
i 4.715 150.001 0.490 3 45 43 0
i 4.716 150.501 0.490 3 45 43 1
i 4.717 151.501 0.490 3 45 43 2
i 4.718 153.001 0.490 3 45 43 3
i 4.719 155.001 0.490 3 45 43 4
i 5.955 150.023 0.100 1 1106 72
i 5.956 150.044 0.100 1 1106 60
i 5.957 150.197 0.100 1 1096 82
i 5.958 150.259 0.100 1 1106 67
i 5.959 150.271 0.100 1 1094 53
i 5.960 150.272 0.100 1 1104 66
i 5.961 150.319 0.100 1 1106 61
i 5.962 150.368 0.100 1 1114 51
i 5.963 150.377 0.100 1 1104 78
i 5.964 150.467 0.100 1 1093 79
i 5.965 150.476 0.100 1 1108 56
i 5.966 150.544 0.100 1 1108 78
i 5.967 150.559 0.100 1 1104 72
i 5.968 150.597 0.100 1 1108 56
i 5.969 150.695 0.100 1 1101 66
i 5.970 150.716 0.100 1 1099 81
i 4.721 150.751 0.490 3 55 43 0
i 4.722 151.251 0.490 3 55 43 1
i 4.723 152.251 0.490 3 55 43 2
i 4.724 153.751 0.490 3 55 43 3
i 4.725 155.751 0.490 3 55 43 4
i 4.727 150.751 0.490 3 43 43 0
i 4.728 151.251 0.490 3 43 43 1
i 4.729 152.251 0.490 3 43 43 2
i 4.730 153.751 0.490 3 43 43 3
i 4.731 155.751 0.490 3 43 43 4
i 5.971 150.943 0.100 1 1098 78
i 5.972 150.956 0.100 1 1096 54
i 5.973 151.001 0.100 1 1104 65
i 5.974 151.027 0.100 1 1106 47
i 5.975 151.107 0.100 1 1106 61
i 5.976 151.115 0.100 1 1110 63
i 5.977 151.133 0.100 1 1102 51
i 5.978 151.184 0.100 1 1106 76
i 5.979 151.195 0.100 1 1102 71
i 5.980 151.259 0.100 1 1094 80
i 5.981 151.284 0.100 1 1101 58
i 5.982 151.297 0.100 1 1106 75
i 5.983 151.329 0.100 1 1103 62
i 5.984 151.351 0.100 1 1105 36
i 5.985 151.373 0.100 1 1095 78
i 5.986 151.555 0.100 1 1098 64
i 5.987 151.585 0.100 1 1102 81
i 5.988 151.657 0.100 1 1108 68
i 5.989 151.700 0.100 1 1104 51
i 5.990 151.731 0.100 1 1114 50
i 5.991 151.768 0.100 1 1109 53
i 5.992 151.900 0.100 1 1100 70
i 5.993 151.981 0.100 1 1096 64
i 4.733 152.001 0.490 3 36 127 0
i 4.734 152.501 0.490 3 36 127 1
i 4.735 153.501 0.490 3 36 127 2
i 4.736 155.001 0.490 3 36 127 3
i 4.737 157.001 0.490 3 36 127 4
i 4.739 152.001 0.490 3 48 56 0
i 4.740 152.501 0.490 3 48 56 1
i 4.741 153.501 0.490 3 48 56 2
i 4.742 155.001 0.490 3 48 56 3
i 4.743 157.001 0.490 3 48 56 4
i 5.994 152.035 0.100 1 1104 59
i 5.995 152.056 0.100 1 1101 78
i 5.996 152.069 0.100 1 1110 74
i 5.997 152.104 0.100 1 1104 51
i 5.998 152.128 0.100 1 1107 41
i 5.999 152.149 0.100 1 1100 59
i 5.001 152.193 0.100 1 1093 80
i 5.002 152.207 0.100 1 1093 64
i 5.003 152.256 0.100 1 1099 52
i 5.004 152.375 0.100 1 1113 39
i 5.005 152.409 0.100 1 1099 71
i 5.006 152.415 0.100 1 1100 69
i 5.007 152.425 0.100 1 1104 64
i 5.008 152.551 0.100 1 1109 68
i 5.009 152.663 0.100 1 1111 47
i 5.010 152.681 0.100 1 1103 41
i 4.745 152.751 0.490 3 38 127 0
i 4.746 153.251 0.490 3 38 127 1
i 4.747 154.251 0.490 3 38 127 2
i 4.748 155.751 0.490 3 38 127 3
i 4.749 157.751 0.490 3 38 127 4
i 4.751 152.751 0.490 3 50 56 0
i 4.752 153.251 0.490 3 50 56 1
i 4.753 154.251 0.490 3 50 56 2
i 4.754 155.751 0.490 3 50 56 3
i 4.755 157.751 0.490 3 50 56 4
i 5.011 152.787 0.100 1 1095 81
i 5.012 152.797 0.100 1 1101 74
i 5.013 152.860 0.100 1 1103 63
i 5.014 152.869 0.100 1 1095 58
i 5.015 152.885 0.100 1 1107 48
i 5.016 152.939 0.100 1 1100 61
i 5.017 152.956 0.100 1 1101 69
i 5.018 152.979 0.100 1 1113 56
i 5.019 152.987 0.100 1 1097 56
i 5.020 153.081 0.100 1 1097 60
i 5.021 153.087 0.100 1 1102 72
i 5.022 153.199 0.100 1 1103 66
i 5.023 153.371 0.100 1 1109 46
i 5.024 153.377 0.100 1 1111 75
i 5.025 153.471 0.100 1 1098 81
i 5.026 153.472 0.100 1 1111 61
i 5.027 153.543 0.100 1 1101 50
i 5.028 153.545 0.100 1 1103 63
i 5.029 153.613 0.100 1 1107 71
i 5.030 153.632 0.100 1 1097 58
i 5.031 153.692 0.100 1 1095 67
i 5.032 153.717 0.100 1 1095 76
i 5.033 153.723 0.100 1 1109 56
i 5.034 153.787 0.100 1 1107 62
i 5.035 153.859 0.100 1 1107 57
i 5.036 153.895 0.100 1 1105 68
i 5.037 153.912 0.100 1 1109 63
i 5.038 153.985 0.100 1 1094 82
i 4.757 154.001 0.490 3 52 43 0
i 4.758 154.501 0.490 3 52 43 1
i 4.759 155.501 0.490 3 52 43 2
i 4.760 157.001 0.490 3 52 43 3
i 4.761 159.001 0.490 3 52 43 4
i 4.763 154.001 0.490 3 40 43 0
i 4.764 154.501 0.490 3 40 43 1
i 4.765 155.501 0.490 3 40 43 2
i 4.766 157.001 0.490 3 40 43 3
i 4.767 159.001 0.490 3 40 43 4
i 5.039 154.015 0.100 1 1101 64
i 5.040 154.088 0.100 1 1105 49
i 5.041 154.247 0.100 1 1109 54
i 5.042 154.256 0.100 1 1105 58
i 5.043 154.289 0.100 1 1093 66
i 5.044 154.321 0.100 1 1113 45
i 5.045 154.343 0.100 1 1103 63
i 5.046 154.407 0.100 1 1107 59
i 5.047 154.560 0.100 1 1103 59
i 5.048 154.560 0.100 1 1105 61
i 5.049 154.619 0.100 1 1107 78
i 5.050 154.655 0.100 1 1097 64
i 5.051 154.673 0.100 1 1105 69
i 5.052 154.703 0.100 1 1105 77
i 5.053 154.715 0.100 1 1095 82
i 4.769 154.751 0.490 3 53 43 0
i 4.770 155.251 0.490 3 53 43 1
i 4.771 156.251 0.490 3 53 43 2
i 4.772 157.751 0.490 3 53 43 3
i 4.773 159.751 0.490 3 53 43 4
i 4.775 154.751 0.490 3 41 43 0
i 4.776 155.251 0.490 3 41 43 1
i 4.777 156.251 0.490 3 41 43 2
i 4.778 157.751 0.490 3 41 43 3
i 4.779 159.751 0.490 3 41 43 4
i 5.054 154.817 0.100 1 1107 74
i 5.055 154.908 0.100 1 1109 69
i 5.056 154.913 0.100 1 1092 64
i 5.057 154.935 0.100 1 1103 76
i 5.058 155.071 0.100 1 1107 52
i 5.059 155.129 0.100 1 1115 52
i 5.060 155.192 0.100 1 1099 76
i 5.061 155.192 0.100 1 1101 56
i 5.062 155.224 0.100 1 1105 68
i 5.063 155.321 0.100 1 1107 61
i 5.064 155.364 0.100 1 1097 75
i 5.065 155.377 0.100 1 1105 52
i 5.066 155.419 0.100 1 1099 56
i 5.067 155.553 0.100 1 1101 78
i 5.068 155.555 0.100 1 1109 57
i 5.069 155.565 0.100 1 1103 66
i 5.070 155.668 0.100 1 1103 63
i 5.071 155.696 0.100 1 1105 44
i 5.072 155.753 0.100 1 1102 70
i 5.073 155.793 0.100 1 1100 53
i 5.074 155.812 0.100 1 1111 57
i 5.075 155.904 0.100 1 1095 61
i 4.781 156.001 0.490 3 41 127 0
i 4.782 156.501 0.490 3 41 127 1
i 4.783 157.501 0.490 3 41 127 2
i 4.784 159.001 0.490 3 41 127 3
i 4.785 161.001 0.490 3 41 127 4
i 4.787 156.001 0.490 3 53 56 0
i 4.788 156.501 0.490 3 53 56 1
i 4.789 157.501 0.490 3 53 56 2
i 4.790 159.001 0.490 3 53 56 3
i 4.791 161.001 0.490 3 53 56 4
i 5.076 156.064 0.100 1 1105 74
i 5.077 156.091 0.100 1 1099 64
i 5.078 156.123 0.100 1 1095 57
i 5.079 156.151 0.100 1 1099 69
i 5.080 156.196 0.100 1 1103 56
i 5.081 156.221 0.100 1 1101 69
i 5.082 156.255 0.100 1 1115 65
i 5.083 156.271 0.100 1 1101 66
i 5.084 156.324 0.100 1 1105 61
i 5.085 156.345 0.100 1 1103 66
i 5.086 156.373 0.100 1 1107 51
i 5.087 156.381 0.100 1 1109 51
i 5.088 156.501 0.100 1 1100 70
i 5.089 156.596 0.100 1 1111 56
i 5.090 156.692 0.100 1 1094 79
i 4.793 156.751 0.490 3 43 127 0
i 4.794 157.251 0.490 3 43 127 1
i 4.795 158.251 0.490 3 43 127 2
i 4.796 159.751 0.490 3 43 127 3
i 4.797 161.751 0.490 3 43 127 4
i 4.799 156.751 0.490 3 55 56 0
i 4.800 157.251 0.490 3 55 56 1
i 4.801 158.251 0.490 3 55 56 2
i 4.802 159.751 0.490 3 55 56 3
i 4.803 161.751 0.490 3 55 56 4
i 5.091 156.757 0.100 1 1097 52
i 5.092 156.792 0.100 1 1092 68
i 5.093 156.829 0.100 1 1101 78
i 5.094 156.833 0.100 1 1103 67
i 5.095 156.863 0.100 1 1099 51
i 5.096 156.924 0.100 1 1102 62
i 5.097 157.032 0.100 1 1113 51
i 5.098 157.100 0.100 1 1099 71
i 5.099 157.152 0.100 1 1113 57
i 5.100 157.184 0.100 1 1101 60
i 5.101 157.293 0.100 1 1110 60
i 5.102 157.297 0.100 1 1096 53
i 5.103 157.313 0.100 1 1103 72
i 5.104 157.336 0.100 1 1096 61
i 5.105 157.345 0.100 1 1108 78
i 5.106 157.419 0.100 1 1103 74
i 5.107 157.447 0.100 1 1097 51
i 5.108 157.556 0.100 1 1106 63
i 5.109 157.627 0.100 1 1099 69
i 5.110 157.683 0.100 1 1101 68
i 5.111 157.705 0.100 1 1097 70
i 5.112 157.729 0.100 1 1102 82
i 5.113 157.911 0.100 1 1110 69
i 5.114 157.916 0.100 1 1098 82
i 5.115 157.963 0.100 1 1108 51
i 4.805 158.001 0.490 3 57 43 0
i 4.806 158.501 0.490 3 57 43 1
i 4.807 159.501 0.490 3 57 43 2
i 4.808 161.001 0.490 3 57 43 3
i 4.809 163.001 0.490 3 57 43 4
i 4.811 158.001 0.490 3 45 43 0
i 4.812 158.501 0.490 3 45 43 1
i 4.813 159.501 0.490 3 45 43 2
i 4.814 161.001 0.490 3 45 43 3
i 4.815 163.001 0.490 3 45 43 4
i 5.116 158.072 0.100 1 1103 60
i 5.117 158.084 0.100 1 1111 77
i 5.118 158.101 0.100 1 1102 61
i 5.119 158.133 0.100 1 1108 37
i 5.120 158.155 0.100 1 1094 69
i 5.121 158.192 0.100 1 1094 79
i 5.122 158.221 0.100 1 1106 77
i 5.123 158.232 0.100 1 1097 70
i 5.124 158.304 0.100 1 1105 61
i 5.125 158.421 0.100 1 1106 62
i 5.126 158.424 0.100 1 1093 62
i 5.127 158.485 0.100 1 1104 72
i 5.128 158.491 0.100 1 1100 73
i 5.129 158.547 0.100 1 1110 48
i 5.130 158.648 0.100 1 1104 60
i 5.131 158.731 0.100 1 1114 52
i 5.132 158.751 0.100 1 1108 62
i 4.817 158.751 0.490 3 59 43 0
i 4.818 159.251 0.490 3 59 43 1
i 4.819 160.251 0.490 3 59 43 2
i 4.820 161.751 0.490 3 59 43 3
i 4.821 163.751 0.490 3 59 43 4
i 4.823 158.751 0.490 3 47 43 0
i 4.824 159.251 0.490 3 47 43 1
i 4.825 160.251 0.490 3 47 43 2
i 4.826 161.751 0.490 3 47 43 3
i 4.827 163.751 0.490 3 47 43 4
i 5.133 158.801 0.100 1 1092 81
i 5.134 158.871 0.100 1 1108 56
i 5.135 158.968 0.100 1 1106 58
i 5.136 159.037 0.100 1 1096 73
i 5.137 159.072 0.100 1 1103 55
i 5.138 159.076 0.100 1 1098 61
i 5.139 159.087 0.100 1 1104 73
i 5.140 159.212 0.100 1 1108 64
i 5.141 159.216 0.100 1 1107 72
i 5.142 159.284 0.100 1 1106 69
i 5.143 159.312 0.100 1 1102 68
i 5.144 159.329 0.100 1 1091 56
i 5.145 159.377 0.100 1 1116 43
i 5.146 159.389 0.100 1 1104 77
i 5.147 159.477 0.100 1 1110 67
i 5.148 159.544 0.100 1 1106 49
i 5.149 159.597 0.100 1 1106 53
i 5.150 159.648 0.100 1 1104 57
i 5.151 159.668 0.100 1 1100 68
i 5.152 159.692 0.100 1 1102 63
i 5.153 159.775 0.100 1 1098 77
i 5.154 159.832 0.100 1 1104 72
i 5.155 159.895 0.100 1 1104 42
i 5.156 159.980 0.100 1 1100 52
i 4.829 160.001 0.490 3 36 127 0
i 4.830 160.501 0.490 3 36 127 1
i 4.831 161.501 0.490 3 36 127 2
i 4.832 163.001 0.490 3 36 127 3
i 4.833 165.001 0.490 3 36 127 4
i 4.835 160.001 0.490 3 48 56 0
i 4.836 160.501 0.490 3 48 56 1
i 4.837 161.501 0.490 3 48 56 2
i 4.838 163.001 0.490 3 48 56 3
i 4.839 165.001 0.490 3 48 56 4
i 5.157 160.009 0.100 1 1102 64
i 5.158 160.104 0.100 1 1108 78
i 5.159 160.148 0.100 1 1101 57
i 5.160 160.185 0.100 1 1100 61
i 5.161 160.188 0.100 1 1110 59
i 5.162 160.188 0.100 1 1112 60
i 5.163 160.252 0.100 1 1104 76
i 5.164 160.265 0.100 1 1106 44
i 5.165 160.305 0.100 1 1100 60
i 5.166 160.435 0.100 1 1094 62
i 5.167 160.439 0.100 1 1114 50
i 5.168 160.459 0.100 1 1096 71
i 5.169 160.628 0.100 1 1102 57
i 5.170 160.659 0.100 1 1102 62
i 5.171 160.708 0.100 1 1106 72
i 5.172 160.749 0.100 1 1100 79
i 4.841 160.751 0.490 3 38 127 0
i 4.842 161.251 0.490 3 38 127 1
i 4.843 162.251 0.490 3 38 127 2
i 4.844 163.751 0.490 3 38 127 3
i 4.845 165.751 0.490 3 38 127 4
i 4.847 160.751 0.490 3 50 56 0
i 4.848 161.251 0.490 3 50 56 1
i 4.849 162.251 0.490 3 50 56 2
i 4.850 163.751 0.490 3 50 56 3
i 4.851 165.751 0.490 3 50 56 4
i 5.173 160.835 0.100 1 1100 66
i 5.174 160.917 0.100 1 1099 78
i 5.175 161.005 0.100 1 1098 80
i 5.176 161.011 0.100 1 1100 65
i 5.177 161.043 0.100 1 1102 53
i 5.178 161.075 0.100 1 1112 60
i 5.179 161.105 0.100 1 1110 68
i 5.180 161.136 0.100 1 1108 39
i 5.181 161.243 0.100 1 1112 68
i 5.182 161.255 0.100 1 1102 78
i 5.183 161.327 0.100 1 1100 66
i 5.184 161.377 0.100 1 1092 65
i 5.185 161.424 0.100 1 1098 50
i 5.186 161.515 0.100 1 1102 60
i 5.187 161.573 0.100 1 1112 27
i 5.188 161.624 0.100 1 1104 69
i 5.189 161.705 0.100 1 1098 55
i 5.190 161.764 0.100 1 1110 33
i 5.191 161.773 0.100 1 1097 61
i 5.192 161.787 0.100 1 1098 51
i 5.193 161.816 0.100 1 1108 56
i 5.194 161.873 0.100 1 1112 51
i 5.195 161.891 0.100 1 1102 62
i 5.196 161.893 0.100 1 1108 54
i 4.853 162.001 0.490 3 52 43 0
i 4.854 162.501 0.490 3 52 43 1
i 4.855 163.501 0.490 3 52 43 2
i 4.856 165.001 0.490 3 52 43 3
i 4.857 167.001 0.490 3 52 43 4
i 4.859 162.001 0.490 3 40 43 0
i 4.860 162.501 0.490 3 40 43 1
i 4.861 163.501 0.490 3 40 43 2
i 4.862 165.001 0.490 3 40 43 3
i 4.863 167.001 0.490 3 40 43 4
i 5.197 162.048 0.100 1 1104 61
i 5.198 162.108 0.100 1 1110 79
i 5.199 162.161 0.100 1 1096 60
i 5.200 162.192 0.100 1 1115 52
i 5.201 162.219 0.100 1 1100 60
i 5.202 162.260 0.100 1 1101 60
i 5.203 162.304 0.100 1 1096 51
i 5.204 162.317 0.100 1 1102 63
i 5.205 162.323 0.100 1 1098 75
i 5.206 162.332 0.100 1 1099 80
i 5.207 162.379 0.100 1 1107 33
i 5.208 162.600 0.100 1 1104 79
i 5.209 162.608 0.100 1 1110 56
i 5.210 162.663 0.100 1 1094 60
i 4.865 162.751 0.490 3 53 43 0
i 4.866 163.251 0.490 3 53 43 1
i 4.867 164.251 0.490 3 53 43 2
i 4.868 165.751 0.490 3 53 43 3
i 4.869 167.751 0.490 3 53 43 4
i 4.871 162.751 0.490 3 41 43 0
i 4.872 163.251 0.490 3 41 43 1
i 4.873 164.251 0.490 3 41 43 2
i 4.874 165.751 0.490 3 41 43 3
i 4.875 167.751 0.490 3 41 43 4
i 5.211 162.787 0.100 1 1106 60
i 5.212 162.809 0.100 1 1106 67
i 5.213 162.861 0.100 1 1093 64
i 5.214 162.891 0.100 1 1110 70
i 5.215 162.967 0.100 1 1099 77
i 5.216 162.980 0.100 1 1105 22
i 5.217 162.983 0.100 1 1106 56
i 5.218 163.003 0.100 1 1108 61
i 5.219 163.025 0.100 1 1105 55
i 5.220 163.056 0.100 1 1104 60
i 5.221 163.060 0.100 1 1106 59
i 5.222 163.156 0.100 1 1108 63
i 5.223 163.236 0.100 1 1115 53
i 5.224 163.352 0.100 1 1106 53
i 5.225 163.424 0.100 1 1096 69
i 5.226 163.497 0.100 1 1099 63
i 5.227 163.524 0.100 1 1107 52
i 5.228 163.569 0.100 1 1104 77
i 5.229 163.595 0.100 1 1103 59
i 5.230 163.689 0.100 1 1108 55
i 5.231 163.704 0.100 1 1103 60
i 5.232 163.735 0.100 1 1105 52
i 5.233 163.745 0.100 1 1091 61
i 5.234 163.861 0.100 1 1104 65
i 5.235 163.943 0.100 1 1101 57
i 5.236 163.996 0.100 1 1107 72
i 4.877 164.001 0.490 3 41 127 0
i 4.878 164.501 0.490 3 41 127 1
i 4.879 165.501 0.490 3 41 127 2
i 4.880 167.001 0.490 3 41 127 3
i 4.881 169.001 0.490 3 41 127 4
i 4.883 164.001 0.490 3 53 56 0
i 4.884 164.501 0.490 3 53 56 1
i 4.885 165.501 0.490 3 53 56 2
i 4.886 167.001 0.490 3 53 56 3
i 4.887 169.001 0.490 3 53 56 4
i 5.237 164.044 0.100 1 1111 46
i 5.238 164.077 0.100 1 1105 78
i 5.239 164.139 0.100 1 1115 35
i 5.240 164.144 0.100 1 1101 61
i 5.241 164.149 0.100 1 1113 27
i 5.242 164.228 0.100 1 1105 57
i 5.243 164.293 0.100 1 1097 70
i 5.244 164.320 0.100 1 1098 57
i 5.245 164.332 0.100 1 1101 67
i 5.246 164.427 0.100 1 1101 76
i 5.247 164.543 0.100 1 1100 59
i 5.248 164.545 0.100 1 1103 58
i 5.249 164.581 0.100 1 1109 74
i 5.250 164.721 0.100 1 1113 54
i 4.889 164.751 0.490 3 40 127 0
i 4.890 165.251 0.490 3 40 127 1
i 4.891 166.251 0.490 3 40 127 2
i 4.892 167.751 0.490 3 40 127 3
i 4.893 169.751 0.490 3 40 127 4
i 4.895 164.751 0.490 3 52 56 0
i 4.896 165.251 0.490 3 52 56 1
i 4.897 166.251 0.490 3 52 56 2
i 4.898 167.751 0.490 3 52 56 3
i 4.899 169.751 0.490 3 52 56 4
i 5.251 164.779 0.100 1 1103 62
i 5.252 164.799 0.100 1 1107 45
i 5.253 164.817 0.100 1 1099 75
i 5.254 164.836 0.100 1 1099 78
i 5.255 164.856 0.100 1 1111 35
i 5.256 164.876 0.100 1 1109 72
i 5.257 164.935 0.100 1 1103 57
i 5.258 164.965 0.100 1 1093 52
i 5.259 165.132 0.100 1 1107 76
i 5.260 165.160 0.100 1 1101 74
i 5.261 165.271 0.100 1 1111 66
i 5.262 165.279 0.100 1 1099 73
i 5.263 165.333 0.100 1 1098 57
i 5.264 165.383 0.100 1 1109 30
i 5.265 165.393 0.100 1 1113 51
i 5.266 165.481 0.100 1 1103 61
i 5.267 165.483 0.100 1 1109 61
i 5.268 165.509 0.100 1 1113 47
i 5.269 165.531 0.100 1 1097 60
i 5.270 165.604 0.100 1 1113 64
i 5.271 165.643 0.100 1 1101 77
i 5.272 165.853 0.100 1 1101 74
i 5.273 165.884 0.100 1 1097 56
i 5.274 165.916 0.100 1 1097 58
i 5.275 165.963 0.100 1 1093 71
i 4.901 166.001 0.490 3 57 43 0
i 4.902 166.501 0.490 3 57 43 1
i 4.903 167.501 0.490 3 57 43 2
i 4.904 169.001 0.490 3 57 43 3
i 4.905 171.001 0.490 3 57 43 4
i 4.907 166.001 0.490 3 45 43 0
i 4.908 166.501 0.490 3 45 43 1
i 4.909 167.501 0.490 3 45 43 2
i 4.910 169.001 0.490 3 45 43 3
i 4.911 171.001 0.490 3 45 43 4
i 5.276 166.027 0.100 1 1107 69
i 5.277 166.079 0.100 1 1103 60
i 5.278 166.103 0.100 1 1095 71
i 5.279 166.127 0.100 1 1111 49
i 5.280 166.161 0.100 1 1101 65
i 5.281 166.208 0.100 1 1109 50
i 5.282 166.211 0.100 1 1098 76
i 5.283 166.263 0.100 1 1115 51
i 5.284 166.288 0.100 1 1105 57
i 5.285 166.296 0.100 1 1101 51
i 5.286 166.453 0.100 1 1111 61
i 5.287 166.631 0.100 1 1099 70
i 5.288 166.732 0.100 1 1105 61
i 5.289 166.748 0.100 1 1100 74
i 5.290 166.753 0.100 1 1099 77
i 4.913 166.751 0.490 3 55 43 0
i 5.291 166.755 0.100 1 1103 71
i 4.914 167.251 0.490 3 55 43 1
i 4.915 168.251 0.490 3 55 43 2
i 4.916 169.751 0.490 3 55 43 3
i 4.917 171.751 0.490 3 55 43 4
i 4.919 166.751 0.490 3 43 43 0
i 4.920 167.251 0.490 3 43 43 1
i 4.921 168.251 0.490 3 43 43 2
i 4.922 169.751 0.490 3 43 43 3
i 4.923 171.751 0.490 3 43 43 4
i 5.292 166.768 0.100 1 1105 74
i 5.293 166.776 0.100 1 1095 55
i 5.294 166.780 0.100 1 1103 56
i 5.295 166.791 0.100 1 1101 77
i 5.296 166.837 0.100 1 1109 70
i 5.297 166.897 0.100 1 1109 49
i 5.298 166.919 0.100 1 1109 44
i 5.299 166.963 0.100 1 1105 44
i 5.300 167.081 0.100 1 1105 76
i 5.301 167.141 0.100 1 1107 36
i 5.302 167.240 0.100 1 1095 83
i 5.303 167.300 0.100 1 1092 83
i 5.304 167.369 0.100 1 1103 81
i 5.305 167.387 0.100 1 1107 57
i 5.306 167.411 0.100 1 1107 50
i 5.307 167.443 0.100 1 1099 71
i 5.308 167.443 0.100 1 1105 72
i 5.309 167.475 0.100 1 1111 62
i 5.310 167.551 0.100 1 1105 53
i 5.311 167.684 0.100 1 1107 69
i 5.312 167.711 0.100 1 1105 76
i 5.313 167.743 0.100 1 1105 63
i 5.314 167.832 0.100 1 1115 50
i 5.315 167.853 0.100 1 1107 59
i 5.316 167.880 0.100 1 1097 55
i 5.317 167.933 0.100 1 1108 28
i 5.318 167.968 0.100 1 1100 63
i 5.319 168.005 0.100 1 1097 66
i 4.925 168.001 0.490 3 40 127 0
i 4.926 168.501 0.490 3 40 127 1
i 4.927 169.501 0.490 3 40 127 2
i 4.928 171.001 0.490 3 40 127 3
i 4.929 173.001 0.490 3 40 127 4
i 4.931 168.001 0.490 3 52 56 0
i 4.932 168.501 0.490 3 52 56 1
i 4.933 169.501 0.490 3 52 56 2
i 4.934 171.001 0.490 3 52 56 3
i 4.935 173.001 0.490 3 52 56 4
i 5.320 168.052 0.100 1 1105 40
i 5.321 168.055 0.100 1 1103 65
i 5.322 168.097 0.100 1 1107 67
i 5.323 168.101 0.100 1 1107 61
i 5.324 168.163 0.100 1 1092 60
i 5.325 168.167 0.100 1 1103 48
i 5.326 168.288 0.100 1 1103 54
i 5.327 168.355 0.100 1 1111 42
i 5.328 168.384 0.100 1 1114 45
i 5.329 168.572 0.100 1 1100 58
i 5.330 168.607 0.100 1 1105 66
i 5.331 168.636 0.100 1 1099 71
i 5.332 168.667 0.100 1 1101 58
i 5.333 168.669 0.100 1 1102 60
i 4.937 168.751 0.490 3 38 127 0
i 4.938 169.251 0.490 3 38 127 1
i 4.939 170.251 0.490 3 38 127 2
i 4.940 171.751 0.490 3 38 127 3
i 4.941 173.751 0.490 3 38 127 4
i 4.943 168.751 0.490 3 50 56 0
i 4.944 169.251 0.490 3 50 56 1
i 4.945 170.251 0.490 3 50 56 2
i 4.946 171.751 0.490 3 50 56 3
i 4.947 173.751 0.490 3 50 56 4
i 5.334 168.755 0.100 1 1110 54
i 5.335 168.795 0.100 1 1112 22
i 5.336 168.823 0.100 1 1104 55
i 5.337 168.887 0.100 1 1101 77
i 5.338 168.897 0.100 1 1109 59
i 5.339 168.920 0.100 1 1099 49
i 5.340 168.939 0.100 1 1100 55
i 5.341 168.985 0.100 1 1105 64
i 5.342 169.179 0.100 1 1108 62
i 5.343 169.193 0.100 1 1098 50
i 5.344 169.243 0.100 1 1096 57
i 5.345 169.292 0.100 1 1114 52
i 5.346 169.353 0.100 1 1110 74
i 5.347 169.440 0.100 1 1112 69
i 5.348 169.545 0.100 1 1092 68
i 5.349 169.548 0.100 1 1104 66
i 5.350 169.553 0.100 1 1103 79
i 5.351 169.572 0.100 1 1101 71
i 5.352 169.600 0.100 1 1098 83
i 5.353 169.603 0.100 1 1110 24
i 5.354 169.668 0.100 1 1108 68
i 5.355 169.751 0.100 1 1097 63
i 5.356 169.783 0.100 1 1108 58
i 5.357 169.811 0.100 1 1100 51
i 5.358 169.903 0.100 1 1094 73
i 5.359 169.920 0.100 1 1104 72
i 5.360 169.957 0.100 1 1102 58
i 4.949 170.001 0.490 3 55 43 0
i 4.950 170.501 0.490 3 55 43 1
i 4.951 171.501 0.490 3 55 43 2
i 4.952 173.001 0.490 3 55 43 3
i 4.953 175.001 0.490 3 55 43 4
i 4.955 170.001 0.490 3 43 43 0
i 4.956 170.501 0.490 3 43 43 1
i 4.957 171.501 0.490 3 43 43 2
i 4.958 173.001 0.490 3 43 43 3
i 4.959 175.001 0.490 3 43 43 4
i 5.361 170.083 0.100 1 1112 49
i 5.362 170.143 0.100 1 1110 52
i 5.363 170.231 0.100 1 1098 74
i 5.364 170.404 0.100 1 1110 55
i 5.365 170.445 0.100 1 1096 62
i 5.366 170.480 0.100 1 1104 72
i 5.367 170.495 0.100 1 1094 74
i 5.368 170.521 0.100 1 1104 69
i 5.369 170.580 0.100 1 1114 40
i 5.370 170.588 0.100 1 1110 52
i 5.371 170.649 0.100 1 1099 64
i 5.372 170.652 0.100 1 1104 66
i 5.373 170.728 0.100 1 1106 63
i 4.961 170.751 0.490 3 55 43 0
i 4.962 171.251 0.490 3 55 43 1
i 4.963 172.251 0.490 3 55 43 2
i 4.964 173.751 0.490 3 55 43 3
i 4.965 175.751 0.490 3 55 43 4
i 4.967 170.751 0.490 3 43 43 0
i 4.968 171.251 0.490 3 43 43 1
i 4.969 172.251 0.490 3 43 43 2
i 4.970 173.751 0.490 3 43 43 3
i 4.971 175.751 0.490 3 43 43 4
i 5.374 170.771 0.100 1 1113 6
i 5.375 170.785 0.100 1 1102 74
i 5.376 170.865 0.100 1 1108 42
i 5.377 171.164 0.100 1 1101 68
i 5.378 171.169 0.100 1 1102 56
i 5.379 171.215 0.100 1 1110 61
i 5.380 171.227 0.100 1 1116 40
i 5.381 171.268 0.100 1 1100 56
i 5.382 171.296 0.100 1 1106 80
i 5.383 171.387 0.100 1 1106 56
i 5.384 171.400 0.100 1 1096 75
i 5.385 171.485 0.100 1 1108 59
i 5.386 171.569 0.100 1 1106 79
i 5.387 171.717 0.100 1 1098 77
i 5.388 171.737 0.100 1 1091 59
i 5.389 171.747 0.100 1 1115 8
i 5.390 171.865 0.100 1 1098 56
i 5.391 171.912 0.100 1 1104 51
i 5.392 171.924 0.100 1 1096 80
i 4.973 172.001 0.490 3 36 127 0
i 4.974 172.501 0.490 3 36 127 1
i 4.975 173.501 0.490 3 36 127 2
i 4.976 175.001 0.490 3 36 127 3
i 4.977 177.001 0.490 3 36 127 4
i 4.979 172.001 0.490 3 48 56 0
i 4.980 172.501 0.490 3 48 56 1
i 4.981 173.501 0.490 3 48 56 2
i 4.982 175.001 0.490 3 48 56 3
i 4.983 177.001 0.490 3 48 56 4
i 5.393 172.041 0.100 1 1106 26
i 5.394 172.059 0.100 1 1112 63
i 5.395 172.151 0.100 1 1116 49
i 5.396 172.165 0.100 1 1106 59
i 5.397 172.436 0.100 1 1100 62
i 5.398 172.443 0.100 1 1098 81
i 5.399 172.445 0.100 1 1100 60
i 5.400 172.483 0.100 1 1102 79
i 5.401 172.559 0.100 1 1108 46
i 5.402 172.579 0.100 1 1093 69
i 5.403 172.692 0.100 1 1107 27
i 4.985 172.751 0.490 3 36 127 0
i 4.986 173.251 0.490 3 36 127 1
i 4.987 174.251 0.490 3 36 127 2
i 4.988 175.751 0.490 3 36 127 3
i 4.989 177.751 0.490 3 36 127 4
i 4.991 172.751 0.490 3 48 56 0
i 4.992 173.251 0.490 3 48 56 1
i 4.993 174.251 0.490 3 48 56 2
i 4.994 175.751 0.490 3 48 56 3
i 4.995 177.751 0.490 3 48 56 4
i 5.404 172.955 0.100 1 1096 72
i 5.405 173.052 0.100 1 1112 60
i 5.406 173.056 0.100 1 1104 41
i 5.407 173.108 0.100 1 1100 53
i 5.408 173.147 0.100 1 1114 60
i 5.409 173.201 0.100 1 1103 80
i 5.410 173.212 0.100 1 1111 41
i 5.411 173.333 0.100 1 1099 58
i 5.412 173.356 0.100 1 1102 74
i 5.413 173.557 0.100 1 1107 18
i 5.414 173.703 0.100 1 1093 68
i 5.415 173.707 0.100 1 1104 50
i 5.416 173.892 0.100 1 1109 50
i 5.417 173.900 0.100 1 1108 48
i 5.418 173.920 0.100 1 1098 63
i 4.997 174.001 0.490 3 52 43 0
i 4.998 174.501 0.490 3 52 43 1
i 4.999 175.501 0.490 3 52 43 2
i 4.1000 177.001 0.490 3 52 43 3
i 4.1001 179.001 0.490 3 52 43 4
i 4.1003 174.001 0.490 3 40 43 0
i 4.1004 174.501 0.490 3 40 43 1
i 4.1005 175.501 0.490 3 40 43 2
i 4.1006 177.001 0.490 3 40 43 3
i 4.1007 179.001 0.490 3 40 43 4
i 5.419 174.132 0.100 1 1093 55
i 5.420 174.167 0.100 1 1097 59
i 5.421 174.172 0.100 1 1104 52
i 5.422 174.215 0.100 1 1103 64
i 5.423 174.343 0.100 1 1115 26
i 5.424 174.403 0.100 1 1115 23
i 5.425 174.412 0.100 1 1111 40
i 5.426 174.511 0.100 1 1112 38
i 4.1009 174.751 0.490 3 52 43 0
i 4.1010 175.251 0.490 3 52 43 1
i 4.1011 176.251 0.490 3 52 43 2
i 4.1012 177.751 0.490 3 52 43 3
i 4.1013 179.751 0.490 3 52 43 4
i 4.1015 174.751 0.490 3 40 43 0
i 4.1016 175.251 0.490 3 40 43 1
i 4.1017 176.251 0.490 3 40 43 2
i 4.1018 177.751 0.490 3 40 43 3
i 4.1019 179.751 0.490 3 40 43 4
i 5.427 174.879 0.100 1 1104 56
i 5.428 174.915 0.100 1 1096 67
i 5.429 174.992 0.100 1 1101 58
i 5.430 175.027 0.100 1 1095 66
i 5.431 175.048 0.100 1 1113 11
i 5.432 175.055 0.100 1 1109 54
i 5.433 175.087 0.100 1 1099 82
i 5.434 175.144 0.100 1 1107 39
i 5.435 175.244 0.100 1 1117 31
i 5.436 175.533 0.100 1 1099 61
i 5.437 175.595 0.100 1 1102 70
i 5.438 175.673 0.100 1 1113 12
i 5.439 175.715 0.100 1 1097 70
i 5.440 175.745 0.100 1 1099 81
i 5.441 175.775 0.100 1 1105 67
i 5.442 175.916 0.100 1 1107 41
i 4.1021 176.001 0.490 3 36 127 0
i 4.1022 176.501 0.490 3 36 127 1
i 4.1023 177.501 0.490 3 36 127 2
i 4.1024 179.001 0.490 3 36 127 3
i 4.1025 181.001 0.490 3 36 127 4
i 4.1027 176.001 0.490 3 48 56 0
i 4.1028 176.501 0.490 3 48 56 1
i 4.1029 177.501 0.490 3 48 56 2
i 4.1030 179.001 0.490 3 48 56 3
i 4.1031 181.001 0.490 3 48 56 4
i 5.443 176.119 0.100 1 1105 39
i 5.444 176.189 0.100 1 1092 61
i 5.445 176.217 0.100 1 1115 5
i 5.446 176.288 0.100 1 1097 66
i 5.447 176.340 0.100 1 1101 52
i 5.448 176.357 0.100 1 1103 68
i 5.449 176.524 0.100 1 1097 60
i 4.1033 176.751 0.490 3 36 127 0
i 4.1034 177.251 0.490 3 36 127 1
i 4.1035 178.251 0.490 3 36 127 2
i 4.1036 179.751 0.490 3 36 127 3
i 4.1037 181.751 0.490 3 36 127 4
i 4.1039 176.751 0.490 3 48 56 0
i 4.1040 177.251 0.490 3 48 56 1
i 4.1041 178.251 0.490 3 48 56 2
i 4.1042 179.751 0.490 3 48 56 3
i 4.1043 181.751 0.490 3 48 56 4
i 5.450 176.755 0.100 1 1106 -1
i 5.451 176.904 0.100 1 1115 60
i 5.452 176.911 0.100 1 1095 76
i 5.453 176.913 0.100 1 1109 35
i 5.454 176.923 0.100 1 1101 55
i 5.455 176.943 0.100 1 1101 52
i 5.456 177.009 0.100 1 1094 74
i 5.457 177.127 0.100 1 1099 77
i 5.458 177.372 0.100 1 1108 24
i 5.459 177.447 0.100 1 1113 40
i 5.460 177.671 0.100 1 1099 76
i 5.461 177.733 0.100 1 1103 70
i 5.462 177.743 0.100 1 1098 54
i 5.463 177.747 0.100 1 1093 72
i 5.464 177.748 0.100 1 1111 40
i 5.465 177.916 0.100 1 1103 55
i 5.466 178.069 0.100 1 1114 4
i 5.467 178.148 0.100 1 1109 56
i 5.468 178.347 0.100 1 1103 63
i 5.469 178.361 0.100 1 1097 80
i 5.470 178.584 0.100 1 1109 51
i 5.471 178.847 0.100 1 1112 30
i 5.472 178.887 0.100 1 1105 49
i 5.473 179.199 0.100 1 1105 84
i 5.474 179.212 0.100 1 1100 82
i 5.475 179.475 0.100 1 1095 72
i 5.476 179.581 0.100 1 1116 34
i 5.477 179.704 0.100 1 1114 15
i 4.1045 180.001 0.490 3 36 127 0
i 4.1046 180.501 0.490 3 36 127 1
i 4.1047 181.501 0.490 3 36 127 2
i 4.1048 183.001 0.490 3 36 127 3
i 4.1049 185.001 0.490 3 36 127 4
i 4.1051 180.001 0.490 3 48 56 0
i 4.1052 180.501 0.490 3 48 56 1
i 4.1053 181.501 0.490 3 48 56 2
i 4.1054 183.001 0.490 3 48 56 3
i 4.1055 185.001 0.490 3 48 56 4
i 5.478 180.121 0.100 1 1097 53
i 5.479 180.183 0.100 1 1105 69
i 5.480 180.255 0.100 1 1116 38
i 5.481 180.641 0.100 1 1116 24
i 4.1057 180.751 0.490 3 36 127 0
i 4.1058 181.251 0.490 3 36 127 1
i 4.1059 182.251 0.490 3 36 127 2
i 4.1060 183.751 0.490 3 36 127 3
i 4.1061 185.751 0.490 3 36 127 4
i 4.1063 180.751 0.490 3 48 56 0
i 4.1064 181.251 0.490 3 48 56 1
i 4.1065 182.251 0.490 3 48 56 2
i 4.1066 183.751 0.490 3 48 56 3
i 4.1067 185.751 0.490 3 48 56 4
i 5.482 180.919 0.100 1 1102 73
i 5.483 181.053 0.100 1 1098 70
i 5.484 181.097 0.100 1 1108 40
i 5.485 181.609 0.100 1 1110 23
i 5.486 181.625 0.100 1 1106 27
i 5.487 181.659 0.100 1 1100 59
i 5.488 182.477 0.100 1 1104 79
i 5.489 182.529 0.100 1 1109 8
i 5.490 183.353 0.100 1 1106 66
i 5.491 183.353 0.100 1 1113 4
i 5.492 183.920 0.100 1 1096 51
i 4.1069 184.001 0.490 3 36 127 0
i 4.1070 184.501 0.490 3 36 127 1
i 4.1071 185.501 0.490 3 36 127 2
i 4.1072 187.001 0.490 3 36 127 3
i 4.1073 189.001 0.490 3 36 127 4
i 5.493 184.097 0.100 1 1111 22
i 5.494 184.429 0.100 1 1098 78
i 4.1075 184.751 0.490 3 36 127 0
i 4.1076 185.251 0.490 3 36 127 1
i 4.1077 186.251 0.490 3 36 127 2
i 4.1078 187.751 0.490 3 36 127 3
i 4.1079 189.751 0.490 3 36 127 4
i 5.495 184.761 0.100 1 1115 12
i 5.496 185.381 0.100 1 1102 50
i 5.497 186.276 0.100 1 1100 69
i 5.498 186.941 0.100 1 1105 79
i 5.499 187.664 0.100 1 1107 51
i 4.1081 188.001 0.490 3 36 127 0
i 4.1082 188.501 0.490 3 36 127 1
i 4.1083 189.501 0.490 3 36 127 2
i 4.1084 191.001 0.490 3 36 127 3
i 4.1085 193.001 0.490 3 36 127 4
i 5.500 188.385 0.100 1 1097 77
i 5.501 189.049 0.100 1 1099 71
i 5.502 189.944 0.100 1 1101 55
i 5.503 190.897 0.100 1 1099 52
i 5.504 191.408 0.100 1 1105 57
i 5.505 191.976 0.100 1 1106 51
i 5.506 192.852 0.100 1 1098 69
i 5.507 193.671 0.100 1 1100 61
i 5.508 194.412 0.100 1 1100 48
i 5.509 195.211 0.100 1 1098 50
i 5.510 195.856 0.100 1 1106 51
i 5.511 196.444 0.100 1 1106 54

s
; Allow time for the reverb tail to fade out and the camera animation speed to slow down to zero.
i "SendEndedMessage" 30 -1

 #ifdef IS_GENERATING_JSON
    i "GenerateJson" 0 1
 #else
    ; Allow time to rewind the score. Csound will error out if the score times out before it is rewound.
    e 60
 #end

</CsScore>
</CsoundSynthesizer>
<Cabbage>
</Cabbage>
